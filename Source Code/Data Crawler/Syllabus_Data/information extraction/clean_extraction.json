[
    {
        "CSCI-430": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nComputers and networking are crucial to many aspects of our daily lives: entertainment, business,\npersonal communication, healthcare, transportation, utilities, etc. Security of such systems is thus of\nparamount importance for protecting our assets or even our lives. This course will give students an\noverview of systems security, its workings, and its role in protecting data and computing resources.\nStudents will receive both theoretical knowledge of threats and defenses and practical skills allowing\nthem to implement some popular threats and defenses in a laboratory setting.\nAfter successfully completing this course, you should be able to:\nDescribe and assess a broad range of security problems and solutions\nUnderstand the fundamental mathematics and engineering underlying security systems, as\nwell as basic networking and operating systems\nJudge the suitability of security systems for various applications\nInstall and configure some basic, open-source security systems\nKnow how to develop new security systems and features\nIn addition to lectures students will be engaged through a number of hands-on homeworks and\ncapture-the-flag (CTF) exercises, where they will apply the knowledge from the class in realistic\nsecurity scenarios, attacking or defending real servers on the DeterLab testbed for security\nexperimentation.\nPrerequisites: CSCI 201 or equivalent (e.g. EE classes on the same topics), or permission of the\ninstructor. Please contact the instructor if you wish to enroll and don't have the prerequisites.\nTextbook\nStallings and Brown, Computer Security (Required), Any edition\nISBN: 9780134794105\nSyllabus / Topics Covered\nDate Topics covered Slides/Videos Reading/Links Homework\n1/8 Class logistics Logistics Read Learning how to use\nIntro to Deterlab DeterLab for DeterLab\nStudents\nguide.\nhttps://ccss.usc.edu/430/ 1/4\n3/16/25, 7:11 PM CSCI 430 - Introduction to Computer and Network Security - Spring 2024\nRead Hello\nWorld\nexample\nIntro to cybersecurity Network\n1/10 Introduction\nNetwork primer primer\n1/15 MLK Day: NO CLASS\nCrypto Basics\n1/17 Cryptography Crypto: One-\nway Hashes\nCrypto:\n1/22 Cryptography Symmetric Homework 1 assigned\nCryptography\nCrypto:\nCryptography\n1/24 Asymmetric\nEncryption exercises\nCryptography\nEncryption Trivia\n1/29 Encryption Trivia\nSolutions\nShared Key Let's Encrypt\nExchange CA\n1/31 Key management\nPublic Key Create your\nExchange own root cert\n2/5 Authentication Authentication\n2/7 Access control Access Control Homework 1 due\nExample\n2/12 Midterm preparation\nMidterms\nIntrusions 1:\nIntrusions 1/2 (not on\n2/14 Recon and\nmidterm)\nScanning\nPresidents' Day: NO\n2/19\nCLASS\n2/21 Midterm\nIntrusions 2:\nScanning\n2/26 Intrusions 2 Homework 2 assigned\n(cont'd) and\nInitial Access\n2/28 CTF 1 preparation\nIntrusions 3:\nInitial Access\n(cont'd),\n3/4 Intrusions 3\nMaintaining\nAccess, and\nCovering Tracks\n3/6 Passwords Passwords\nSPRING BREAK: NO\n3/11,3/13\nCLASS\n3/18 CTF 1 debugging\n3/20 CTF 1 starts\n3/25 DDoS 1: Introduction Intro to DDoS\n3/27 CTF 1 continues\n4/1 CTF 1 Round 1 Homework 2 due\nhttps://ccss.usc.edu/430/ 2/4",
            "Learning Objective": "",
            "Table Description": "Syllabus / Topics Covered |  |  |  | \nDate | Topics covered | Slides/Videos | Reading/Links | Homework\n\n\n\n\n1/10 | Intro to cybersecurity\nNetwork primer | Introduction | Network\nprimer | \n1/15 | MLK Day: NO CLASS |  |  | \n1/17 | Cryptography | Crypto Basics\nCrypto: One-\nway Hashes |  | \n1/22 | Cryptography | Crypto:\nSymmetric\nCryptography |  | Homework 1 assigned\n1/24 | Cryptography\nEncryption exercises | Crypto:\nAsymmetric\nCryptography |  | \n1/29 | Encryption Trivia | Encryption Trivia |  | \n |  | Solutions |  | \n1/31 | Key management | Shared Key\nExchange\nPublic Key\nExchange | Let's Encrypt\nCA\nCreate your\nown root cert | \n2/5 | Authentication | Authentication |  | \n2/7 | Access control | Access Control |  | Homework 1 due\n2/12 | Midterm preparation | Example\nMidterms |  | \n2/14 | Intrusions 1/2 (not on\nmidterm) | Intrusions 1:\nRecon and\nScanning |  | \n2/19 | Presidents' Day: NO\nCLASS |  |  | \n2/21 | Midterm |  |  | \n2/26 | Intrusions 2 | Intrusions 2:\nScanning\n(cont'd) and\nInitial Access |  | Homework 2 assigned\n2/28 | CTF 1 preparation |  |  | \n3/4 | Intrusions 3 | Intrusions 3:\nInitial Access\n(cont'd),\nMaintaining\nAccess, and\nCovering Tracks |  | \n3/6 | Passwords | Passwords |  | \n3/11,3/13 | SPRING BREAK: NO\nCLASS |  |  | \n3/18 | CTF 1 debugging |  |  | \n3/20 | CTF 1 starts |  |  | \n3/25 | DDoS 1: Introduction | Intro to DDoS |  | \n3/27 | CTF 1 continues |  |  | \n4/1 | CTF 1 Round 1 |  |  | Homework 2 due\n\n\n\n\n4/3 | DDOS 2: Challenges and\nSolutions | DDoS\nChallenges |  | Homework 3 assigned\n4/8 | CTF 1 Round 2 |  |  | \n4/10 | DNS Security | DNS Security | DNSEC\nNSEC | \n4/15 | Privacy\nCTF 2 Phase 1 starts | Privacy 1:\nPrivate\nCommunications |  | Homework 4 assigned\n |  | Privacy 2:\nSharing Data\nPrivately |  | \n4/17 | Routing Security | Routing Security |  | Homework 3 due, CTF 1\nReport Due.\n4/22 | Final preparation | Solutions |  | Homework 4 due\n4/24 | In class CTF |  |  | \nClass Assignments |  |  |  | \n\n\n"
        }
    },
    {
        "CSCI-356": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nClass Information\nClass Name: CSCI 356 Introduction to Computer Systems\nUnits: 4\nSession: Fall 2020\nInstructors: Marco Paolieri, Mark Redekopp\nTeaching Assistants: see the list of TAs\nOffice Hours: see the calendar\nCourse Description\nThis course covers computer systems hardware organization and the programmer interface with the goal of\nimproving students’ abilities to reason about the execution of their programs, write system software, and\nenhance the performance of the programs they write. This course will also serve as a basis for other systems\ncourses, such as CSCI 350 (Operating Systems), CSCI 450 (Computer Networks), or CSCI 457 (Computer Systems\nOrganization), EE 451 (Parallel and Distributed Computation).\nConcepts include information representations, assembly language programming and the nuances of the x86\ninstruction set, the memory hierarchy including DRAM and cache, address translation and virtual memory,\ninstruction execution on a modern processor with out-of-order execution, along with compilation and system\nsoftware concepts such as linking and heap management.\nFive programming assignments will provide the opportunity for students to apply the skills they have gained in\nthe context of real applications. Many assignments will involved reverse engineering machine code or\nattempting to optimize performance of certain code kernels. Along the way use of debuggers and other binary\ntools will be taught and practiced.\nThe fundamental concepts and skills learned in this class underpin the modern state-of-the-art of computer\nsystem organization and will be the basis for future courses in operating systems, compilers, networks, and\ncomputer architecture.",
            "Learning Objective": "Below are the specific, measurable skills a student will demonstrate by the end of the course. These objectives\nwill be both taught and assessed in the course and are aligned with the assignments, assessments and learning\nmaterials.\n1. Translate bit strings to numbers using unsigned, 2’s complement, and IEEE standard floating point\nrepresentation systems.\n2. Reverse engineer machine code and assembly code to a behavioral (high-level) descriptions.\n3. Translate high-level software code to corresponding x86 instruction sequences.\n4. Assess the cache performance of a system given its memory/cache specifications and a specific address\ntrace.\n5. Identify various software vulnerabilities and how they may be exploited.\n6. Manually simulate address translation as a means of understanding hardware and software components\nthat do likewise.\n7. Experiment to determine efficient storage (specifically heap memory) allocation strategies.\n8. Organize code and use compiler settings to achieve enhanced performance on specific processor\narchitectures.\nPrerequisites\nCS 104L (Data Structures and Object Oriented Design)\nCo-Requisites\nNone\nConcurrent Enrollment\nCourses that must be taken simultaneously.\nRecommended Preparation\nNone\nCourse Materials\nAll content will be provided on our website. We will post lecture slides/notes BEFORE each lecture and it is\nSTRONGLY encouraged that you print and bring the set of notes to class with you each lecture.\nThe required textbook for the course is Computer Systems: A Programmer’s Perspective, by Bryant and\nO’Hallaron (3rd edition, Pearson, 2015, ISBN 978-0134092669).\nCourse Websites\n1. Primary website: All course assignments, content, office hours information, will be posted at our main\nwebsite usc-cs356.github.io.\n2. Q&A website: A Q&A and announcement website at https://piazza.com/usc/fall2020/csci356/home will be\nused. All announcements regarding assignments, lectures, exams, etc. will be made via Piazza. It is your\nresponsibility to check this site often.\n3. Grades: Blackboard (blackboard.usc.edu) will also be used to record assignment and exam grades.\nTechnological Pro\u0000ciency and Hardware/Software Required\nThis course requires you have access to a computer/laptop able to run the course virtual machine which we will\nprovide via our website. Your computer must be able to run Oracle VirtualBox to use the provided virtual\nmachine image. Please visit the course website for more information.\nYou will also be provided access to private GitHub repositories where you must commit and push your code\nsubmissions. You are expected to be familiar with basic git and GitHub skills.\nRequired Readings and Supplementary Materials\nThe following textbooks are required. We recommend you read the sections listed on the course schedule\nbelow for the corresponding week BEFORE attending the first lecture of that week.\nComputer Systems: A Programmer’s Perspective, by Bryant and O’Hallaron (3rd edition, Pearson, 2015, ISBN\n978-0134092669). Available at the bookstore and/or from an online retailer.\nDescription and Assessment of Assignments\nAvailability: Assignments will be made available on Assignments page of the course website.\nSubmissions: Your assignments must be pushed to your class-provided private repositories on GitHub.\nLate Submission: You will be allowed 5 grace days over the semester. You may submit assignment solutions\nup to 48 hours (2 days) late provided you still have remaining grace days. Thus, you may only use 2 grace\ndays per assignment. If you do not have grace days or it is 48 hours past the deadline, no submission will be\naccepted. If you are 1 minute late, it will require you to use a full grace day.\nGrading and Assessment: Assignment questions will include a point total that indicates the value of the\nassignment and each subproblem. For most assignments, a script will be provided to allow you to run the\nSAME tests we will run for grading, and even show you your final score BEFORE you submit (provided you\nfollow submission instructions correctly).\nSolutions: Solutions to the assignments will NOT be provided. However, you are welcome and encouraged\nto ask the instructor, other students, or other course staff about any problems you could not solve correctly.\nExams",
            "Table Description": ""
        }
    },
    {
        "CSCI-587": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nand ideas gleaned from SSCI 581: Concepts for\nSpatial Thinking and this course to prepare an abstract, extended abstract, and a preliminary\nprospectus for their master’s thesis project. The thesis represents the capstone project for the\nGIST M.S. degree; additional thesis elements are interspersed throughout the required and\nelective courses leading to SSCI 594a/b: Master’s Thesis. GIST Certificate students who do not\nintend to complete a thesis will complete alternative assignments. Students enrolled in the HSGI\nM.S. program are required to complete a capstone project that focuses on one or more human\nsecurity and/or geospatial intelligence challenges at the end of their studies. Similarly, these\nstudents complete on a series of assignments that work towards a project proposal.\nWritten Communication Skills - Since successful spatial scientists and geospatial intelligence\nspecialists need cutting-edge spatial skills as well as effective communication competence to\nprosper in today’s rapidly evolving world, faculty members from the USC Writing Program\ncoach students on their writing skills in selected assignments during this course.\nSSCI 587 Syllabus, Page 2 of 14",
            "Learning Objective": "",
            "Table Description": "Eitzel, M.V., Cappadonna, J.L., Santos-Lang, C., Duerr, R.E., Virapongse, A., West,\nS.E., Kyba, C., Bowser, A., Cooper, C.B., Sforzi, A. and Metcalfe, A.N., 2017. Citizen\nscience terminology matters: Exploring key terms. Citizen science: Theory and\npractice, 2(1).\n\n\n\n\nFraiberger, S.P., Astudillo, P., Candeago, L., Chunet, A., Jones, N.K., Khan, M.F., Lepri,\nB., Gracia, N.L., Lucchini, L., Massaro, E. and Montfort, A., 2020. Uncovering\nsocioeconomic gaps in mobility reduction during the COVID-19 pandemic using location\ndata. arXiv preprint arXiv:2006.15195.\n\n\n\n\nMahdianpari, M., Granger, J.E., Mohammadimanesh, F., Warren, S., Puestow, T., Salehi,\nB. and Brisco, B., 2020. Smart solutions for smart cities: Urban wetland mapping using\nvery-high resolution satellite imagery and airborne LiDAR data in the City of St. John's\nNL, Canada. Journal of Environmental Management, p.111676.\n\n\n\n\nZhao, Q., Wen, H., Lin, Z., Xuan, D. and Shroff, N., 2020, October. On the accuracy of\nmeasured proximity of bluetooth-based contact tracing apps. In International Conference\non Security and Privacy in Communication Systems (pp. 49-60). Springer, Cham.\n"
        }
    },
    {
        "CSCI-550": {
            "Course Description": "Catalogue Course Description:\nFoundations of Data Management and Processing, Modern Database System Architectures,\nOLAP and OLTP Indexing, Query Pipelining, Materialization, Vectorization, Scheduling,\nJoin Algorithms, Optimization, Consistency, Concurrency Control\n\nExpanded Course Description:\nCourse Description\nWith the unprecedented volumes of data we face, database and data-intensive systems had\nto be revolutionized to remain efficient. During the last two decades, the data management\nand processing fields had exploded, especially with the massive decreases in the storage and\ncomputation costs that encouraged the development of scalable techniques. In this course,\nwe provide a comprehensive introduction to the modern techniques and foundations of large-\nscale data management and processing while covering topics such as indexing for different\nworkload types, query pipelining, vectorized execution, query optimization, concurrency\ncontrol, and consistency. We also delve into the modern database system architectures that\nexploit specialized hardware (e.g., GPU, NVRAM, RDMA) and serve specific application\nrequirements (e.g., in-memory, streaming, hybrid analytic and transaction workloads). To\nshow the practicality of these modern system architectures, we study some popular real\nsystems, such as Snowflake and Spark, as use cases of them.\nThe course is designed for both MSc and PhD students who are interested in understanding\nthe concepts of building efficient data systems and exercising such concepts using a hands-\non project. Classes will be a mix of the instructor’s lectures and student-led presentations on\nrepresentative papers published in top database venues.\nPage 1 of 11",
            "Learning Objective": "• Introducing the modern fundamentals of database management and analysis.\n• Familiarizing the students with the current database system architectures.\n• Evaluating the strengths and weaknesses of different approaches in the same topic.\n• Improving the teamwork spirit and collaboration skills.\nPrerequisite(s): CSCI-485 or CSCI-585 or permission of the instructor.\nRecommended Preparation: Students are strongly recommended to be familiar with the\nSQL query language and the basics of database management systems that are covered in\nCSCI-485 and/or CSCI-585, including indexing structures (hash and B+-tree), query\noptimization, query execution, concurrency control, transaction processing techniques, and\ncrash recovery protocols. Students must have good programming skills, preferably in C/C++\nlanguages.\nCourse Notes\nThe grading type will be Letter, and its numerical mapping is described below. We will use\nBlackboard for posting Syllabus, homework, and other class information. We will use Piazza\nfor communication and discussion.\nTechnological Proficiency and Hardware/Software Required\nStudents will utilize personal laptops/desktops and should be familiar with using the ACM\nDigital Library and web search engines to access required research papers and materials.\nRequired Readings and Supplementary Materials\nThere will be no required textbook. The lectures given by the instructor and the students'\npresentations will be based on recent influential papers in top research venues of data\nmanagement, processing, and analysis.\nDescription of Course Deliverables and Assessment\n• Review Reports: Students are expected to deliver review reports for some topics in\nthe class. Each review report should contain summaries and critical evaluations\n(detailed strengths and weakness points) for the papers on the corresponding topic.\n● Review Presentation: Each student will prepare and give one presentation on a paper\nselected by him/her on one topic covered in the course. Presentations will be\nfollowed with in-class discussions. Students will be graded based on the clarity and\nquality of their presentations. Typically, presentations will occur at the second half\nof each class.\n● Two Exams: There will be two exams, at the middle and the end of the semester, to\nevaluate the student’s understanding of the topics in the class.\n● Course Project: Students will work on course projects in groups of 2-3. Each group\nwill propose a project that extends an open-source database component/system to\nsupport more functionalities or specific workloads. Students will write a project\nproposal, present their findings in a presentation at the end of the course, and write a\nconference paper-style project report. There will be one status update meeting along\nPage 2 of 11",
            "Table Description": "| Lecture | Topics/Daily Activities | Readings/Preparation | Deliverables\nWeek 1 | 01/09 | Introduction & an Overview of Relational\nDatabase Systems | Relational Database\nSystems | \n | 01/11 | OLAP Indexing – Part 1 | Indexing | \nWeek 2 | 01/16 | OLAP Indexing – Part 2 |  | \n | 01/18 | OLTP Indexing | Indexing | \nWeek 3 | 01/23 | Query Pipelining & Materialization | Query Pipelining &\nMaterialization | Report 1 Due\n | 01/25 | Query Scheduling | Query Scheduling | \nWeek 4 | 01/30 | Vectorized Execution | Vectorized Execution | Report 2 Due\n | 02/01 | Query Compilation | Query Compilation | \nWeek 5 | 02/06 | Join Algorithms – Hashing | Join Algorithms | Report 3 Due\n | 02/08 | Join Algorithms – Sorting | Join Algorithms | \nWeek 6 | 02/13 | Query Optimization Implementation – Part 1 | Query Optimization | Report 4 Due\n | 02/15 | Query Optimization Implementation – Part 2 | Query Optimization | \nWeek 7 | 02/20 | Exam 1 |  | \n | 02/22 |  |  | \nWeek 8 | 02/27 | Concurrency Control – Part 1 | Concurrency Control | Report 5 Due\n | 02/29 | Concurrency Control – Part 2 | Concurrency Control | \nWeek 9 | 03/05 | Consistency – Part 1 | Consistency | Report 6 Due\n | 03/07 | Consistency – Part 2 | Consistency | \nWeek 10 | 03/12 | Spring Recess |  | \n | 03/14 | Spring Recess |  | \nWeek 11 | 03/19 | Modern Database Systems Architectures – Part 1 | System Architectures | Report 7 Due\n | 03/21 | Modern Database Systems Architectures – Part 2 | System Architectures | \nWeek 12 | 03/26 | Status Updates of Projects |  | \n | 03/28 | Modern Database Systems Architectures – Part 3 | System Architectures | \nWeek 13 | 04/02 | System Case Study – DuckDB | DuckDB | Report 8 Due\n | 04/04 | System Case Study – Snowflake | Snowflake | \nWeek 14 | 04/09 | System Case Study – Spark | Spark | \n | 04/11 | System Case Study – Materialize | Materialize | \nWeek 15 | 04/16 | Additional Topics |  | \n | 04/18 | Exam 2 |  | \nWeek 16 | 04/23 | Final Project Presentations (Part 1) |  | Project Due\n | 04/25 | Final Project Presentations (Part 2) |  | \nFINAL |  |  |  | Refer to the\nfinal exam\nschedule in the\nUSC Schedule of\nClasses at\nclasses.usc.edu.\n\n\n"
        }
    },
    {
        "CSCI-544": {
            "Course Description": "Catalogue Course Description:\nThis course covers both fundamental and cutting-edge topics in Natural Language Processing (NLP) and provides students with hands-on experience in\nNLP applications.\nLearning Objectives\nThe syllabus is available at the following link:\nhttps://docs.google.com/document/d/1llcoPTw818iyCL9yEIihOaZHE_zTbfcb\nPlease check the link continuously because there may be minor changes in the future.\nPLEASE CHECK THE LINK CONTINUALLY FOR THE LATEST VERSION\n● Read technical literature in Natural Language Processing (including original research articles) and answer questions about such readings.\n● Implement language processing algorithms and test them on natural language data.\n● Solve language processing problems and explain the reasoning behind their solution\nRequired Preparation:\nExperience with programming in Python\n\nExpanded Course Description:",
            "Learning Objective": "The syllabus is available at the following link:\nhttps://docs.google.com/document/d/1llcoPTw818iyCL9yEIihOaZHE_zTbfcb\nPlease check the link continuously because there may be minor changes in the future.\nPLEASE CHECK THE LINK CONTINUALLY FOR THE LATEST VERSION\n● Read technical literature in Natural Language Processing (including original research articles) and answer questions about such readings.\n● Implement language processing algorithms and test them on natural language data.\n● Solve language processing problems and explain the reasoning behind their solution\nRequired Preparation:\nExperience with programming in Python",
            "Table Description": "# | Date | Lecture | Reading\n\n\n\n\n1 | 01/09/2024 | Introduction | Jurafsky and Martin, Speech and Language Processing (3rd edition draft),\nChapter 2: Regular Expressions, Text Normalization, and Edit Distance.\n2 | 01/11/2024 | Naive Bayes, Linear Classifier,\nLogistic Regression, etc. | Jurafsky and Martin, Speech and Language Processing (3rd edition draft),\nChapter 4: Naive Bayes Classification and Sentiment Analysis\nJurafsky and Martin, Speech and Language Processing (3rd edition draft),\nChapter 5: Logistic Regression.\nHal Daumé III, A Course in Machine Learning (v. 0.99 draft), Chapter 4: The\nPerceptron.\nTutorial on Support Vector Machine (SVM) by Vikramaditya Jakkula\n3 | 01/16/2024 | Word Embedding | Mikolov, Tomas, et al. \"Efficient estimation of word representations in vector\nspace.\" arXiv preprint arXiv:1301.3781 (2013).\nMikolov, Yih and Zweig (2013): Linguistic Regularities in Continuous Space\nWord Representations\nJurafsky and Martin, Speech and Language Processing (3rd edition draft),\nChapter 7\nHW1 Release\nQuiz1\n4 | 01/18/2024 | Deep Learning for NLP, MLP &\nCNNs | \n5 | 01/23/2024 | Sequence Labeling & HMMs | Jurafsky and Martin, Speech and Language Processing (3rd edition draft),\nChapter 8: Part-of-Speech Tagging\nJurafsky and Martin, Speech and Language Processing (3rd edition draft),\nAppendix A: Hidden Markov Models\nMichael Collins: Tagging Problems, and Hidden Markov Models\nQuiz2\n6 | 01/25/2024 | MEMMs & CRFs | Notes from Michael Collins\n7 | 01/30/2024 | RNN & Sequence Modeling | Jurafsky and Martin, Speech and Language Processing (3rd edition draft),\nChapter 7\n\n\n\n\n |  |  | HW1 Deadline\nHW2 Release\nQuiz3\nGroup Formation Deadline\n8 | 02/01/2024 | Dependency Parsing | Jurafsky and Martin, 14.1-14.4\nDeep BiAffine Parser\nNeuroMST Parser\nStack-LSTM Parser\nStack-Pointer Parser\n9 | 02/06/2024 | Sequence-to-sequence Learning &\nMachine Translation | Jurafsky and Martin, Speech and Language Processing (3rd edition draft),\nChapter 10: Machine Translation and Encoder-Decoder Models.\nQuiz4\n10 | 02/08/2024 | PyTorch & Basic Concepts in DL | Paper Selection Deadline\n11 | 02/13/2024 | Transformers | Attention is All You Need\nQuiz5\nHW2 Deadline\nHW3 Release\n12 | 02/15/2024 | Advanced Topics in Machine\nTranslation | \n13 | 02/20/2024 | Advanced Transformers | Longformer, BART, Vision Transformer, ViLT\nQuiz6\n14 | 02/22/2024 | Paper Presentation | \n15 | 02/27/2024 | Paper Presentation | \n16 | 02/29/2024 | Paper Presentation | HW3 Deadline\nHW4 Release\n\n\n\n\n17 | 03/05/2024 | Paper Presentation | \n18 | 03/07/2024 | Midterm Exam | \n19 | 03/19/2024 | Neural Language Models &\nContextualized Embeddings-I | BERT, GPT2\nQuiz7\n20 | 03/21/2024 | Neural Language Models &\nContextualized Embeddings II | HW4 Deadline\n21 | 03/26/2024 | Deep Generative Models | Quiz8\n22 | 03/28/2024 | Guest Lecture (Swabha\nSwayamdipta) | \n23 | 04/02/2024 | Guest Lecture on LLM Safety (Jieyu\nZhao) | \n24 | 04/04/2024 | Advanced Techniques in\nLarge-Scale Pre-training | Quiz9\n25 | 04/09/2024 | Guest Lecture (TBA) | \n26 | 04/11/2024 | Project Presentation | \n27 | 04/16/2024 | Project Presentation | \n28 | 04/18/2024 | Project Presentation | \n29 | 04/23/2024 | Project Presentation | Project Final Report Deadline\n30 | 04/25/2024 | Final Exam | \n\n\n"
        }
    },
    {
        "CSCI-585": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThiscourseintroducesstudentstoparalleldatabasemanagementsystemsthatscaleinadatacenterand\nacrossdatacenters,physicalorganizationofdataforenhancedperformanceandavailability,NoSQL,cache\naugmenteddatabasesystemsandmemorymanagement,disaggregateddatabasesystems,transactional\nstoragemanagers,anddataanalytics. ThediscussionsectionsintroducebasicsoftransactionswithACID\nproperties, afilesystem,SDMandrelationaldatamodels,SQL,persistentindexstructuressuchashashing\nandB+-tree,relationalalgebra,SQL,normalforms,fundamentalsofamagneticdiskdriveandsolidstate\ndrivesincludingtheirworkingdetails,algorithmssuchasLRU,concurrencycontrolprotocolssuchaslocking\nandtime-stamp,andcrashrecoveryprotocolssuchaslogging. WereviewanactormodelnamedFLOWfor\nexpediteddevelopmentofmulti-nodedatabasesystemsandstudyhowitisusedinFoundationDB.\nGuestlecturersincludeleadingdatabaseresearchersandpractitioners. ConfirmedpresentersincludeDr.\nHaoyuHuang(GoogleAlloyDBon9/20),Dr.HieuNguyen(eBayNuGraphon9/27),Dr.DougTerry(Amazon\nDynamoDBon10/4),andDr.MichaelCarey(CouchbaseCapellaColumnaron11/15).",
            "Learning Objective": "Bytheendofthesemester,studentsshouldhaveagraspoffundamentalconcepts,designdecisions,\nprotocolsandalgorithmstobuildadatabasesystemusingoff-the-shelfsoftwareandhardwarecomponents.\nTheyshouldunderstandanalyticsandACIDsemanticsandtheirapplicationtobothstoragemanagers,\ndatabasesystems,andapplications. Finally,theyshouldbeabletoprovideanabstractionoftoday’s\nhardwareinsupportofdatabasesystems.\nPrerequisite(s):PrinciplesofSoftwareDevelopment(CSCI201).\nRecommendedPreparation:Agoodunderstandingofin-memorydatastructuressuchasrecords\nandtheirorganizationsinarrays,trees,hashtables,etc. Knowledgeofrelationaldatabases,SQL,\nrelationalalgebraandphysicaldatabasedesignisrequired. Wewillcovertherelationaldata\nmodel+algebra,SQL,physicaldatabasedesigninthediscussionsections.\nCourseNotes:\n● AlllecturematerialwillbepostedontheUSCBrightspace.\n● Gradingbreakdown\no Exam1,Oct18,2024:40% (DEN50%)\no Exam2,Dec6,2024: 40% (DEN50%)\no ClassParticipation: 20% (DEN 0%)\n● DENstudentsareexemptfromin-classparticipation. EachExamcountstoward50%oftheirgrade.\n● Thiscoursehasnocomprehensivefinalexam. Exam2isheldduringthelastlectureandcoversmaterial\npresentedsinceExam1.\n8/2024\nCommunication\nThiscourseusestheUSCBrightspacesystemtodisseminatelecturesandassignedreadings,andmake\nannouncements.\nTechnologicalProficiencyandHardware/SoftwareRequired\nRequiredReadingsandSupplementaryMaterials\nThiscourseassumesstudentsareInternetsavvyandcapableofusingitasadigitallibrary. Thisincludesuse\nofACM/IEEE/Springerdigitallibraries. AllUSCstudentshaveaccesstothesedigitalcollections\nautomatically.\nGradingBreakdown\nBasedonpriorexperienceteachingthiscourse,studentswhoattendlecturesdoverywell. Inspecific,\nstudentswhoskiplecturesdopoorlyonExam1andspendthesecondhalfofthesemesterconcernedwith\ntheirgrade. Topreventthis,classroomparticipationisarequirementforthiscourse. Itisworth20%ofthe\nfinalgradeforoncampusstudents. DENstudentsareexemptfromin-classparticipation. EachExamcounts\ntoward50%oftheirgrade.\nAssessmentTool(assignments) Points %ofGrade\nExam1,Oct18,2024 100 40%\nExam2,Dec6,2024 100 40%\nParticipation 100 20%\nTOTAL 100%\nClassParticipation: HowitWorks?\nAtthestartofeachlecture,youareprovidedwith1to3questions. Writeyouransweronapieceofpaper\nandgiveittotheTAattheendofthelecture. DENstudentsareexemptwitheachExamcountingas50%of\ntheirgrades.\nGradingScale\nThefinallettergradeisbasedonacurve.\nCourse-specificPolicies(AssignmentSubmission,GradingTimeline,Latework,and\nTechnology)\nAlldeadlinesarefirm. Nolatesubmissionsore-mailsubmissionsareacceptedforclassparticipation.\nAttendance\nBasedonpriorexperience,studentswhodonotattendlecturesperformpoorlyonexams. CSCI585\naccommodatesstudentathleteswithapprovedTravelRequestLettersandstudentswhogiveadvancenotice\nofreligiousobservation.\nAssignedReading\nWeek1: Introductions,SemanticDataModel&RelationalDataModel\nPage2",
            "Table Description": "| Topics/Daily\nActivities | Readings/Preparation | KeyConcepts\nWeek1\n8/30 | Introduction,SDM,\nRelational | SDM,Conceptualmodel.\nDiscussionledbyNimaYazdani. | Conceptualdatamodels\nWeek2\n9/6 | ParallelDBMSs | Gamma.Actor/Flowdiscussion\nledbyYimingGao. | Parallelqueryprocessing,crash\nrecovery,shared-nothing\narchitecture\nWeek3\n9/13 | DataDeclustering | HybridRangePartitioning\nStrategy | Sharding,LoadBalancing\n\n\n\n\nWeek4\n9/20 | Disaggregated\nDBMSs | Nova-LSM,Google'sAlloydB.\nGuestlecturebyDr.Haoyu\nHuang,Google. | Separationofstoragefrom\nprocessing,shareddisk\narchitecture.\nWeek5\n9/27 | XactStorage\nManagers | FoundationDB,GuestLecture\nbyDr.HieuNguyen,eBay. | OCC,MVCC,FatClients,DBMS\nasacollectionofmicroservices\nWeek6\n10/4 | NoSQL+Xactsat\nScale | NoSQLDBMSs.Guestlectureby\nDr.DougTerry,Amazon. | NoSQL\nWeek7\n10/11 | FallRecess | FallRecess | FallRecess\nWeek8\n10/18 | ReviewforExam1\n(1hour)+1hour\nExam1isonthe\nsameday | Exam1 | ReviewforExam1+Exam1.\nWeek9\n10/25 | Benchmarks | BGSocialNetworking\nBenchmark | Performancemetrics,Closed\nandOpenSimulationModels\nWeek10\n11/1 | MemoryMgmt | CAMPandLRU | Lowcomplexitymemorymgmt\nalgorithmsthatconsidersize\nandcost.\nWeek11\n11/8 | CacheAugmented\nDatabaseMgmt\nSystems | IQFramework | Impactofcacheson\ntransactions\nWeek12\n11/15 | DataAnalytics | Columnarstores.GuestLecture\nbyDr.MichaelCarey,\nCouchbase. | In-the-cloudJSONdata\nanalytics.\nWeek13\n11/22 | MapReduce | Programmingparadigmfor\nparallelism. | Divide-and-Conquer,Resilient\ntofailures.\nWeek14\n11/29 | ThanksgivingBreak | ThanksgivingBreak | ThanksgivingBreak\nWeek15\n12/6 | ReviewforExam2\n&Exam2 |  | Exam2\n12/6\n\n\n"
        }
    },
    {
        "CSCI-426": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nGame Prototyping is about designing, programming, and testing game ideas fast, and\nwithaslittleeffortaspossible,whilegainingknowledgeaboutwhatdoesanddoesnotwork.\nThiscourseisaboutexperimentalgamedesign. Thisexperimentalmindsetpertainstoeveryaspect\nof the game, and these can be broadly characterized as the game system, control, visuals, audio,\nandresultingtheme. Wewillexploretheseaspectsthroughthecreationofnumerousveryfocused\n(video)game prototypes using Unity as our game engine/tool of choice. This will allow us to\nobtainabetterunderstandingofwhatmakesgamesappealing,andhowgamemechanics,systems,\naudiovisuals,andavarietyofplayerexperiencescanbedesignedanditerativelyimprovedbymeans\nofrapidprototypingandplaytesting. Thecourseisacombinationofthetechnology,design,and\nphilosophyunderlyingcontemporarygamecreation,aswellasthereal-worldimplementationand\ndesignchallengesfacedbypracticinggamedesigners.\nTarget Audience: The course is intended for students who want to learn design practices and\nprinciples by which games can be conceived, prototyped, and developed within a one-semester\ncourse. Studentswillcreateweeklyprototypesinteamsoftwo,aswellascompleteonefinalteam\nproject. Thecourseisalotof(team)work,butit’salsoalotoffun.\nPrerequisites: Therearenoformalprerequisites,butbasicprogrammingskillsarerequired. Artistic\nskills,orawillingnesstolearnthemareaplus,asisfamiliaritywiththeUnitygameengine.\nReadings: We will discuss articles on experimental game design, game feel, game theory, and\nsystems theory, as well as analyze a variety of successful videogames such as Getting Over It,\nDesertGolfing,Spelltower,SuperHexagon,Spelunky,Osmos,Canabalt,FlappyBird,Tetris,and\nmanymore. Aplayingandreadinglistwillbeprovidedandexpandedthroughoutthesemester,and\nwewilldiscusssomeofthereadingsandmanyofthegamesinclass.\nLectures: Topics include: an introductiontoexperimentalgamedesign,abstraction, prototyping,\nsystemsandfeedbackloops,inputandcontrol,space-timediscretization,minimalgraphicdesign,\ngame feel, design patterns, human perception, game programming, etc. Each class meeting will\nconsist of an approximately 60 minute lecture, followed by student presentations, critique, and\ndiscussion. Eachclasswillendonthedesignpromptforthefollowingweek.\nProjects: Students will design and implement 8 videogame prototypes in the first 10 weeks in\nweeklyrotatingteamsoftwo(prototypephase). Wewillannouncetheteamsanddesignpromptfor\nthefollowingweekattheendofeachclass. Thereafterwewillformteamsofapprox. 4students\naroundthebestprototypes,followedbyafinalpolishcycleof4weeks,inwhichtheseteamswill\niterateononeoftheprototypesinordertopolishandbalancethegame(productionphase).\nExpectedWork: Studentswilldesign,implement,play-test,andpresent8prototypesinteamsof\ntwo,andonefinalgameprojectasateamof4-6. WehavechosentouseUnityfortheprototypes,\n1\nand we will provide demos and demo code for the weekly design prompts as needed. Each of\nthe prototypes as well as the final project will be presented by the students or team in class. It\nisexpected thateachclassparticipanthave10hours perweek(outsideofclass)to workontheir\ngames.\nExams: Therewillbeafinalpresentationbyeachteam(includingeachteammember)onthedesign\nanddevelopmentofthefinalproject. Asideofthefinalgame,eachteamisexpectedtohandina\n2-pagepost-mortemdocumentintheweekafterfinalpresentation(finalsweek).\nGrades: Eachstudentwillpresentandsubmit8prototypes,outofwhichwewillgradethebest6,\nparticipateinafinalproject, andcommentongamesdesignedbytheirpeers. Theweightingisas\nfollows: Prototypes: 70%, Final Project/Polish: 20%, Class Participation: 10%. I reserve the\nright to adjust the grading scale. To receive a good grade, you will need to perform well in the\nprototypes,finalproject,andinclassparticipation. Pleasecheckthecorrectnessofthegradingand\nthepostedscoresimmediatelyafterweannouncetheavailabilityofthescores. Youwillneedtolet\nmeknowaboutanygradingissuewithin7daysofmepostingthescore.\nIMGDAttendancePolicy: Punctualattendanceatallclassesismandatory. Studentsarriving\nmorethanfiveminuteslatetothreeclasses,morethantenminuteslatetoasingleclass,orleaving\nearly,willbemarkedashavinganabsencefromclass,unlesspriorpermissionhasbeenobtained\nfrom the instructor. Three or more absences lower your grade one full grade point (for example,\nfromAtoB).Ifyouhavefiveormoreabsences,Iwillrequestthatyouwithdrawfromthecourse.\nAcademicIntegrity: USCseekstomaintainanoptimallearningenvironment. Generalprinciples\nof academic honesty include the concept of respect for the intellectual property of others, the\nexpectationthatindividualworkwillbesubmittedunlessotherwiseallowedbyaninstructor,and\ntheobligationsbothtoprotectone’sownacademicworkfrommisusebyothersaswellastoavoid\nusing another’s work as one’s own. All students are expected to understand and abide by these\nprinciples. We will strictly enforce the student conduct code and refer students to the Office of\nAcademicIntegrityfor furtherreview, shouldtherebe anysuspicion ofacademicdishonesty, and\nsuggestthattheyfollowtherecommendedsanctionsincasetheyshouldfindthattherewasacademic\ndishonesty. WetypicallysuggestanFasoverallclassgradeaspenalty,ifasked. Alldetailscanbe\nfoundhere: https://academicintegrity.usc.edu/.\nProblemsandConcerns: Atsomepoint, youwillhavequestions. Forexample,youmightnot be\nabletogetcodetorun,theremightbesomethinginthelecturesthatyoudonotunderstand,andso\non. In thiscase, we encourageyou topost thequestion onthe discordworkspace and seewhether\nsomeonecanhelpyou. Ifthisapproachdoesnotgeneratethedesiredresult,thentheSAandIwill\nbe happy to help you in person during office hours. I do answer email but, unfortunately, often I\nwill not manage to answer it on the same day. It is very important that you voice your concerns\nabout any aspect of the class as soon as they arise. Please send an e-mail to the SA and myself,\nand/orcometalktomeinperson(oronZoom).\nTentative Schedule: Weekly lectures and design prompts for the prototypes will be adjusted ac-\ncordingto thecurrent designtopicmost relevanttothe studentprojects. Topicsinclude prototyping,\nvisualabstraction,gamefeel,systemsdesign,feedbackloops,strategyanddexterity,uncertainty\nandluck, physics-basedcontrol andanimation, gamecomplexity, design patterns, accessibility and\nhuman perception, semiology of graphics, game difficulty and balance, sources of creativity, AI\nmethods and procedural content generation (PCG), characteristics of games, and interaction design\n2",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "DSCI-454": {
            "Course Description": "Catalogue Course Description:\nOne of the cornerstones of analytics is presenting the data to customers in a usable\nfashion. When considering the design of systems that will perform data analytic\nfunctions, both the interface for the user and the graphical depictions of data are of\nutmost importance, as it allows for more efficient and effective processing, leading to\nfaster and more accurate results. To foster the best tools possible, it is important for\ndesigners to understand the principles of user interfaces and data visualization as the tools\nthey build are used by many people - with technical and non-technical background - to\nperform their work. In this course, students will apply the fundamentals and techniques in\na semester-long group project where they design, build and test a responsive application\nthat runs on mobile devices and desktops and that includes graphical depictions of data\nfor communication, analysis, and decision support.\nShort description: Foundational course focusing on the design, creation,\nunderstanding, application, and evaluation of data visualization and user interface\ndesign for communicating, interacting and exploring data.\nPrerequisites:\nINF 250 Introduction to Data Informatics\nCourse Objective\nStudents will learn:\n• The theory and practice of creating effective user interfaces for modern\ndevices ranging from mobile phones to large screen displays.\n• To design guidelines for effective human computer interaction and the\ncognitive science theory that support the guidelines.\n• Usability testing techniques to inform the design process and implementation\ntechniques for building responsive user interfaces that adapt to different devices.\n• Learn the theory and practice of creating good visualizations.\n• In the theory part students will learn how our brains process visual data, and how the\nway our brains work affects how we perceive visualizations and how we should design\nvisualizations to make them easy to understand.\n• Students will get an understanding of which colors and shapes stand out clearly, how to\norganize visualizations and when images convey ideas more clearly than words.\n• Learn guidelines and methods to design effective visualizations and how to implement\ninteractive visualizations for the Web.\n• To work in groups.\nClass Communication\nBlackboard at USC will be used for class communication.\nBooks and Readings\nAll books, papers or reports will be available to students online, at the USC\nbookstore and/or via the USC libraries at http://www.usc.edu/libraries/.\nRequired Readings:\nAbout Face 3: The Essentials of Interaction Design, by Alan Cooper, Robert Reimann\nand David Cronin. ISBN: 978-0470084113.\nRocket Surgery Made Easy: The Do-It-Yourself Guide to Finding and Fixing Usability\nProblems, by Steve Krug. ISBN: 978-0321657299.\nThe Functional Art: An Introduction to Information Graphics and Visualization, by\nAlberto Cairo. ISBN: 978-0321834737.\nOptional Readings:\n\nExpanded Course Description:",
            "Learning Objective": "Students will learn:\n• The theory and practice of creating effective user interfaces for modern\ndevices ranging from mobile phones to large screen displays.\n• To design guidelines for effective human computer interaction and the\ncognitive science theory that support the guidelines.\n• Usability testing techniques to inform the design process and implementation\ntechniques for building responsive user interfaces that adapt to different devices.\n• Learn the theory and practice of creating good visualizations.\n• In the theory part students will learn how our brains process visual data, and how the\nway our brains work affects how we perceive visualizations and how we should design\nvisualizations to make them easy to understand.\n• Students will get an understanding of which colors and shapes stand out clearly, how to\norganize visualizations and when images convey ideas more clearly than words.\n• Learn guidelines and methods to design effective visualizations and how to implement\ninteractive visualizations for the Web.\n• To work in groups.\nClass Communication\nBlackboard at USC will be used for class communication.\nBooks and Readings\nAll books, papers or reports will be available to students online, at the USC\nbookstore and/or via the USC libraries at http://www.usc.edu/libraries/.\nRequired Readings:\nAbout Face 3: The Essentials of Interaction Design, by Alan Cooper, Robert Reimann\nand David Cronin. ISBN: 978-0470084113.\nRocket Surgery Made Easy: The Do-It-Yourself Guide to Finding and Fixing Usability\nProblems, by Steve Krug. ISBN: 978-0321657299.\nThe Functional Art: An Introduction to Information Graphics and Visualization, by\nAlberto Cairo. ISBN: 978-0321834737.\nOptional Readings:",
            "Table Description": "Wee\nk | Lecture | Readings | Homework | Exam\n1 | Introduction to UI design and\nvisualization; why it is\nimportant, what are it’s uses,\nexamples, course overview,\noverview of\nhomework/projects. | Cooper chapter 1 and 2\nCairo chapter 1 and 2 | Assignment 1:\nFollow Cairo Part I,\nCh.1 example on UN\nData: find fertility\nrates with different\ntrends for 3 countries,\nuse Google Sheets to\ncreate 2 different\ncharts to show\ndifferent aspects of\nthis data. | \n\n\n\n\n | Understanding goal-oriented\ndesign; focusing on users not\nthe software; user goals and\nmental models;\nimplementation models;\ndesign process. User\ncategories and their needs,\nbeginners, intermediates,\nexperts; understanding\nusers, qualitative research;\nstakeholder, subject matter\nexpert, customer and user\ninterviews; conducting\ninterviews, what to ask.\nPersonas, definition, steps to\nconstruct them; user goals,\nexperience, end and life\ngoals. Survey of visualization\ntechniques. | Cooper chapters 3, 4 and 5\nCairo chapters 3 | Assignment 2:\nConduct interviews\nfor an example\napplication (e.g.,\npurchasing music),\ndefine personas and\ngoals.\nAssignment 3:\nPrototype and create\nbubble cloud and\nslope graphs\nvisualizations of UN\nfertility rates for 3\nyears and 9 countries\nof your choice. | Quiz 1\n2 |  |  |  | \n |  |  |  | \n3 | Foundations of design,\nscenarios and personas; steps\nto define requirements using\npersonas; from requirements to\ndesign, defining sketches;\nvalidating designs with\nscenarios.\nIntroduction to responsive\ndesign.\nDesign space of visualizations;\nthe visualization wheel; design\ntrade-offs. | Cooper chapters 6 and 7\nCairo chapters 4 | Assignment 4:\nCritiquing\nvisualizations in news\nmedia. Find 5\ndifferent infographics\non the same subject\nand compare them\nusing the\nvisualization wheel.\nWhat do they do well,\nwhat do they do\npoorly? | Quiz 2\n\n\n\n\n4 | Principles of interaction\ndesign, design values;\ninteraction design patterns;\nplatforms and postures;\ndesigning for the desktop;\ndesigning for the Web,\ninformational vs\ntransactional Web sites, Web\napplications. Orchestration\nand flow, transparent\ninteraction, modeless\ninteraction; examples of\ngood and bad designs;\nidentifying GUI features that\nslow down use (excise), in\nnavigation, error messages\nand alerts.\nBalancing function and\nesthetics; minimalism;\nmaking visualizations\nmemorable. | Cooper chapters 10 and\n11.\nCairo chapter 5 | Assignment 5:\nidentify 3 examples of\nexcise in applications\nyou use and propose\nbetter alternatives.\nAssignment 6:\nDesign two\ninfographics to show\ndata of your choice.\nUse different trade-\noffs in the\nvisualization wheel.\nOne must be a\nminimalist\nvisualization. | Quiz 3\n5 | Designing good behavior;\naddressing excise: putting\nidle cycles to work,\nremembering user actions;\nmetaphors, idioms and\naffordances; problems with\nmetaphors. Visual interface\ndesign; relationships,\nhierarchy, alignment, grid,\nconsistency, visual noise and\nclutter, simplicity, text, color,\nstandards.\nThe eye and the visual brain;\nvisual queries; implications\nfor design. | Cooper chapter 14\nCairo chapter 6 and 9 | Assignment 7:\nidentify 3 examples of\nexcise and 3 examples\nof inappropriate\nvisual design in\napplications you use\nand propose\nsolutions.\nAssignment 8: Create\na list of queries\npertinent to a public\ntransportation\nsystem. Answer these\nqueries using a map\nfor a region of the\nworld you are not\nfamiliar with. Does\nthe map you chose\nsupport answering\nthe questions well?\nExplain your answers. | Quiz 4\n\n\n\n\n6 | Undo, single and multiple;\nsaving the user’s work; data\nentry, data errors, missing\ndata, system responses.\nDirect manipulation;\npointing and clicking;\naffordances; selection,\ncommand ordering and\nselection, multiple selection;\ndrag and drop, insertion\ntargets; modal tools; cursors,\nobject manipulation\nPreattentive features and\ntheir use in visualizations;\nUses of transitions and\nanimations in visualizations.\nInteractive graphics. | Cooper chapters 19,\n(optional Cooper chapter\n20)\nhttp://tableau.com\nhttps://www.r-project.org\nhttp://d3js.org\nhttp://raphaeljs.com\nhttp://processingjs.org | Assignment 9:\nidentify 3 examples of\ninappropriate direct\nmanipulation\nbehavior in\napplications and\npropose solutions;\nidentify 3 examples in\napplications where\ndirect manipulation\nshould have been\nused but wasn’t and\npropose solutions.\nAssignment 10:\nAnalyze three\nvisualizations using\nthe criteria discussed\nin Cairo chapter 6.\nSelect the worst of\nthese visualizations\nand suggest 2\nredesigns to improve\nthem. | Quiz 5\n7 | Controls, widgets and\ndialogue boxes; buttons,\nselection, checkboxes, radio\nbuttons, list controls, combo\nboxes; data entry controls,\ndials, sliders, text boxes,\nvalidation; scrolling; menus,\ntooltips. dialogs, Modal and\nmodeless; uses of dialog\nboxes; complex dialogs;\nerrors, alerts and\nconfirmations; preventing\nerrors; feedback.\nReview of popular\nvisualization tools (Tableau,\nR, Google charts, Raphaël,\nProcessingjs, D3.js). | Cooper chapters 24 and\n25\nCairo chapter 8 | Assignment 11:\nresearch and identify\n5 examples of\ninappropriate dialogs\nand alerts in\napplications and\npropose solutions. | Quiz 6\n\n\n\n\n8 | Perception, vision, Gestalt\nprinciple; visual structure.\nReading; design to support\nreading; color vision; ability to\ndistinguish colors, guidelines\nfor using color; peripheral\nvision; making messages\nvisible;\nImplications of color vision\nfor visualizing data;\ntrichromatic and opponent\nopponent process theory;\ncolor coding information.\nEmphasis and highlighting;\ncolor sequences, semantics of\ncolor. | Cairo Profiles 1-3 | Assignment 12: Find\n3 different types of\nvisualizations on the\nWeb where colors\nhave been used\ninappropriately.\nExplain why and\nredesign them\naccording to the color\nprinciples covered in\nthe course. | \n9 | Memory, short-term and\nlong-term; implications for\ninterface design; attention,\nexternal aids; goal directed\nbehavior; recognition vs\nrecall, implications for\ninterface design.\nHow the brain recognizes\ncomplex objects; sets of\nprimitives; scene\ncharacterization; visual and\nverbal thinking; visual and\nverbal working memory;\nimplications for design; | Cairo Profiles 4-7 | Assignment 13: Get a\nbus route with stops,\nschedule and assume\ncurrent location of\nbuses. Design a\nvisualization that\nshows busses on,\nbehind and ahead of\nschedule. | Quiz 7\n | Learning from experience;\nactions vs problem solving;\nimplications for interface\ndesign; facilitating interface\nlearning, consistency;\navoiding user fear;\nInterface responsiveness;\nlimitations of the human\nbrain; implications for\ninterface design.\nDepth perception and cue\ntheory: different ways to\nperceive depth. 2.5D design;\nlinking perception and\naction. | Cairo Profiles 8-10\nKrug chapters 1, 2, 3 and 4 | Work on Project | Quiz 8\n10 |  |  |  | \n |  |  |  | \n\n\n\n\n | Do-it-yourself testing;\nobserving users; organizing\nyour tests; what to test.\nrecruiting users, how many;\nwhat to test; organizing your\ntests, checklists; test setup;\nconducting the tests.\nIntroduction to maps and\nprojections; using geospatial\ndata. Showing data in maps;\nadding points and other\ngraphics to maps; | Krug chapters 5, 6, 7 and 8 | Work on Project | Quiz 9\n11 |  |  |  | \n |  |  |  | \n | Observing tests; what to\nrecord; debriefing users,\nwhat to ask; what to take\naway from tests; making\ndecisions.\nFinding the main problems;\nmaking sure usability is\nimproving; remote testing. | Krug chapters 9, 10 and\n11. | Work on Project | Quiz\n10\n12 |  |  |  | \n |  |  |  | \n | Course review. | Krug chapters 12, 13 and\n14. | Work on Project | \n13 |  |  |  | \n |  |  |  | \n14 | Project Presentations. |  | Project\nPresentations | \n15 | Study Week |  |  | \n16 | Final Examination |  | Per University\nschedule | Final\nExam\n\n\n"
        }
    },
    {
        "CSCI-625": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nHow does a programmer convince their colleagues that a piece of code does what was intended? How\ndo they find bugs in the software they ship? And can the tools used for these activities also help in\ndeveloping code that is correct, by construction?\nThis course will equip the student to answer these questions, and serve as an introduction to the\nprinciples and practices of software verification and program synthesis. We will study fundamental ideas\nsuch as symbolic execution, invariants, and abstract interpretation. We will also study how constraint\nsolvers work, how they can be used to reason about code, and how they can be used as the building\nblocks of sophisticated program synthesis systems.\nThe course will cover both the theory underlying the design of these tools and their use in practice.\nFurthermore, by studying their application in areas such as networking and security, we will emphasize\ntheir relevance to the working computer scientist.",
            "Learning Objective": "After this course, the successful student will be able to:\n1. Prove properties of simple programs by devising appropriate invariants and ranking functions\n2. Use constraint solvers to solve various problems\n3. Explain the operation of modern constraint solvers, including unit propagation, back-tracking,\nclause learning, and theory combination\n4. Explain the ideas behind abstract interpretation, including specific instantiations such as\npredicate abstraction and dataflow analyses\n5. Implement simple static analyses for a tiny imperative programming language\n6. Use and explain the operation of CEGIS-based program synthesizers\nPrerequisites\n1. The course will expect a certain amount of mathematical maturity from its students, at least at\nthe level of CSCI 170, and preferably at the level of CSCI 270.\n2. We will be reasoning about code: we expect that the student will already be proficient in writing\nit. CSCI 301, CSCI 350, and similar courses are appropriate baselines\nRequired Readings\nWe will assign readings from the following sources:\n1. Michael Gordon. Background Reading on Hoare Logic. 2016.\nAccessible from https://www.cl.cam.ac.uk/archive/mjcg/HL/Notes/Notes.pdf.\n2. Daniel Kroening and Ofer Strichman. Decision Procedures: An Algorithmic Point of View. 2nd\nedition. Springer, 2016.\nThe book may be accessed freely from within USC at http://link.springer.com/978-3-662-50497-\n0. Supplementary material is available at http://www.decision-procedures.org/.\nCSCI 625: Program Synthesis and Computer-Aided Verification 2",
            "Table Description": ""
        }
    },
    {
        "CSCI-580": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course has a straightforward, but highly instructive goal: to teach you, from \u0000rst principles, using 'just' math (linear algebra,\nto be speci\u0000c), how to '\u0000ll' 3D triangles that have been projected on to an image, with RGB pixel values. In terms of the following\ndiagram (from davrous.com), you'll learn how to go from left to right, ie. start with 3D geometry (and lights, materials and\ncamera), and end up with 2D pixels that are rendered (ie. 'lit/shaded and textured'):\nIn addition to covering the core topics (where we build up a simple 'renderer'), we will also look at geometry types, alternative\nrendering algorithms, the history of 3D graphics, its endless variety of applications, and consider where the \u0000eld might be\nheaded.\nAlso, I intend providing you with a lot of 'extra' material that will link the course content to the real-world applications of CG in\nvisual effects, animation, games, and more (eg. VR, AR).\nPre-requisites\nYou need to be pro\u0000cient in a language such as C/C++, Python, JavaScript, Java, C#, or, Processing/p5. All the homeworks are\ncoding-related (and they build on each other). The project will also be coding related.\nTopics\nHere are topics we'll cover:\nIntroduction to 3D graphics\nRasterization\nHidden surface elimination (HSE)\nTransformations\nShading\nTexture mapping\nProcedural texturing\nSampling, reconstruction\nShadows\nRaytracing\nRadiosity\nNPR (Non Photoreal Rendering)\nCommercial and other renderers\n(Animation) Production\nCurves\nSurfaces\nthe OpenGL API\nGPUs (hardware acceleration)\nBrowser-based and cloud-based CG\nI'm thinking of adding these topics to the mix - possibly to bring up during discussions, at the least:\nmore types of surface rendering algorithms\nvolume rendering",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "CSCI-350": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n, mechanisms,\nand their implementations.\nInstructor Email Office Hours Lecture\nTatyana Ryutov tryutov@usc.edu TBD via Zoom Friday, 1pm-4:20pm,\nvia Zoom\nRequired Textbooks\nT1: “Operating Systems: Principles and Practice” by Thomas Anderson and Mike Dahlin, 2nd edition\nT2: “Operating System Concepts” by Abraham Silberschatz, Peter Galvin, and Greg Gagne, 9th edition\nT3: “Distributed Systems” by M. van Steen and A.S. Tanenbaum, 3rd edition.\nCourse Website: https://piazza.com/usc/spring2021/csci350\nBlackboard will be used for exam submission and posting of grades.\nPiazza will be used for lectures, announcements, assignments, and intra-class communication.\nMessages that do not need a particular instructor’s attention should be posted to Piazza with the appropriate\nprivacy setting.\nGrading\nArtifact Weight Date\nExam 1 20% February 19\nExam 2 20% April 9\nFinal Exam 20% May 5\nProgramming Projects 35% Various\nClass participation 5% Continuous\nDuring each class there will be about 6 in-lecture questions that require answer via Google forms using a\nlink posted on the course Piazza page.\nEach student will receive a private code repository on the course's GitHub Organization to use for the\ndevelopment and submission of all assignments. We will only accept work submitted through this\norganization; in order to gain access, you must first complete our online quiz about the project rules. This\nquiz will be posted and pinned on Piazza.\nAcademic Honesty and Programming Projects\nPlease see the programming project regulations posted on Piazza in Resources for a description of what\ncollaboration is and is not acceptable in programming assignments, as well as how to credit acceptable\nassistance on these assignments.\nExams\nBoth non-final exams will be held at the start of lecture on the designated days. Exams will be individual\neffort, closed-book and closed-notes. You will be allowed one 8.5x11inch handwritten note sheet (front\n& back) on the exams.\nStudents requiring alternate exam arrangements must make such requests within the first two weeks of the\nterm, or as soon as possible after knowing of the conflict or requirement.\nRegrade requests\nYou have seven days since the date exam or project grades are posted to request a regrade. You\nmust submit a form (which will be provided). After one week, no regrade requests will be honored.\nLate Policy and Grace Days\nFive times during the semester, a student may extend the due date of a programming assignment by twenty-\nfour hours without needing prior permission. These are known as “grace days.” In order to use a grace\nday, you must submit a form (which will be provided) before the project's non-extended deadline.\nIf you request additional grace days from the instructor, you must have a documented reason for each grace\nday used to accompany your request. Once you have used your grace days, any late submission will not be\naccepted and graded as a 0.\nNote: There is no grace period. Even if you submit a few minutes after the deadline, you will need to use\na grace day (even if the wireless network in your dorm room is down or you have a GitHub issue, etc.). It\nis your job to be on time and not cut it too close. Remember Murphy's Law and leave time for things to “go\nwrong.” The due time of 11:59 PM is Pacific time and is based on our clock.\nProjected Schedule\nClass sequence, dates, reading assignments, and topics are subject to change as the semester proceeds.\nAny revisions will be noted and announced in class.\nLec. Day Topic Readings\n1 1/15 Introduction, Process abstraction, Context T1: Chapters 1.1; 1.2; 2.1\nswitch",
            "Learning Objective": "",
            "Table Description": "Lec. | Day | Topic | Readings | \n1 | 1/15 | Introduction, Process abstraction, Context\nswitch |  | T1: Chapters 1.1; 1.2; 2.1\n\n\n\n\n2 | 1/22 | The Kernel abstraction, System calls | T1: Chapters 2.2-2.8; 2.10\nT1: Chapters 3.1-3.3; 3.5\n3 | 1/29 | Concurrency and threads | T1: Chapters 4.1-4.8\n4 | 2/5 | Synchronization | T1: Chapters 5.1-5.5; 5.7; 5.8\n5 | 2/12 | Advanced Synchronization | T1: Chapters 6.1-6.6\n | 2/19 | Midterm1 | \n6 | 2/26 | Scheduling | T1: Chapters 7.1; 7.2\nT2: Chapters 6.1-6.3, 6.5\n7 | 3/5 | Memory Management | T1: Chapters 8.1-8.3\nT2: Chapters 9.1-9.3, 9.7, 9.9\n | 3/12 | No lecture, University Wellness day | \n8 | 3/19 | Storage Devices, File System implementation | T1: Chapter 11; 12.1; 12.2\n9 | 3/26 | COW File Systems,\nReliable Storage | T1: Chapters 13.1-13.3.4; 14\n10 | 4/2 | Protection and Security | T2: Chapters 14.4-14.6; 15.1-15.3;\n15.6-15.7\n | 4/9 | Midterm2 | \n11 | 4/16 | Trusted Systems Design,\nDistributed Systems intro | T3 1.1-1.3\n\n\n\n\n12 | 4/23 | Remote Procedure Call,\nDistributed Mutual exclusion,\nDistributed parallel computing | T3 4.2\nT3 6.3 (pp. 321-329)\n | 4/30 | No lecture, University Wellness day | \n |  | Final Exam May 5, 2:00-4:00pm | \n\n\n"
        }
    },
    {
        "DSCI-525": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nHigh consequence applications such as those for critical infrastructure require highly reliable, trusted\nsystems to assure the required availability of processing, and to assure the required confidentiality and\nintegrity of information and processing, even if some parts of the system have high exposure to a witted\nadversary employing subversion. Hardware and software design techniques for these Trusted Systems must\nevolve and advance as the sophistication of the cyber adversary also advances. This course conveys a\nmethodology for the development of trusted systems using the Reference Monitor concept as a unifying\nprinciple. Highly secure Trusted Systems are based on what is called a Security Kernel that incorporates\nthe Reference Validation Mechanism – the hardware and software that implements the Reference Monitor.\nTrusted Systems lay at the core of secure systems. A detailed understanding of the design, analysis and\nimplementation of trusted systems is essential for the development of secure information systems. This\ncourse provides an overview of computer security to include an analysis of what is computer security, why\nsystems are not secure, and the general concepts and design techniques applicable to the design of hardware\nand software. It examines in detail the principles of a security architecture, access control, policy and the\nthreat of malicious code; the considerations of trusted system implementation to include hardware security\nmechanisms, security models, security kernels, and architectural alternatives; the related assurance\nmeasures associated with trusted systems to include documentation, formal specification, verification, and\ntesting. That core needs to be sufficiently capable that it can be leveraged by approaches that extend the\ntrusted system, into applications such as databases and into networks and distributed systems.\nThis class will be primarily individual study, with weekly assigned readings, homework assignments, one\nsemester project, a midterm examination and a final examination.\nCourse Resources\nPiazza https://piazza.com/usc/spring2021/dsci525 will be used for lectures, announcements, assignments,\nand intra-class communication\n DEN D2L will be used for:\no posting of grades\no homework submission\no quiz submission",
            "Learning Objective": "Students will have ten learning objectives for the course, and additional technology application objectives.\nLearning Objectives:\n1. Understand the fundamental issues that motive computer security to include the impediments and the\nmotivating threat strategies such as subversion\n2. Understand the technical basis for the development of trust in computer systems\n3. Understand the relationship between trust and policy in trusted computer systems, and the pivotal role\nof a formal security policy model\n4. Understand in depth the techniques and approaches for designing trusted technology in computer\nsystems, including information hiding and layering\n5. Understand the relationship and dependences between the underlying hardware and the trusted\ntechnologies that can be built on that hardware\n6. Understand and be able to apply the fundamental design considerations for trusted systems\n7. Understand in detail the concepts of the reference monitor and the nature of the root of trust provided\nby cryptographic attestation.\n8. Understand the architectural issues that are essential to the implementation of trusted technology,\nincluding implications of hardware segmentation\n9. Understand the processes for specification of trusted systems and how that specification relates to the\nsufficiency of trusted technology\n10. Understand the extension of the trust model into trusted applications\nTechnology Application Objectives:\n1. Synchronization\n2. System initialization\n3. Protection rings\n4. Multiprocessing\n5. Virtualization\n6. Non-discretionary security representation generality\n7. Trusted distribution\n8. Hardware root of trust\n9. Methods of analysis and evaluation\n10. Software engineering practices of secure system development and management\n11. Hardware vulnerabilities and techniques for building secure and trusted hardware\nGrading\nQuizzes 15%\nMidterm 20%\nFinal Exam 20%\nHW Assignments 20%\nClass Participation 10%\nSemester Project 15%\nTechnological Proficiency and Hardware/Software Required\nThis course is intended for graduate students typically coming out of computer science, mathematics,\ncomputer engineering, or informatics. Students need to be familiar with operating system principles and\nable to program. Advanced knowledge of computer architecture, theory of computation, and\ncommunications networks will be valuable. Students should be thoroughly familiar with the reference",
            "Table Description": "Lecture | Topics | Readings and Homework\n1/18 | No lecture, University Wellness day | \n1\n1/25 | Course introduction,\nOverview of Trusted Operating System\nDesign and\n Security Kernel (SK) approach,\n Software engineering practices of\nsecure system development and\nmanagement | OSS Chapter 1, 2, 4\nGAS Chapters 2, 4\nEPL\n2\n2/1 | Design of SK modules: information hiding,\nlayering and minimization, Reference\nmonitor objects implemented by SK as\nsegmentation | GAS Chapter 5.2, 8\nGKS\nSFG1 Sections 1-4\nSFG2 Sections 4.1 and 4.6.13\n3\n2/8 | Security kernel layering\nDesigning a security kernel Detailed design\nprinciples for secure systems\nManagement of SK rings and labels | GKS\nLEV\nFER Sections: 4.2.1.6, 4.2.1.7.3,\n6.1, 6.1.1, 8.10, 10.5\nSFG1 Sections: 6-6.4\nQuiz 1\n2/15 | No lecture, University holiday | \n4\n2/22 | Trusted system building techniques,\nTrusted path, Trusted functions, Kernel\nimplementation strategies | GAS Chapter 10\nKSOS\nVMM\n5\n3/1 | Alternative approaches\n Capability systems\n Separation kernels | OSS Chapters 10 and 11.1\nOSS Chapter 6.2\n6\n3/8 | Confinement and covert channels, Covert\nchannel analysis | CRO\nGAS Chapter 7\nFER pages 61-63\nFER Sections: 8.6, 8.11, 10.6\nQuiz 2\n7\n3/15 | Synchronization in a trusted system,\nSecure initialization and configuration | EVC\nFER Sections:\n4.2.1.6, 4.2.1.7.3, 6.1,\n6.1.1, 8.10, 10.5\n8\n3/22 | Security analysis of trusted systems | A1M\n9\n3/29 | Low-level, memory-based attacks and\ndefenses | RET, STACK, BUF, LOW\nQuiz 3\n10 | Secure Software Development | MCGRAW (supplemental)\n\n\n\n\n4/4 |  | \n11\n4/11 | Static Analysis, Symbolic Execution,\nPenetration Testing, Fuzzing | MCGRAW (supplemental)\n12\n4/18 | Trusted computing, Trusted Platform\nModule, Trusted distribution | FER Sections: 2.4, 4.0, 4.1.9, 4.2.1.3.5,\n4.2.1.8.2.6, 4.5.1, 4.5.2, 7.8, 8.20, 8.22\nQuiz 4\n13\n4/25 | Hardware security, vulnerabilities, attacks,\nHardware Trojans Techniques for building\nsecure and trusted hardware, Course review | HW (supplemental)\nFinal\nExam | May 10, 2-4pm | \n\n\n"
        }
    },
    {
        "DSCI-531": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nOur society's rapid algorithmification is fueled by data, buttherelianceondataraisesimportantquestions.\nWhat are the latent biases hidden in the collected data? If that data was used to train machine learning\nalgorithms,howdidthesebiasesimpactpredictionsmadebyalgorithmsandsystemsthatdependonthem?\nAre the algorithmicdecisionsfair,ordotheyperpetuatestereotypesandfortifydiscrimination?Aswecome\nto relyonAItomakedecisionsinourlivesandallowforsynergisticrelationshipwithtechnology,weneedto\nbuild trust in AI by improving algorithmic fairness, accountability, transparency and explainability.\nCourse Description\nThe course will explore topics in the intersection of data, language, networks and algorithms with fairness\nand bias throughquantitativeanalysisandhands-onexploration.Thecoursewillintroducestudentstobasic\nand advanced fairness concepts, including methods and apply them to societal data to study fairness and\nbias, and to understand their effectsonlearningalgorithms.Whiletherearenoformalprerequisitesforthe\nclass, students are expected to be proficient in programming, algorithm design and datastructures,andto\nhave taken college level or above courses in linear algebra and statistics. AI and machine learning courses\nare strongly recommended.",
            "Learning Objective": "After completing the course, students will be able to do the following:\n● Demonstrate a familiarity with the principles of ethicalconsiderationsforAIsystems.Thisincludes\ndefinitions of fairness in computer science and related literature.\n● Understand and identify sources of bias in data analysis tasks, including text, image and tabular\ndata.\n● Understand the impacts of bias on machine learning tasks.\n● Choose or design bias mitigation algorithms suitable for a particular task.\n● Detect and assess biases in both datasets and trained machine learning models.\n● Presenting technical results via technical reports.\n● Generate thought provoking peer-reviews.\n● Present your findings in the form of a short presentation.\nRecommended Preparation\nKnowledge of Python3;undergraduatecourseworkinlinearalgebra,basicprobabilityandstatistics;familiarity\nwith artificial intelligence and machine learning at the level of DSCI 552.\nCourse Notes\nThe course will be run as a lecture class with student participation strongly encouraged. There are weekly\nreadings and students are encouraged to do the readings prior to the discussion in class. All of the course\nmaterials, including the readings, lecture slides, homeworks will be posted online on Blackboard. Theclass\nproject is a significant aspect of this course and at the end of the semester, students will present their\nprojects in class.\nTechnological Proficiency and Hardware/Software Required\nStudents are expected to know how to program in a language such as Java, C++, or Python 3\n(recommended). Students are alsoexpectedtohavetheirownlaptopordesktopcomputerwheretheycan\ninstall and run software to do the homework assignments.\nRequired Readings and Supplementary Materials\nThere are no required textbooks. The reading material is based on recently published technical papers\navailable via the ACM/IEEE/Springer digital libraries. All USCstudentshaveautomaticaccesstothesedigital\narchives. Lecture slides will be placed on Blackboard and will be accessible to students before each lecture.\nDescription and Assessment of Assignments\nSyllabus for DSCI-531, Page2of 13",
            "Table Description": "Topics/Daily\nActivities | Readings and Homework\nIt is expected that students read these in\nadvance of each week and come to class\nprepared to discuss them. | Deliverable\n/ Due Dates\nWeek 1\nJan 10, 12\nProf. Lerman | Course\nIntroduction &\nResearch Ethics | ● Mehrabi, N., Morstatter, F., Saxena,\nN., Lerman, K., & Galstyan, A.\n(2019). A survey onbiasandfairness\nin machine learning. arXiv preprint\narXiv:1908.09635.\n● Olteanu, Castillo & Kiciman “Social data:\nBiases, methodological pitfalls, and\nethical boundaries.”\n● Angwin et al. Machine bias. Propublica\n(2016)\nhttps://www.propublica.org/article/mac\nhine-bias-risk-assessments-in-criminal-se\nntencing | Homework 1\nAssigned\nWeek 2\nJan 19\nProf. Morstatter | Unsupervised\nmethods:\nclustering, PCA,\netc | ● Grira, Nizar, Michel Crucianu, and Nozha\nBoujemaa. \"Unsupervised and\nsemi-supervised clustering: a brief\nsurvey.\" A review of machine learning\ntechniques for processing multimedia\ncontent 1 (2004): 9-16. | Homework 1\nDue\nWeek 3\nJan 24, 26\nProf. Lerman | Supervised\nmethods:\nRegression,\nExplanation, etc. | ● Bodo Winter, Tutorial on linear models\nhttp://www.bodowinter.com/tutorial/bw\n_LME_tutorial1.pdf\n● Bodo Winter, Tutorial on mixed effects\nanalysis,\nhttp://www.bodowinter.com/tutorial/bw\n_LME_tutorial2.pdf\n● Shapley\n● Fennell,Zou&Lerman(2019)“Explaining\nand Predicting Behavioral Data with\nStructured Feature Space\nDecomposition”, inEPJ Data Science | Homework 2\nAssigned\nWeek 4\nJan 31, Feb 2\nProf. Morstatter | Definitions and\nfair machine\nlearning | ● Kleinberg, Mullainathan, and Raghavan.\n2016. Inherent trade-offs in the fair\ndetermination of risk scores (2016)\nhttps://arxiv.org/abs/1609.05807\n● Pleiss, G., Raghavan, M., Wu, F.,\nKleinberg, J., & Weinberger, K.Q.(2017).\nOn fairness and calibration. In Advances\ninNeuralInformationProcessingSystems\n(pp. 5680-5689).\nhttp://papers.nips.cc/paper/7151-on-fair\nness-and-calibration\n● Corbett-Davies, Sam, et al. \"Algorithmic\ndecision making and the cost of\nfairness.\" Proceedings of the 23rd ACM\nSIGKDD International Conference on\nKnowledge Discovery and Data Mining. | Project\nProposals\nDue\n\n\n\n\n |  | ACM, 2017.\nhttps://dl.acm.org/citation.cfm?id=3098\n095 | \nWeek 5\nFeb 7,\nProf. Morstatter\nFeb 9\nProf. Lerman | Bias in Data | ● Ruths & Pfeffer “Social Media for Large\nStudies of Behavior”\n● Barocas, S., & Selbst, A. D. (2016). Big\ndata's disparate impact. Calif. L. Rev.,\n104, 671. Part 1.\nhttp://www.cs.yale.edu/homes/jf/Baroca\nsSelbst.pdf\n● Vaupel, J. W., & Yashin, A. I. (1985).\nHeterogeneity's ruses: some surprising\neffects of selection on population\ndynamics. The American Statistician,\n39(3), 176-185.\nhttps://www.jstor.org/stable/2683925?s\neq=1#metadata_info_tab_contents\n● Lerman, K. (2018). Computational social\nscientist beware: Simpson’s paradox in\nbehavioral data. Journal of\nComputational Social Science, 1(1),\n49-58.https://arxiv.org/abs/1710.08615\n● Alipourfard, N., Fennell, P. G., & Lerman,\nK. (2018). Using Simpson’s Paradox to\nDiscover Interesting Patterns in\nBehavioral Data. In Twelfth International\nAAAI Conference on Web and Social\nMedia.\nhttps://link.springer.com/article/10.1007\n/s42001-017-0007-4 | Homework 2\ndue\nHomework 3\nassigned\nWeek 6\nFeb 14, 16\nProf. Morstatter | Basics of NLP:\nText mining and\nword embeddings | ● Bolukbasi, Chang, Zou, Saligrama & Kalai\n\"Man is to computer programmer as\nwoman is to homemaker? debiasing\nword embeddings\"\n● Zhao, Wang, Yatskar, Ordonez & Chang\n\"Men also like shopping: Reducing\ngender bias amplification using\ncorpus-level constraints\"\n● Zhao, Wang, Yatskar, Ordonez & Chan\n“Gender bias in coreference resolution:\nEvaluation and debiasing methods” | Lit review\ndue\nWeek 7\nFeb 23\nProf. Lerman\nOption: Nina guest\nlecture | Bias and Fairness\nin NLP | ● Pak, A., & Paroubek, P. (2010, May).\nTwitterasacorpusforsentimentanalysis\nand opinion mining. In LREc (Vol.10,No.\n2010, pp. 1320-1326).\nhttps://lexitron.nectec.or.th/public/LREC-\n2010_Malta/pdf/385_Paper.pdf\n● Arvind Narayanan | Homework 3\ndue\nHomework 4\nassigned\n\n\n\n\n● Kooti, F., Hodas, N. O., & Lerman, K. | \n | (2014).Networkweirdness:Exploringthe\n | origins of network paradoxes. In Eighth\n | International AAAI Conference on\n | Weblogs and Social Media.\n | https://www.aaai.org/ocs/index.php/IC\n | WSM/ICWSM14/paper/viewFile/8101/8\n | 127\n | Lee, E., Karimi, F., Wagner, C., Jo, H. H.,\n | Strohmaier, M., & Galesic, M. (2019).\n | Homophily and minority-group size\n | explain perception biases in social\n | networks. Nature human behaviour,\n | 1-10.\n | https://www.nature.com/articles/s41562\n | -019-0677-4\n | D Liben-Nowell & J Kleinberg, “The link\n | prediction problem for social networks.”\n | Journal of the American Society for\n | Information Science andTechnology,Vol.\n | 58, No. 7. (May 2007), pp. 1019-1031.\n | Stoica, AA,Riederer,CandChaintreau,A.\n | 2018. Algorithmic Glass Ceiling in Social\n | Networks: The effects of social\n\n\n\n\n |  |  | recommendations on network diversity. | \n |  |  | In Proceedings of the 2018 World Wide | \n |  |  | Web Conference (WWW '18). 923-932. | \n |  |  | DOI: | \n |  |  | https://doi.org/10.1145/3178876.31861 | \n |  |  | 40 | \nMar 14, 16 |  | SPRING BREAK |  | \nWeek 10\nMar 21, 23\nProf. Lerman | Debiasing\nMethods | ● Kamiran, Faisal, and Toon Calders. \"Data\npreprocessing techniques for\nclassification without discrimination.\"\nKnowledgeandInformationSystems33.1\n(2012): 1-33.\n● Zhang et al. \"Mitigatingunwantedbiases\nwith adversarial learning.\" Proceedings\nof the 2018AAAI/ACMConferenceonAI,\nEthics, and Society. 2018. |  | Midterm\nreport due\nWeek 11\nMar 28\nProf. Morstatter\nMar 30, TA | Fair\nRepresentations | ● Adversarial approaches\n● Fair representation of graphs\nDeepWalk, FairWalk,\n● Fair representation of NLP, etc.\nBERT, Fair Word embedding |  | \nWeek 12\nApr 4, 6\nProf. Morstatter | Privacy & Fraud | ● Ferrara, Varol, Davis, Menczer &\nFlammini \"The rise of social bots\".\n● Pfeffer, Mayer & Morstatter \"Tampering\nwith Twitter’s Sample API\".\n● Kosinski, M., Stillwell, D., and Graepel, T.\n(2013). Private traits and attributes are\npredictable from digital records of\nhuman behavior. Proceedings of the\nNational Academy of Sciences,\n110(15):5802-5805\n● Zheleva E., Getoor L. (2011) Privacy in\nSocial Networks: A Survey. In: Aggarwal\nC. (eds) Social Network Data Analytics.\nSpringer, Boston, MA\nhttps://link.springer.com/chapter/10.100\n7/978-1-4419-8462-3_10 |  | Peer reviews\ndue\nWeek 13\nApr 11, 13\nProf. Lerman | Algorithmic Bias\nand Feedback | ● Salganik, M.J.,Dodds,P.S.,&Watts,D.J.\n(2006). Experimental study of inequality\nand unpredictability in an artificial\ncultural market. science, 311(5762),\n854-856.\nhttps://science.sciencemag.org/content/\n311/5762/854\n● Ricardo Baeza-Yates “Bias on the Web”\nCommunications of the ACM, June2018,\nVol. 61 No. 6, Pages 54-61\nhttps://www.researchgate.net/profile/Ri\ncardo_Baeza-Yates/publication/3253302\n77_Bias_on_the_web/links/5b1576440f7\ne9bda0ffcc999/Bias-on-the-web.pdf |  | \n\n\n\n\n |  | ● | Lerman, K., &Hogg,T.(2014).Leveraging | \n |  |  | position bias to improve peer | \n |  |  | recommendation.PloSone,9(6),e98914. | \n |  |  | https://journals.plos.org/plosone/article | \n |  |  | ?id=10.1371/journal.pone.0098914 | \nWeek 14\nApr 18, 20\nProf. Lerman | Researcher Bias\n& Bonus Topic | ● MacCoun, R., & Perlmutter, S. (2015).\nBlind analysis: hide results to seek the\ntruth. Nature News, 526(7572), 187.\nhttps://www.nature.com/news/blind-an\nalysis-hide-results-to-seek-the-truth-1.18\n510\n● Silberzahn, R., Uhlmann, E. L., Martin,D.\nP., Anselmi, P., Aust, F., Awtrey, E. C., …\nNosek, B. A. (2017, April 24). Many\nanalysts, one dataset: Making\ntransparent how variations in analytical\nchoices affect results.\nhttps://doi.org/10.1177/2515245917747\n646\n● Arvind Narayanan’s talk “How to\nrecognize AI snake oil”\nhttps://www.cs.princeton.edu/~arvindn/\ntalks/MIT-STS-AI-snakeoil.pdf | MacCoun, R., & Perlmutter, S. (2015). | \n |  |  | Blind analysis: hide results to seek the | \n |  |  | truth. Nature News, 526(7572), 187. | \n |  |  | https://www.nature.com/news/blind-an | \n |  |  | alysis-hide-results-to-seek-the-truth-1.18 | \n |  |  | 510 | \n |  |  | Silberzahn, R., Uhlmann, E. L., Martin,D. | \n |  |  | P., Anselmi, P., Aust, F., Awtrey, E. C., … | \n |  |  | Nosek, B. A. (2017, April 24). Many | \n |  |  | analysts, one dataset: Making | \n |  |  | transparent how variations in analytical | \n |  |  | choices affect results. | \n |  |  | https://doi.org/10.1177/2515245917747 | \n |  |  | 646 | \nWeek 15\nApr 25, 27 | Project\nPresentations |  |  | Project\nPresentation\nslides due\nFINAL\nMay 4 | Project Final\nReport |  |  | Project Final\nReport due\n\n\n"
        }
    },
    {
        "CSCI-568": {
            "Course Description": "Catalogue Course Description:\nAims to equip students with techniques for successful requirements analysis and\nrequirements engineering (RE) of software-intensive systems. Students will learn a\nsystematic process of developing requirements through co-operative problem analysis,\nrepresentation, and validation. Prerequisite: CS577A or equivalent, or software\nengineering experience.\nDetailed Description\nThe course will expose students to both the current state of the art in requirements\nengineering and a systematic method for engineering high-quality requirements. The\ncourse introduces fundamental concepts and principles including the aim and scope of\nrequirements engineering, the products and processes involved, requirements qualities\nto aim at and flaws to avoid, and the critical role of requirements engineering in system\nand software engineering. The course then focuses on system modeling in the specific\ncontext of engineering requirements. It presents a multi-view modeling framework\nthat integrates complementary techniques for modeling the system-as-is and the\nsystem-to-be.\nThe course will cover one chapter from the required textbook (listed below) each week.\nThe topics covered as follows:\nChapter 1: Introduction to Requirements Engineering\n• What Are Requirements?\n• Requirements Engineering Activities\n• Bodies of Knowledge\n• Requirements Engineering Paradigms\nChapter 2: Preparing for Requirements Elicitation\n• Stakeholders\n• Stakeholder Prioritization\n• Communicating with Stakeholders\n• Stakeholder Negotiations\nChapter 3: Requirements Elicitation\n• Preparing for Elicitation\n• Elicitation Techniques\n• Eliciting Hazards\nChapter 4: Writing the Requirements Document\n• Requirements Agreement and Analysis\n• Requirements Representation Approaches\n• Requirements Documents\nChapter 5: Requirements Risk Management\n• Requirements Verification and Validation\n• Standards for V&V\n• Risk Mitigation Techniques\nChapter 6: Formal Methods\n• What Are Formal Methods?\n• Formal Methods Classification\n• Limitations of Formal Methods\nChapter 7: Agile Requirements Engineering\n• Extreme Programming and Scrum\n• User Stories\n• Challenges for RE in Agile Methods\nChapter 8: Tool Support for Requirements Engineering\n\nExpanded Course Description:",
            "Learning Objective": "",
            "Table Description": "Week | Topic | Reading | Tasks\n1 | Introduction | Ch. 1 | \n2 | UNIVERSITY HOLIDAY |  | \n3 | Requirements Elicitation | Ch. 2 | Ch. 2 homework\n4 | Requirements Elicitation | Ch. 3 | Ch. 2 quiz, Ch. 3 homework\n5 | Writing Requirements | Ch. 4 | Ch. 3 quiz, Ch. 4 homework\n6 | UNIVERSITY HOLIDAY |  | \n7 | Risk Management | Ch. 5 | Ch. 4 quiz, Ch. 5 homework\n8 | Formal Methods | Ch. 6 | Ch. 5 quiz, Ch. 6 homework\n9 | Specification and Agile\nMethods | Ch. 7 | Ch. 6 quiz, Ch. 7 homework\n10 | Tool Support | Ch. 8 | Ch. 7 quiz, Ch. 8 homework\n11 | Requirements\nManagement | Ch. 9 | Ch. 8 quiz, Ch. 9 homework\n12 | Value Engineering | Ch. 10 | Ch. 9 quiz, Ch. 10 homework\n13 | Advanced Topics |  | Ch. 10 quiz\n14 | Advanced Topics |  | \n15 | Software Patents |  | \nFINAL | N/A | N/A | Final projects due\n\n\n"
        }
    },
    {
        "CSCI-420": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course is an introduction to three-dimensional computer graphics. Students will\nlearn both theory of 3D computer graphics, and how to program it efficiently using OpenGL.\nTopics include 2D and 3D transformations, Be´zier and B-Spline curves for geometric modeling,\ninteractive3Dgraphicsprograming,computeranimation,kinematics,andrenderingincludingray\ntracing, shading, and lighting. There will be an emphasis on the mathematical and geometric as-\npectsofcomputergraphics,Thiscourseisregularlyofferedeverysemester(theinstructormayvary\nas well as the content). There will be 3 hours of lecture (by instructor), and 1 hour of discussion\n(byinstructororTA)everyweek.\nTarget Audience: This course is intended for students interested in the basics and math of com-\nputer generated imagery using OpenGL. It involves a lot of programming, and requires a certain\ndegreeofmathematicalsophistication(inlinearalgebra,specifically). Butit’salsoalotoffun. No\nartisticskillisrequired,butitdoescomeinhandy.\nPrerequisites: CSCI 104 and 1 from (MATH 225 or (EE 141 and MATH 126) or (EE 141 and\nMATH 127) or (EE 141 and MATH 129)). In other words, knowledge of C++ programming, and\nafamiliaritywithLinearAlgebraandCalculus.\nThe most important prerequisite of all, however, is your interest in the class, motivation, andcom-\nmitmenttolearning. Ifyouarenotsurewhetherthisclassisforyou,comeandtalktous\nReadings: Thiscourseisbasedonthefollowingtextbooks:\nEdwardAngel,InteractiveComputerGraphics: ATop-DownApproachUsingOpenGL,Fifth\nedition,AddisonWesley,ISBN-10: 0321535863\nDave Shreiner, OpenGL Programming Guide: The Official Guide to Learning OpenGL, Ver-\nsions3.0and3.1,Seventhedition,Publisher: Addison-WesleyProfessional,ISBN:9780321552624\nLectures: Lecture attendance is required; please do not take the course if you cannot attend the\nlectures. If you miss a class, it is your responsibility to find out what we discussed in class,\nincludingwhichannouncementswemadeinclass. Ifthereissomethingthatyoudonotunderstand,\nfeelfreetointerruptwithquestions.Youractiveparticipationinclassiscrucialinmakingtheclass\nsuccessful.\nUse your fellow students as a resource, e.g., by forming study groups or posting questions on the\ndiscussionforumonPiazzathattheTAsandCPs/Gradersmonitoronadailybasis. Weencourage\nyou to participate actively on the discussion forum, by both asking and answering questions. If\n1\nyou need additional help, please feel free to come to our office hours. The TAs and CPs/Graders\nare experienced and will be able to answer all of your technical questions, including about the\ntextbook,lectures,andprojects.\nAssignments: Students will design, implement, and use interactive graphical applications (using\nthe OpenGL API in C++). This amounts to three coding assignments using OpenGL and the\nOpenGL Shading Language (GLSL). All assignments must be completed to pass the course.\nTheassignmentshavebonuscredits.\nExams: There will be one midterm and one final, all of which are mandatory. The exams will be\nbased on the material covered in class, and on what is learned from completing the assignments.\nThe exam dates are listed on the schedule; please do not take the course if you cannot attend the\nexams. No makeups will be given. All exams will be comprehensive but with a focus on material\nnotyettestedinapreviousexam.\nGrades: Assignmentsandexamshavethefollowingweights:\n• Assignment1: 16%\n• Assignment2: 17%\n• Assignment3: 17%\n• MidtermExam: 20%\n• FinalExam: 30%\nThe instructors reserve the right to adjust the grading scale. There will always be some students\nwho are very close to grade boundaries. There is nothing that we will do about that. Grades are\nbased on performance, not need or personal circumstances, and the instructor does not negotiate\ngrades. Thus, do not take CSCI420 (or take it at your own risk) if you need a certain grade, for\nexample,becauseyouaregraduatingorbecauseyouhavebeenconditionallyadmitted.\nTo receive a good grade, you will need to perform well in the exams and the assignments. Please\ncheck the correctness of the grading and the posted scores immediately after we announce the\navailability of the scores. You will need to let us know about any grading issue within 7 days\nof us posting the score. After that time, we will no longer entertain your requests for changes to\nyourscore. Ifyouhaveagradingissue,youwillneedtodiscusstheissuefirstwiththeTAs. Ifyou\ncannotreachconsensus,youcanappealthegradingissuetotheinstructors.\nLate Policy: Projects handed in up to 24 hours late are worth 50%. After that, they will not be\ngivenanycredit. Ofcourse,exceptionswillbemadeinextremecircumstances(whenpossible,let\nusknowinadvance).\nStatement for Students with Disabilities: Any student requesting academic accommodations\nbased on a disability is required to register with Disability Services and Programs (DSP) each\nsemester. A letter of verification for approved accommodations can be obtained from DSP. Please\nbe sure the letter is delivered to me (or to TA) as early in the semester as possible. DSP is located\nin STU 301 and is open 8:30 a.m.5:00 p.m., Monday through Friday. The phone number for DSP\nis(213)740-0776.\n2",
            "Learning Objective": "",
            "Table Description": "Week | Date | Topics\n1 | 8/27 | Introduction\nBasicGraphicsProgramming\n2 | 9/3 | InputandInteraction\nTransformations\n3 | 9/10 | ViewingandProjection\nHierarchicalModeling\n | 9/13 | Assignment1Out\n4 | 9/17 | PolygonalMeshes,Curves,andSurfaces\nSplines\n5 | 9/24 | GuestLecture(AdamFinkelstein,Princeton)\nAssignment1Q&A\n6 | 10/1 | LightingandShading\nShadinginOpenGL\n | 10/4 | Assignment1Due\n7 | 10/8 | TextureMapping\nBumpMappingandClipping\n | 10/11 | Assignment2Out\n8 | 10/15 | Rasterization\nRayTracing\n9 | 10/22 | GeometricQueries\nSpatialDataStructures\n10 | 10/29 | GlobalIllumination\nReviewforMidterm\n | 11/1 | Assignment2Due\n11 | 11/5 | MidtermExam\n | 11/8 | Assignment3Out\n12 | 11/12 | AnimationPrinciples\nComputerAnimation\n13 | 11/19 | QuaternionsandRotations\nProgrammableGraphicsHardware\n14 | 11/26 | Physically-BasedSimulationI\nPhysically-BasedSimulationII\n | 11/29 | Assignment3Due\n15 | 12/3 | I/OTechnologiesandVR\nReviewforFinals\n | 12/17 | FinalExam(2pm-4pm)\n\n\n"
        }
    },
    {
        "CSCI-353": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n2\nCatalog Description\n2",
            "Learning Objective": "2\nReadings and Lecture Schedule\n3\nCourse Elements and Grading\n5\nStatement on Academic Conduct and Support Systems\nThisdocumentcontainsmanyhyperlinks. Thesemaynotbe\nvisibleifyou’reviewingthisonGoogleDrive. Downloadthe\nfileanduseaPDFviewertoaccessthehyperlinks.\nintroduction to internetworking cs 353 , fall 2024 2\nCourse Description ClassInformation:\n• Location:MRF340\n• Time:TTh12-1:50pm\nCS353takesatop-downapproachtoexplorehownetworksoperate\nDiscussionSection:\n• Location:Online\nandhownetworkapplicationsarewritten. Westudyhowpopular\n• Time:Fr11-11:50am\ndistributedsystemssuchasvideostreaming,contentdistribution TA:TBD\nnetworks(CDNs),andcloudcomputingsystemsworkintheapplica-\ntionlayer. Weexplorehowtheseapplicationstransferdatabetween\ntheircomponentsandendusersovertheInternetusingtransport\nlayerprotocolssuchasTCPandUDP.Wegodeepertounderstand\nwhatkeepsthetransportlayerrunning;specifically,welookathow\npacketsareroutedandhowrouterswork. Finally,wediveonemore\nlayerdowntounderstandhowthelinklayertransferpacketsusing InstructorContact:\n• Officehours(SAL212):4-6pm\nEthernet. Inadditiontocuttingthroughthelayersandcoveringthe\nMonday.Youcanchoosetomeetme\nbasics,welearnaboutthestate-of-the-arttopicsinnetworkingsuch inperson,orvirtually.Eitherway,\npleasebookanappointmentonthis\nasdatacenternetworksandsoftware-definednetworking(SDN).\nappointmentcalendar.\n• Contactmode:Sendmeaprivate\nFromapracticalpointofview,welearnwhatsocketsareand\nmessageonPiazza.Pleasedonot\nhowtousethem. Andwewritecode. Wewritecodetoimplement emailme,sincethereisachanceI\nmightmisstheemail.\nvariousprotocols,tobuildclient-serverapplications,HTTPproxies,\nandvideodistributionapplications,andreliabletransport. ThisGooglecalendarhasclasstimings,\nofficehourinformation,andimportant\ndeadlines;youshouldsubscribetoit.\nCatalog Description\nGlobalInternet: designprinciples,layering,protocoldesign/analysis.\nNetworkedapplications,Internetstructure/architecture,Proto- OnlineSystems\n• Piazzafordiscussions\ncolsfortransport/congestioncontrol,networklayer/routing,link\n• Brightspaceforscoresandgrades\nlayer/MAC. • Gradescopeforonlinequizzes\n• Coursematerialsincludingslides,\nsyllabusandothermaterials\nLearning Objectives • Annotatedslidesfromeachlecture\nInthiscourse,wewillunderstandthefundamentalsofnetworking\nandthearchitectureoftheInternet. Wewillexamineindetaileach\nlayeroftheInternet’snetworkingstack,takingatopdownapproach.\nThecoursewillincludelectures,threeassignments,amid-termanda\nfinal. Fortheassignments,studentsare\nexpectedtobeproficientinCandC++\nPrerequisite(s) CSCI201 aswellasPython.\nCo-Requisite(s) None\nConcurrentEnrollment None\nReadings and Lecture Schedule\nLecturescovermaterialfromthefollowingtextbook:",
            "Table Description": "Weekof | Tuesday | Thursday\nAug26 | Introduction | Overview\nSep2 | ProtocolLayering | HTTPandtheWeb\nSep9 | DNSandCDNs | VideoandCloud\nSep16 | TransportLayer | TCPBasics\nSep23 | CongestionControl | Quiz1\nSep30 | MoreCongestionControl | NetworkLayerandIP\nOct7 | IPRouters | FallRecess\nOct14 | Mid-termReview | Mid-term\nOct21 | RoutingFundamentals | Intra-ASRouting\nOct28 | Inter-ASRouting | Quiz2\nNov4 | BGP | SDN\nNov11 | LinkLayer | SwitchedLANs\nNov18 | WirelessNetworking | DatacenterNetworking\nNov25 | SlackDay | Thanksgiving\nDec2 | SlackDay | Quiz3\n\n\n\n\n | Assignment | DueDate\n1 | Sockets,Mininet,&Performance | Sep13\n2a | VideoStreamingviaCDN | Oct11\n2b | VideoStreamviaCDN | Oct25\n3a | ReliableTransport | Nov15\n3b | ReliableTransport | Dec6\n\n\n"
        }
    },
    {
        "CSCI-526": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nStudents in this course will work in small teams to buildgamesonmobileordesktopdevices.Theinitialhalfofthecoursewillfocus\non learning game development tools and how those can be utilized with game development. During the course, students will\ncollaborate with each other through the use of programming, art, design, and production skills. The secondhalfisgamepolishand\nexpansion.\nWorking in a professional studio-like atmosphere, students in CSCI 526 will learn the fundamentals of teamdynamicasitrelatesto\ngame design and development, and develop a playable prototype for a game.Inteams,studentswilltakeontherolesofDesigners,\nEngineers, Producers, etc to learn both the basics of the roles as well as how they work together in a professional development\nstudio setting. By taking CSCI 526 students learn how to create gamepitches,buildadesigndocumentandpresentitliveinfrontof\nan audience. The course culminates with a polished, portfolio-quality vertical slice and professional quality supporting\ndocumentation.\nOur game veteran instructor will provide key lectures and materials, giving students a chance to learn directly from game studio\ntechniquesandmakenetworkingconnections.",
            "Learning Objective": "Students learn fundamentals of core loops and design in games; basic technologies for game development platforms, including\nworking with various, commonly-used APIs; how to perform market research and analysis; how to present apolishedpitch;howto\ncreateeffectivedesignandengineeringdocumentation;howtoworkonateamwithdefinedrolestocollaborateonaproject\nCourseNotes\nThiscoursewillassignalettergrade.\nStudentswillsubmitworkviaGoogleDrive,Blackboard,andbyshowingbuildstoinstructorsandpeersinclass.\nStudentswillworkwithotherdevelopmentandproductiontools,asdiscussedinclass.\nRequiredReadingsandSupplementaryMaterials\nHandouts,templates,games,andsampledocumentswillbesuppliedbytheinstructorswhenassigned.\nDescriptionandAssessmentofAssignments\nStudents willcreatebothinteractiveexperiencesanddocumentation. Theinteractiveexperienceswillbeeithersimpleprototypesof\ncore gamemechanicsoramorepolishedverticalslice.Assignmentswillbegradedoneffort,collaboration,executionascomparedto\nthegoal,andoverallquality.\nDocumentation may consist of:pitchpresentations,designdocuments,technicalspecifications,playtestinglogs,designjournals,and\nother forms of documentation as assigned. Students will learn professional documentation and presentation techniques.\nAssignmentswillbegradedoneffort,collaboration,execution,and,whereapplicable,iterativeimprovement.\nGradingBreakdown\nSection Assignment(s) %of Due\nGrade\nUnityEssentialsTutorial Week2\nIndividualLearning UnityJuniorProgrammerPathwaySelectedTutorials 10 Week3\nPairedExploration PairPrototype 10 Week6\nTeamExploration AlphaVersion(Graybox–Midterm1) 20 Week9\nTeamDevelopment BetaVersion(DataCollection–Midterm2) 20 Week12\nTeamImprovement GoldVersion(Final) 30 Week15\nAttendance\nGenreInterestSurvey\nAlphaPlaytesting\nParticipation BetaPlaytesting 10\nTOTAL 100\nCourse Policies\nAssignmentSubmission\nPresentationtoGrader:Someassignmentsmayrequirestudentstopresenttheirassignmentsdirectlytothegrader.\nIn-ClassPresentation:Someassignmentsmayrequirestudentstopresenttheirworkduringclasssessions.\nSurveySubmission:Forspecificassignments,studentsmaybeaskedtosubmitsurveysorquestionnairesaspartoftheircoursework.\nGoogle Drive Submission: Forspecificassignments,theycanbeelectronicallysubmittedthroughGoogleDrive.Studentsarerequired\ntofollowthedesignatedfolderorfile-sharingprocess.\nBlackboardSubmission:Forspecificassignments,studentscansubmittheirassignmentsviatheBlackboardplatform.\nMissinganAssignmentDeadline,Incompletes:\nThe only acceptable excuses for missing an assignment deadline or taking an Incomplete (IN) in the coursearepersonalillnessora\nfamily emergency. Students must inform the course staff before the assignment due date and present verifiable evidence for a",
            "Table Description": "Week | Day | Topics/Lectures | In-ClassActivity | Homework\n(DueNextClassunless\notherwisespecified)\nWeek1 | Wednesday1/10\nClass1 | WhattoExpect:\nIntroductiontocourse\nToolsandResources\n(Solo):IntrotoUnity,\nIDEs,recordingsoftware\nUnityBasics:The\nessentialsoftheUnity\ngameengine | Beginningofclass\nsurvey\nPlaystudentgames\nfromlastsemester\nClass&SetupQ&A | JoinclassDiscord\nInstallUnity&UnityHub\nUnityLearn-Essentials\n(DueClass2)\nWeek2 | Wednesday1/17\nClass2 | GameGenres&\nInnovation:Genresof\ngameplayandhowto\ninnovateknownformulas\nGameIntro:Basicsof\ngamedevelopment | Brainstormgenre\nmashingingroups\nStudent\npresentationsof\ngenremashingw/\nfeedback\nUnityQ&A | UnityLearn-Junior\nProgrammingPathway\n● GettingStarted\n● Unit1\n● IntrotoProject\nManagement&\nTeamwork\n(DueClass3)\nWeek3 | Wednesday1/24\nClass3 | DesigningInnovativeand\nIntuitiveMechanics:\nUsingthemetoinform\ndesign\nPrototypingBasics:\nCreatinggameprototypes\nUnityIntermediates:\nFrames,events,andtime\ninUnity | Brainstorm\ninnovativedesignin\ngroups | Genreinterestsurvey\n(Duebyendof1/24)\n\n\n\n\nWeek | Day | Topics/Lectures | In-Class | Homework\n(DueNextClassunless\notherwisespecified)\nWeek4 | Wednesday1/31\nClass4 | GameStructureBasics:\nFundamentalsofgame\ndesign\nGameJams:Introduction\ntorapiddevelopment\nTeamToolsandResources\n(Team):Communication,\ntaskmanagement,source\ncontrol,documentation | Jamgenretheme\nvoting\nPairformation,and\nbrainstorming | PairedPrototype\n(DueClass6)\nWeek5 | Wednesday2/07\nClass5 | GameLoopvs.CoreLoop:\nGameloops\nUnityUI:Menus,\ncanvases,responsive\ndesignforUIinUnity | Devtime | \nWeek6 | Wednesday2/14\nClass6 | OnSignificantMechanics:\nGamemechanics | EXAM1-Student\npresentationsof\npairedprototypes\nFill-inteamfinding\nspreadsheetand\nbeginformingteams | Formateam(DueClass7)\n\n\n\n\nWeek | Day | Topics/Lectures | In-Class | Homework\n(DueNextClassunless\notherwisespecified)\nWeek7 | Wednesday2/21\nClass7 | MarshmallowChallenge:\nAnexerciseiniterative\ndesign\nRiskandReward:Choice\nandincentivesingame\ndesign\nData-DrivenGameDesign:\nUsinganalyticsand\nstatisticstodrivedesign\n+\nDataCollection&\nVisualization:Collecting,\nstoring,andvisualizing\nanalyticdata | Finalizeteams\nUndertakethe\nmarshmallow\nchallenge | Alphaprototypeprogress\ncheck\n(DueClass8)\nWeek8 | Wednesday2/28\nClass8 | HowtoPlaytest:\nPlaytestingandquality\nassuranceingames\nIntrotoPods:Presentingin\ngroups\nDebugging,Design\nPatterns,PassingValues:\nDebugginginUnityand\nGameDesign\nGameUIandUX:Designing\nagooduserexperience | Showlive\nplaytesting\nexample\nSame-Pod\nplaytesting\nTeamwork | Produceafirstplayable\ngrayboxprototypealpha\n(DueClass9)\nWeek9 | Wednesday3/06\nClass9 | BetterTutorialsThrough\nScaffolding:Using\nincrementaldesignto\nintroducecomplexity\nDesigningaQuestionnaire:\nUsingsurveystogather\ndata | EXAM2-\nPresentingalpha\ngrayboxprototypes\nin-pod\nTeamwork | Playtestsamepod’s\ngames&filloutsurveys\n(DueClass10)\nProduceaplayablebeta\nprototype(DueClass12)\n\n\n\n\nWeek | Day | Topics/Lectures | In-Class | Homework\n(DueNextClassunless\notherwisespecified)\n03/10-03/17\nSpringRecess |  |  |  | \nWeek10 | Wednesday3/20\nClass10 | GuidingYourPlayer\nInvisibly:Usingdesignto\nguideandteachaplayer\nInnovatingon\nProgression:Making\nplayerprogression\ncompelling\nGraphInterpretation\nandVisualization:\nVisualizingand\ninterpretingdata | Same-podplaytesting\nTeamwork | Betaprototypeprogress\ncheck\n(DueClass11)\nWeek11 | Wednesday3/27\nClass11 | MobileGameControls:\nMinimaldesignfor\nmobilegames\nHowtoMakeaSound\nHypothesis:Usingdata\ntodiscernproblems\nSpace&TimeinUnity:\nLoadingscenes,resets,\nandscalingtimeinUnity |  | Continueworkingon\nbetaprototype(Due\nClass12)\nWeek12 | Wednesday4/03\nClass12 | VisualStorytelling&\nVisualDesign:Artin\ngame\nPrototypingPhysics->\nOptimization | EXAM3-Presenting\nbetagraybox\nprototypes | Playtestotherstudent\ngames&filloutsurveys\n(DueClass13)\n\n\n\n\nWeek | Day | Topics/Lectures | In-Class | Homework\n(DueNextClassunless\notherwisespecified)\nWeek13 | Wednesday4/10\nClass13 | AimingforGold:\nPrioritizingforanear\ndeadline\nCaseStudy:Spurpunk\nDevelopment:The\ndevelopmentofatower\ndefensegame\nExportingfromExcelto\nXML:Storingdatain\napplication-readable\nformats | Cross-podplaytesting\nTeamwork | Hypothesizeissuesfrom\nsurveysandanalyticsdata\nFinishandpresentyour\nprototype(Goldversion)\n(DueClass15)\nWeek14 | Wednesday4/17\nClass14 | GettingaJobinthe\nGameIndustry:Finding\ngamesjobs | Cross-podplaytesting\nTeamwork | \nWeek15 | Wednesday4/24\nClass15 | FinalLesson:A\nretrospective,and\nmovingforward | FINALEXAM-\nPresentinggold\nprototype\nEndofclasssurvey | Liveanawesomelife!\n\n\n"
        }
    },
    {
        "CSCI-532": {
            "Course Description": "Catalogue Course Description:\nA project class focused on innovation, providing hands-on experience, working in teams,\ndeveloping problem statements and prototypes for defense, intelligence, and homeland\nsecurity applications.\n\nExpanded Course Description:\nCourse Description\nThis project-based courseis intended to provide students with hands-on experience,\nworking in teams, to develop problem statements and hardware or software prototypes for\ndefense, homeland security, and intelligence applications. This semester’s problems are\ncurated to assist soldiers in the battlefield and on humanitarian missions, and to assist\ncyber-defense of critical infrastructure and identification of threats. Students perform\ncustomer discovery, develop metrics of success, and develop prototypes systems to address\nproblems related to to Machine Learning, Computer Vision, Computer Security, Data\nScience, Computer Networks, and Sensor Networks. The problems are provided by\nsponsors in the Department of Defence, Intelligence Communities and Homeland Security.\nStudent are assigned to teams by teaching staff based on backgrounds of the students (to\nmake sure that each team has members with a diversity of technical backgrounds), and\nbased on the preferences of students for particular projects assigned by problem sponsors.",
            "Learning Objective": "• Students will apply the principles of the lean startup methodology to define\nproblems with applicability for defense.\n• Students will understand how to interview beneficiaries (customers) to identify\nrequirements and desired characteristics of problem solutions.\n• Students will apply the mission model canvas (MMC) to discover the value\nproposition of candidate approaches to a problem.\n• Students will understand when to pivot during problem definition when they\ndiscover initial hypotheses regarding a problem were incorrect.\n• Students will apply engineering/scientific/ and business skills to defining problems\nand developing candidate solutions.\nRecommended Preparation: Programming skills comparable to those obtained from an\nintroductory undergraduate programming class will be helpful. Students should have the\nability to write short programs or scripts to manipulate data.\nTechnological Proficiency and Hardware/Software Required\nTechnological proficiency necessary to contribute to the teams using productivity suites\nsuch as Microsoft Office or GSuite is expected.\nRequired Readings and Supplementary Materials\n[SOM] Bob Dorf and Steve Blank, The Startup Owner's Manual : The Step-By-\nStep Guide for Building a Great Company (2012, Hardcover)\nSyllabus for CSCI-532, Page 2 of 35",
            "Table Description": "Week | Team Presentation | Lecture | Topic\nWeek 1\n1/11/2024 | Team Formation | Beneficiary\nDiscovery | Class Expectations +\nBeneficiary Discovery\nWeek 2\n1/18/24 | Team Introduction\nand Problem\nStatement | DOD/IC 101 | Introduction to the DOD /\nIntelligence Community +\nMission Model Canvas\nWeek 3 | Mission Model Canvas | Beneficiaries | Beneficiary Discovery\nWeek 4 | Beneficiaries | Value Proposition | Value Proposition\nMinimum Viable Products\nWeek 5 | Preliminary MVP | Solution\nArchitecture | Solution Architecture\nData Architecture\nSecurity Architecture\nWeek 6 | Solution Architecture | Product Mission Fit | Product-Mission Fit\nWeek 7 | Product-Mission Fit | Dual Use | Dual Use Technologies\nWeek 8 | Dual Use | Mission\nAchievement | Mission Achievement Metrics\nWeek 9 | Mission Achievement | Buy-In | Buy in & Support\nWeek 10 | Buy in & Support | Deployment | Deployment Strategies\nWeek 11 | Deployment | Resources | Activities, Resources,\n+ Key Partners\nWeek 12 | Activities, Resources\n+ Key Partners | Budget and\nPlanning | Mission Budget\n+ Operating Plan\nWeek 13 | Mission Budget\n+ Operating Plan | Reflections | Lessons Learned\nWeek 14 | Lessons Learned | Final Report\nGuidelines | Guidelines for Final Report\nDocument to Sponsors\nWeek 15 | Final (Written) Report\nto Sponsors\nDry Runs of Final\nPresentations | Presentation tips | Presentation Tips\n+ Best Practices\nFINAL | Final Presentations by\ngroup due on\nUniversity-scheduled\ndate of the exam |  | \n\n\n\n\nWeek | Team Presentation | Lecture Topic\nWeek 1 | Team Formation +\nBeneficiary Discovery | Introduction:\nBeneficiary Discovery\n+ Class Expectations\nWeek 2 | DOD/IC 101 | DOD/IC 101\nWeek 3 | Mission Model Canvas | Beneficiaries\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 1 | Team Formation +\nBeneficiary Discovery | Beneficiary Discovery\n+ Class Expectations\nWeek 2 | DOD/IC 101 | DOD/IC 101 + MMC\nWeek 3 | MMC | Beneficiary\n\n\n\n\n | Slide 5: Minimal Viable Product (MVP)\n• Show the MVP of the week. Include pictures (if possible).\n• Tell us what you think the MVP is testing, what data you expected, and\nwhat data you received.\nSlide 6: Mission Model Canvas + Value Propositions\n• Present your Mission Model Canvas\n• Use the one in your application as a template\nSlide 7: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• What is Beneficiary Development?\n• What is Beneficiary Discovery? What are its tenants?\n• What are good practices of Beneficiary Discovery? What are bad\npractices?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 2 | DOD/IC 101 | DOD/IC 101\nWeek 3 | Mission Model Canvas | Beneficiaries\nWeek 4 | Beneficiaries | Value Proposition\n\n\n\n\nPrepare | Come prepared to answer the following questions:\n• What’s the difference between search and execution?\n• What is a business model versus a business plan?\n• What is the Business Model Canvas?\n• What is the Mission Model Canvas?\n• What are the 9 components of the Mission Model Canvas?\n• What is a hypothesis?\n• What do we mean by “experiments”?\n• What is Customer Development?\n• What are the key tenets of Customer Development?\n• What is an MVP?\n• What are your first few of MVPs going to be?\n\n\n\n\n | Week |  | Team Presentation | Topic\n |  |  |  | \nWeek 3 |  |  | Mission Model Canvas | Mission Model Canvas,\nBeneficiary Development\nWeek 4 |  |  | Beneficiaries | Value Proposition\nWeek 5 |  |  | Solution Architecture | Solution Architecture\n\n\n\n\n | • Below each VPC, create a Beneficiary Archetype\nSlide 6: Beneficiary Workflow\n• Each Beneficiary has a unique job-specific workflow. You need to diagram it. This\nmeans you must have a thorough understanding of your Beneficiary’s day-to-day\nlife.\n• If you have difficulty completing this diagram, you likely need a more detailed\nunderstanding of your Beneficiary.\n• Have your sponsor (or whomever is your Beneficiary) sign off on this diagram. Tell\nus what they said.\nSlide 7: MVP (+ Experiments conducted)\n• Show us your latest MVP. Include pictures (if possible).\n• Remember that this is not a full-fledged prototype.\n• What experiment was it being used for? What were your expected results? What did\nyou actually find?\nSlide 8: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• What did I see during Beneficiary Discovery and what does it mean?\n• What is a Beneficiary?\n• Who are my Beneficiaries?\n• What is a Beneficiary Archetype?\n• What are my Beneficiary Archetypes?\n• Are organizations Beneficiaries?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 4 | Beneficiaries | Beneficiaries\nWeek 5 | Solution Architecture | Solution Architecture\nData Architecture\nSecurity Architecture\nWeek 6 | Value Proposition | Product Mission Fit\n\n\n\n\n | • The diagram should clearly show domains within your architecture\nfrom which data will be accessible by different beneficiaries/entities.\nSlide 7: MVP (+ Experiments conducted)\n• Show us your latest MVP. Include pictures (if possible).\n• Remember that this is not a full-fledged prototype.\n• What experiment was it being used for? What were your expected\nresults? What did you actually find?\nSlide 8: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• What is Mission Achievement?\n• How is Mission Achievement defined for your Sponsor?\n• How are you defining Mission Achievement?\n• What are your metrics for Mission Achievement?\n• How does Mission Achievement change between your Beneficiaries?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 5 | Beneficiaries | Value Proposition\nWeek 6 | Value Proposition | Product-Mission Fit\nWeek 7 | Product-Mission Fit | Dual Use\n\n\n\n\n | • Update your Beneficiary Workflow slide from last week to capture what you\nlearned over the past week.\n• Highlight the evidence that prompted these changes\n• Show to your sponsor / beneficiary, and tell us what they said.\nSlide 7: Draft Organizational Chart\n• Draw the relationships between your Beneficiaries\n• Include anyone else who they regularly interact with.\n• Continue to refine and update this over the course of the quarter.\n• Note that this is not the same as the Beneficiary Workflow\nSlide 8: MVP (+ Experiments conducted)\n• Show us your latest MVP. Include pictures (if possible).\n• Remember that this is not a full-fledged prototype.\n• What experiment was it being used for? What were your expected results? What\ndid you actually find?\nSlide 9: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• What is a Value Proposition?\n• How is your MVP connected to your value proposition?\n• How did your Beneficiary Discovery inform the evolution of your Value\nProposition?\n• What pain-points does you solution solve?\n• What gains does your solution provide?\n• Why do value propositions have a one-to-one relationship with Beneficiaries?\n• How do the needs of your Beneficiaries diverge? Are they in conflict with one\nanother?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 6 | Value Proposition | Product-Mission Fit\nWeek 7 | Product-Mission Fit | Dual Use\nWeek 8 | Dual Use | Mission Achievement\n\n\n\n\n | Slide 8: Tiered Beneficiary Diagram\n• Create a graphic that sorts your remaining Beneficiaries into Target,\nTangential, Upstream, and Downstream.\nSlide 9: Value Proposition Canvases + Beneficiary Archetypes\n• Update from last week’s slide deck. Note any changes (additions or\nremovals).\n• Tie into Product-Mission Fit by preparing evidence from your Beneficiary\nDiscovery to support each entry within a section. Having verified each\nsection, you’re well on the way to Product-Mission Fit.\nSlide 9: MVP (+ Experiments conducted)\n• Show us your latest MVP. Include pictures (if possible).\n• Remember that this is not a full-fledged prototype.\n• What experiment was it being used for? What were your expected\nresults? What did you actually find?\nSlide 9: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• Have we validated product-mission fit? If so, what evidence do you\nhave?\n• Are you making any pivots? If so, what are you pivoting to? Why?\n• What Gains is your MVP creating? What pain-points is it relieving?\n• Are all entries on your MMC harmonious or is there conflict / tension\nbetween some?\n• Who are your target Beneficiaries? Who are the tangential ones? The up /\ndown-stream Beneficiaries?\n• How do you triage Beneficiaries?\n• What is Beneficiary creep and how do you avoid it?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 7 | Product-Mission Fit | Dual Use\nWeek 8 | Dual Use | Mission Achievement\nWeek 9 | Mission Achievement | Buy in + Support\n\n\n\n\n | Slide 7: Optional Diagram\n• Add any extra diagrams you can create that visually convey what you\nlearned this past week.\nSlide 8: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• What is your dual-use value proposition?\n• Who are your dual-use Beneficiaries?\n• What role does Dual-Use play in your larger-business plan?\n• What deployment options do you have for dual-use markets?\n• What benefits does Government financing offer over VC financing?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 8 | Dual Use | Mission Achievement\nWeek 9 | Mission Achievement | Buy in & Support\nWeek 10 | Buy in & Support | Deployment\n\n\n\n\n | • Remember that this is not a full-fledged prototype.\n• What experiment was it being used for? What were your expected results?\nWhat did you actually find?\nSlide 8: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• What is Mission Achievement?\n• How is Mission Achievement defined for your Sponsor?\n• How are you defining Mission Achievement?\n• What are your metrics for Mission Achievement?\n• How does Mission Achievement change between your Beneficiaries?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 9 | Mission Achievement | Buy in & Support\nWeek 10 | Buy in & Support | Deployment\nWeek 11 | Deployment | Activities, Resources,\n+ Key Partners\n\n\n\n\n | • Create a Get-Keep-Grow diagram for your solution.\nSlide 5: Value Proposition Canvases + Beneficiary Archetypes\n• Same format as last week. Discuss what is new.\n• Include general ways to get Buy-In for each Beneficiary Archetype.\nSlide 6: MVP (+ Experiments conducted)\n• Show us your latest MVP. Include pictures (if possible).\n• Remember that this is not a full-fledged prototype.\n• What experiment was it being used for? What were your expected results? What did\nyou actually find?\nPrepare | Come prepared to answer the following questions:\n• What are saboteurs, supporters and advocates?\n• Who are your saboteurs?\n• Who are you advocates?\n• Who are your supporters?\n• Why are your saboteurs sabotaging you?\n• Who are the critical influencers in your influence/org chart?\n• What are you going to do to initially get beneficiaries? To grow your market size?\nAnd to keep customers?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 10 | Buy in & Support | Deployment\nWeek 11 | Deployment | Activities, Resources,\n+ Key Partners\nWeek 12 | Activities, Resources\n+ Key Partners | Mission Budget\n+ Operating Plan\n\n\n\n\n | • This requires you to understand how your sponsor conducts business.\nShow this slide to them before your presentation to solicit feedback.\nSlide 8: Potential Deployment Strategies\n• There is no one-way to get things done in the DOD. Highlight the\ndifferent avenues for deploying your solution that you have discovered.\nInclude different sources of funding, contract mechanisms, programs, etc.\n• Compare the pros and cons of each deployment-strategy. Consider both\ntheir timelines and funding constraints.\n• Detail the deployment strategy that your team is most likely to pursue.\n• Identify the constraints and conditions of using that deployment method.\nSlide 9: Deployment Diagram\n• If your sponsor does have a method to propose deployment of a solution,\nwork with them to lay out the specific activities that need to be\ncompleted to rapidly deploy.\n• In addition to necessary activities in this process identify the people who\nwill be involved (organizations don’t do things, the people inside them\ndo)\nSlide 7: Next Week\n• What is your plan for next week?\n• Who will you talk to?\n• What will you do?\n• What do you need to find out?\nPrepare | Come prepared to answer the following questions:\n• How is your sponsor’s organization organized? (Draw it out)\n• What viable funding mechanisms exist within your sponsor’s\norganization? How about from outside organizations?\n• Are there any relevant BAAs or RFPs?\n• What Technology Readiness Level (TRL) have you achieved?\n• How much will it cost to get from your current TRL to the next? (est)\n• What are the different Deployment routes?\n• What are the associated timelines of the different deployment routes?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 11 | Deployment | Activities, Resources,\n+ Key Partners\nWeek 12 | Activities, Resources\n+ Key Partners | Mission Budget\n+ Operating Plan\nWeek 13 | Mission Budget\n+ Operating Plan | Reflections\n\n\n\n\n | • Are they resources you already have? Do you need to acquire or partner with\nothers to get them? How much will they cost?\n• What human resources will you need? What equipment resources will you\nneed? What financial resources will you need to acquire all these resources?\nSlide 8: What are your Key Activities?\n• What are the activities you need to perform to complete your team’s value\nproposition? (e.g. manufacturing, launching rockets, getting funding)\n• What is the timeline of those activities?\nSlide 9: Key Partner Canvases\n• For each Key Partner, complete a Key Partner Canvas to characterize the\npartnership.\n• Remember partnerships must be a 2-way street. Realistically you must offer them\nsomething in return.\nSlide 10: Value Proposition Canvases + Beneficiary Archetypes\n• Same format as last week. Discuss anything new.\nPrepare | Come prepared to answer the following questions:\n• What are Activities, Resources, and Key Partners? How are they related?\n• What are your Key Activities? Your Resources? Your Key Partners?\n• What are the different types of resources that one can have?\n• What is your most important type of Resource?\n• What is a “coin-operated” partnership?\n• What impact would pursuing a dual-use application have on your Activities,\nResources, and Key Partners?\n• What resources do you already have? What do you need?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 12 | Activities, Resources\n+ Key Partners | Mission Budget\n+ Operating Plan\nWeek 13 | Mission Budget\n+ Operating Plan | Reflections\nWeek 14 | Lessons Learned: Reflections | Presentation Tips\n+ Best Practices\n\n\n\n\n | • Map out an Operational timeline for the next 3 years\nPrepare | Come prepared to answer the following questions:\n• What is Burn Rate? What is your estimated burn rate?\n• What is a BOM?\n• What does your financial operations timeline look like for the coming 3\nyears?\n• When will you need new cash injections?\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 13 | Mission Budget +\nOperating Plan | Lessons Learned: Reflections\nWeek 14 | Lessons Learned: Reflections | Guidelines for Final Report\nDocument to Sponsors\nWeek 15 | Final (written) Report to\nSponsors\nDraft of Final Presentation | Presentation Tips\n+ Best Practices\n\n\n\n\n | • Zoom in on the important parts of the canvas to make any key points\nSlide 5 – “So here’s what we did…” (explain how you got out of the\nbuilding)\n• Show us your first MVP\nSlide 6 – “So here’s what we found (what was reality), so then… here’s what\nwe did”\n• Zoom in on the important parts of the canvas to make any key points\n• Presentation requires at least three Mission Model Canvas slides.\n• Presentation requires at least three diagrams of some part of the\ncanvas. For example:\no Get Keep Grow Pipeline\no Channel Diagram\no Customer / Payer Flow\no Activities / Resources / Partners Connections\no Petal Diagram\no TAM / SAM\nSide 7 – “So here’s where we ended up.” Talk about:\n• What did you learn\n• Show us your final MVP\nSlide 8\n• Investment readiness slide\n• Whether you think this a viable business,\n• Whether you want to pursue it after the class, etc.\n• Please note: This presentation is your first draft of the presentation\nthat will be made to the class in week 15, and then revised based on\nfeedback during week 15 for the final assignment to be presented to\nproblem sponsors, VC’s and other outside dignitaries during the final\nexam period.\nDead-\nlines | The Next draft of your slides needs to be uploaded by [Time] [Date]\nThe Teaching team will give your slides one final review and send\nyou comments that evening\nFinal slides and videos – approved by teaching team need to uploaded\nby (Time) (Date)\n\n\n\n\nWeek | Team Presentation | Topic\nWeek 14 | Lessons Learned +\nReflections | Lessons Learned + Reflections\nWeek 15 | Final (Written) Report to\nSponsors\nDraft of Final\nPresentation | Presentation Tips\n+ Best Practices\n |  | \n\n\n"
        }
    },
    {
        "CSCI-644": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course will introduce students to existing computational techniques and active\nresearch areas in the design of natural language dialogue systems. Natural language\ndialogue involves extended communication between two or more participants using a\nnatural language such as English. Dialogue systems are designed to participate in\nextended natural language interactions with human users, and have been developed\nfor a variety of interactive settings where a conversational interface offers advantages.\nDialogue systems leverage a range of natural language processing and modeling\ntechniques to help them serve as fluent and efficient conversational partners. This\ncourse will introduce students to these techniques, with topics to include spoken\nlanguage understanding, modeling dialogue genres, dialogue management and\nrepresenting context, dialogue response policies, natural language generation,\nembodied conversational agents, incremental speech processing, and dialogue system\nevaluation.\nDialogue systems are both an old topic in AI and Computer Science (with famous early\nexamples such as Eliza, Lunar, and SHRDLU) and a topic of much current interest and\nresearch. Indeed, dialogue systems are now a commercial reality, with companies\nsuch as Google, Amazon, Nuance, Microsoft, IBM, Apple, and others providing\nubiquitous speech recognition services and voice-driven information access systems.\nThese services are increasingly accessible (on the web, mobile devices, and in the\ncloud), and they provide exciting new possibilities for dialogue systems to be made\navailable to large user populations. Throughout the course, students will acquire an\nappreciation for some of the capabilities and potential of these new technologies, as\nwell as their current limitations.",
            "Learning Objective": "Students should come away from the course with a basic understanding of dialogue system\ndesign, implementation, and evaluation, and the tradeoffs between different approaches to\ndialogue system creation, given goals and available resources, and be able to:\n• implement simple dialogue systems\n• read and assess research papers in the area\n• design a dialogue system for a specific task\n• embark on new research on dialogue modeling and dialogue system\nRecommended Preparation: Students should have some experience with natural\nlanguage processing or artificial intelligence, and should be comfortable with medium-\nsized programming projects. Recommended background would be at least one of the\nfollowing courses: CSCI 544 (Applied Natural Language Processing) or CSCI 561\n(Foundations of Artificial Intelligence) or CSCI 662 (Advanced Natural Language\nProcessing) or EE619 (Advanced Topics in Speech Recognition). Students who have not\ntaken one of these courses should request permission from the instructor.\nCourse Notes\nThe course lecture periods will consist of approximately 1/2 lectures by the\ninstructors, and 1/2 group discussion of research papers, mostly led by students. For\nSyllabus for CS644 Fall 2018, Page 2 of 6",
            "Table Description": ""
        }
    },
    {
        "DSCI-352": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n:\nFoundationalcoursefocusingontheunderstanding,applicationandevaluationof\nmachinelearninganddataminingapproachesindata-intensivescenarios.\nCourseDescription:\nThisisanintroductoryundergraduatecourseonMachineLearningandDataMiningwith\nafocusonapplications.TheprimaryapproachofinstructioninthiscourseisLearning by\nDoing.Thefocusofthecourseistoprovidethestudentswithbasicunderstandingof\nMachineLearningandDataMiningalgorithmsandtomakethemusethealgorithmsto\nanalyzemassivedataandconvertthemintoinformationfordecision-making.\nCourseObjectives:\nUponsuccessfulcompletionofthiscourseastudentwill\n● Broadlyunderstandmajoralgorithmsusedinmachinelearning.\n● Understandsupervisedandunsupervisedlearningtechniques.\n● Understandregressionmethods.\n● Understandresamplingmethods,includingcross-validationandbootstrap.\n● Understanddecisiontrees,dimensionalityreduction,regularization,clustering,and\nkernelmethods.\n● Understandfeedforwardneuralnetworksanddeeplearning.\n● Understandmapreduceanditsuseinminingmassivedata.\n● Understandmethodsforminingassociationrules.\n● Understandhowrecommendersystemswork.\nExamDates:\n● MidtermExam:Wednesday,February21,4:00-5:50PM.\n● FinalExam:LastClassMeeting(April24,2024,4:00-5:50PM).\nTextbooks:\n● RequiredTextbooks:",
            "Learning Objective": ":\nUponsuccessfulcompletionofthiscourseastudentwill\n● Broadlyunderstandmajoralgorithmsusedinmachinelearning.\n● Understandsupervisedandunsupervisedlearningtechniques.\n● Understandregressionmethods.\n● Understandresamplingmethods,includingcross-validationandbootstrap.\n● Understanddecisiontrees,dimensionalityreduction,regularization,clustering,and\nkernelmethods.\n● Understandfeedforwardneuralnetworksanddeeplearning.\n● Understandmapreduceanditsuseinminingmassivedata.\n● Understandmethodsforminingassociationrules.\n● Understandhowrecommendersystemswork.\nExamDates:\n● MidtermExam:Wednesday,February21,4:00-5:50PM.\n● FinalExam:LastClassMeeting(April24,2024,4:00-5:50PM).\nTextbooks:\n● RequiredTextbooks:",
            "Table Description": "1. January8\nIntroductiontoMachineLearning(IMLCh.1)\n2. January15–MartinLutherKing,Jr.Day\nJanuary10,17\nSupervisedLearning(IMLCh.2)\n3. January22\nSupervisedLearning(cont’d)\nBayesianDecisionTheory(IMLCh.3)\n4. January29\nParametricMethods(IMLCh.4)\nMultivariateMethods(IMLCh.5)\n5. February5\nClustering(IMLCh.7)\nNonparametricMethods(IMLCh.8)\n6. February12\nDecisionTrees(IMLCh.9)\nLinearDiscrimination(IMLCh.10)\n7. February19–PresidentsDay\nFebruary21–MidtermExam\n8. February26\nMultilayerPerceptrons(IMLCh.11)\nDeepLearning,pt.1(IMLCh.12)\n9. March4\nDeepLearning,pt.2(IMLCh.12)\nLocalModels(IMLCh.13)\n10. March11\nSpringBreak(noclassheldthisweek)\n11. March18\nKernelMachines(IMLCh.14)\n12. March25\nGraphicalModels(IMLCh.15)\nHiddenMarkovModels(IMLCh.16)\n13. April1\nDataMining(MMDSCh.1)\nMap-ReduceandtheNewSo\u0000wareStack(MMDSCh.2)\n"
        }
    },
    {
        "CSCI-594B": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course and its prerequisite, SSCI 594a, are required for the Master of Science degree in\nGeographic Information Science and Technology (GIST) Program; they are not applicable to the\nGIST Graduate Certificate program or any other SSI programs. The purpose of these courses is\nto complete a capstone project in the spatial sciences, culminating students’ experiences in the\nM.S. in GIST Program and validating them as master practitioners. Based upon the thesis\nproposal and thesis work completed in SSCI 594a and with the approval of the Spatial Sciences\nInstitute faculty, students should be undertaking SSCI 594b prepared to complete their thesis\nwriting and successfully defend their theses.",
            "Learning Objective": "On completion of this course, students will be able to:\n• Design and execute a meaningful research project that demonstrates spatial thinking\nand uses the knowledge and skills learned while in the GIST Program.\n• Undertake the research process and be aware of research obligations and pitfalls.\n• Articulate research or project objectives clearly, situate research within an academic or\nscholarly context, state claims and evidence clearly, assess validity of claims, evidence,\noutcomes, and results.\n• Utilize the Microsoft OfficeTM software suite and a bibliographic reference manager\ncompetently and efficiently to produce documents that meet M.S. in GIST Program\nrequirements and show your work to advantage.\n• Narrate the research process clearly in the form of a formal multi-chapter master’s\nthesis manuscript, structured according to the approved M.S. in GIST thesis style.\n• Describe your master’s research clearly and succinctly, in written and oral forms, to\nfaculty, mentors, and potential sponsors.\nPrerequisite(s): SSCI 594a\nCo-Requisite (s): None\nConcurrent Enrollment: None\nRecommended Preparation: Students must be enrolled in the M.S.in GIST Program and\nhave an approved thesis prospectus or proposal, with an advisor and committee members\nassigned.\nCourse Notes\nThe preparation and defense of your master’s thesis is the culminating experience in the M.S. in\nGIST Program. Students are expected to work with a high level of self-motivation. Successful\nstudents exercise initiative and exhibit strong communication skills in working with their\nadvisors and committee members.\nSSCI 594b Syllabus, Page 2 of 6",
            "Table Description": ""
        }
    },
    {
        "DSCI-554": {
            "Course Description": "Catalogue Course Description:\nGraphical depictions of data for communication, analysis, and decision support. Cognitive pro-\ncessing and perception of visual data and visualizations. Designing effective visualizations. Im-\nplementing interactive visualizations.\nCourse Objective\nVisualizations are graphical depictions of data that help people communicate, understand and\nmake decisions. In this course, students will learn the theory and practice of creating data\nvisualizations. In the theory part students will learn how our brains process visual data, and\nhow the way our brains work affects how we perceive visualizations and how we should design\nvisualizations to make them easy to understand. Students will get an understanding of which\ncolors and shapes stand out clearly, how to organize visualizations and when images convey\nideas more clearly than words. In the practical part of the course students will learn guidelines\nand methods to design effective visualizations and how to implement interactive visualizations\nin the Web and and in notebooks using a variety of modern visualization libraries and tools.\n1\nClass Communication\nBlackboard at USC will be used for class communication and online collaboration tools will be\nleveraged to facilitate the homework and the projects.\nBooks and Readings\nAll books, papers or reports will be available to students online, at the USC bookstore and/or\nvia the USC libraries at http://www.usc.edu/libraries/.\nRequired Readings\nVisual Thinking for Design, by Colin Ware. ISBN: 978-0123750303.\nThe Functional Art: An Introduction to Information Graphics and Visualization, by Alberto\nCairo. ISBN: 978-0321834737.\nMurray,Scott. InteractiveDataVisualizationfortheWeb: AnIntroductiontoDesigningwithD3.\nO’Reilly Media, Inc., 2017.\nOptional Readings\nEnvisioning Information, by Edward R. Tufte. ISBN: 978-0961392116.\nCairo, Alberto. The truthful art: data, charts, and maps for communication. New Riders, 2016.\nGrading Schema\nQuizzes: 20%\nHomework Assignments: 30%\nClass Project: 30%\nFinal: 20%\nTotal 100%\nGrades will range from A through F. The following is the breakdown for grading:\n94 - 100 = A 74 - 76 = C\n90 - 93 = A - 70 - 73 = C-\n87 - 89 = B+ 67 - 69 = D+\n84 - 86 = B 64 - 66 = D\n80 - 83 = B- 60 - 63 = D-\n77 - 79 = C+ Below 60 is an F\nThe graded coursework will consist of four major components:\nQuizzes\nThere will be a quiz most weeks. The quiz will be 10 to 20 minutes. Quizzes will include: Ques-\ntionstestingunderstandingofthematerialfromthepreviousweek. Questionsaboutthereadings\nfor the class. The questions are suitable for students who read the required readings. The worst\n2\n\nExpanded Course Description:",
            "Learning Objective": "Visualizations are graphical depictions of data that help people communicate, understand and\nmake decisions. In this course, students will learn the theory and practice of creating data\nvisualizations. In the theory part students will learn how our brains process visual data, and\nhow the way our brains work affects how we perceive visualizations and how we should design\nvisualizations to make them easy to understand. Students will get an understanding of which\ncolors and shapes stand out clearly, how to organize visualizations and when images convey\nideas more clearly than words. In the practical part of the course students will learn guidelines\nand methods to design effective visualizations and how to implement interactive visualizations\nin the Web and and in notebooks using a variety of modern visualization libraries and tools.\n1\nClass Communication\nBlackboard at USC will be used for class communication and online collaboration tools will be\nleveraged to facilitate the homework and the projects.\nBooks and Readings\nAll books, papers or reports will be available to students online, at the USC bookstore and/or\nvia the USC libraries at http://www.usc.edu/libraries/.\nRequired Readings\nVisual Thinking for Design, by Colin Ware. ISBN: 978-0123750303.\nThe Functional Art: An Introduction to Information Graphics and Visualization, by Alberto\nCairo. ISBN: 978-0321834737.\nMurray,Scott. InteractiveDataVisualizationfortheWeb: AnIntroductiontoDesigningwithD3.\nO’Reilly Media, Inc., 2017.\nOptional Readings\nEnvisioning Information, by Edward R. Tufte. ISBN: 978-0961392116.\nCairo, Alberto. The truthful art: data, charts, and maps for communication. New Riders, 2016.\nGrading Schema\nQuizzes: 20%\nHomework Assignments: 30%\nClass Project: 30%\nFinal: 20%\nTotal 100%\nGrades will range from A through F. The following is the breakdown for grading:\n94 - 100 = A 74 - 76 = C\n90 - 93 = A - 70 - 73 = C-\n87 - 89 = B+ 67 - 69 = D+\n84 - 86 = B 64 - 66 = D\n80 - 83 = B- 60 - 63 = D-\n77 - 79 = C+ Below 60 is an F\nThe graded coursework will consist of four major components:\nQuizzes\nThere will be a quiz most weeks. The quiz will be 10 to 20 minutes. Quizzes will include: Ques-\ntionstestingunderstandingofthematerialfromthepreviousweek. Questionsaboutthereadings\nfor the class. The questions are suitable for students who read the required readings. The worst\n2",
            "Table Description": "Week | Topic | Readings | Homework | Exam\nWeek 1\nAug. 24\nAug. 26 | Introduction to information\nvisualization; why it is im-\nportant, what are it’s uses,\nexamples, course overview,\nworking with GIT. | Murray Ch. 1,2\nCairo I, Ch. 1,2 | Assignment 1. Follow Cairo\nPart I, Ch.1 example on UN\nData. For 10 countries se-\nlect UN data of your choice\ncontaining data over time.\nImport the data in Google\nSheetsandformatthedatato\ncreatealinechart, exportthe\nchart to a web page. | \nWeek 2\nAug. 31\nSep. 2 | Survey of visualization tech-\nniques; introduction to Web\nTechnologies. | Murray Ch. 3,4\nA Tour through\nthe Visualization\nZoo, J. Heer,\nM. Bostock,\nV. Ogievetsky.\nCommunications\nof the ACM, Jun\n2010.\nGoogle charts\nmanual | Assignment 2. Use UN Data\nfor the same 10 countries\nof Assignment 1 to create a\nbubble cloud with Inkscape.\nCreateawebpagenamedin-\ndex.html and add the SVG\ncreated with Inkscape. In\nthe same page, recreate the\nbubble cloud with SVG ele-\nments and using javascript.\nAdd the line chart of As-\nsignment 1 coded using the\nGoogle Charts library. | Quiz 1\nWeek 3\nSep. 9 | Nomenclature of popular\nvisualization tools; design\nspace of visualizations; the\nvisualization wheel; design\ntrade-offs; developing inter-\nactive graphics; introduction\nto D3. Introduction to\nTableau. | Cairo I, Ch. 3\nMurray Ch. 4,5 | Assignment 3. Critiquing vi-\nsualizations in news media.\nFind 2 different infograph-\nics on the same subject and\ncompare them using the vi-\nsualization wheel. What do\nthey do well, what do they\ndopoorly? Suggestimprove-\nments for the things they do\npoorly. Document in HTML. | Quiz 2\n\n\n\n\nWeek | Topic | Readings | Homework | Exam\nWeek 4\nSep. 14\nSep. 16 | Balancing function and es-\nthetics; minimalism; making\nvisualizations memorable;\ndesigning dashboards; D3\ndrawing with DIV and SVG;\nStyling graphic elements;\ncreating basic plots. | Cairo I, Ch. 4\nMurray Ch. 6 | Assignment 4. From World\nBank Open Data download\nRural population (% of total\npopulation) for 20 countries\nand a year of your choice.\nIn an HTML document, load\nthe data as CSV using D3.\nWith D3, using data joins,\ncreate an HTML table, and\nSVG bar chart, scatterplot,\nandbubblechart. Publishon\nyour USC SCF account. | Quiz 3\nWeek 5\nSep. 21\nSep. 23 | The eye and the visual brain;\nvisual queries; implications\nfor design; scales; using\nscales in scatter plot and\nbar charts; using scales with\naxes; rendering axes. | Ware Ch. 1\nCairo II, Ch. 5\nMurray Ch. 7,8 | Assignment 5. Create a pre-\nsentation with Sozi to pitch\nyour project. Pitch the\nprojects in a format similar\nto the PechaKucha presenta-\ntion format to show 15 im-\nages, each for 20 seconds.\nThe images advance auto-\nmatically and you talk along\nwith the images. You cannot\nuse bullet list in your slides. | Quiz 4\nWeek 6\nSep. 28\nSep. 30 | Project proposals presenta-\ntions. Lab. | Murray Ch. 7,8 | Assignment 6. Using the\ndata of Assignment 4, load\nthe data in JSON format,\nthen using D3 data joins,\npresent the data in as SVG\ntable, scatterplot, bar chart\nand slope graph. All plots\nshould use D3 scales and in-\nclude axes, axes labels, tick\nmarks, and tick mark labels\nas applicable. Publish on\nUSC SCF account. | \n\n\n\n\nWeek | Topic | Readings | Homework | Exam\nWeek 7\nOct. 5\nOct. 7 | Preattentive features. Updat-\ningD3visualizations;chang-\ningdataandupdatingthevi-\nsuals;smoothtransitionsand\nanimations. Updating the\naxes; adding and removing\ndata values. | Ware Ch. 2\nCairo II, Ch. 6\nMurray Ch.\n9,10,12\nHealey and\nJames, Atten-\ntion and visual\nmemory in\nvisualization\nand computer\ngraphics, IEEE\nTransactions on\nVisualization\nand Computer\nGraphics, 2012. | Assignment 7. Select 1 year\nfrom the dataset you created\nfor Assignment 1. Load the\ndatainJSONandimplement\na D3 bar chart complete\nwith axes, tick marks and\nlabels. Implement smooth\ntransitions based on user in-\nputtoreorderthebars: show\nall bars in alphabetic or-\nder (default), ascending or-\nder, descending order, top 5,\nbottom 5. Update the axes\nand legend as needed. | Quiz 5\nWeek 8\nOct. 12\nOct. 14 | Colors and color vision;\ntrichromatic theory; oppo-\nnent process theory; color\nchannels; color coding in-\nformation. Color models.\nEmphasis and highlighting;\ncolorsequences,semanticsof\ncolor. D3 color generators;\nD3 layouts. | Ware Ch. 4\nMurrayCh. 11,13\nCairo IV Profile\n1-5 | Assignment8. Usedatafrom\nAssignment 1 (one year 10\ncountries) to build a pro-\nportional symbol map and a\nchoropleth map with D3. | Quiz 6\nWeek 9\nOct. 19\nOct. 21 | Depth perception and cue\ntheory: different ways to\nperceive depth. 2.5D de-\nsign; showing data in maps;\nmap layers; map projec-\ntions; working with geospa-\ntial data. | Ware Ch. 5\nMurrayCh. 14,15\nCairo IV Profile\n6-10 | Assignment9. Usedatafrom\none of your assignments and\nimplement three layouts of\nyour choice using D3. | Quiz 7\nWeek10\nOct. 26\nOct. 28 | Statistics and statistical\ngraphics. Python and R\nbasics and major graphing\nlibraries, notebooks. Part I. | Wickham,\nHadley. \"gg-\nplot2.\" Wiley\nInterdisciplinary\nReviews: Com-\nputational Statis-\ntics, 2011. | Work on Project\nAssignment 10. Using\nPython notebook(s) do all\nthe exercises provided in\nclass. | Quiz 8\nWeek11\nNov. 2\nNov. 4 | PythonandRbasicsandma-\njor graphing libraries, note-\nbooks. Part II. | Murray Ch. 16\nWalk-Through &\nA. Case\nCairo III, Ch. 8,9 | Work on Project\nAssignment 11. Use Tableau,\nPython and R notebooks, to\nvisualize (a subset of) your\nproject data. | \n\n\n\n\nWeek | Topic | Readings | Homework | Exam\nNov. 9\nNov. 11\nWeek12 | Linking perception and ac-\ntion; the where pathway\nin our brains; how the\nbrain recognizes objects; the\npattern-processing machin-\nery; visual memory and at-\ntention; feature encoding;\nGestalt theory; semilolgy.\nLab on projects. | Ware Ch. 3\nCairo II, Ch. 7\nCairo IV, Profiles | Work on Project. | Quiz 9\nWeek13\nNov. 16\nNov. 18 | Course review.\nLab on projects. | Ware Ch. 6,7\nCairo IV, Profiles | Work on Project. | Quiz10\nWeek14\nNov. 23 | Project Presentations. |  |  | \nTBD | Final examination per University schedule – TBD, week of Dec 2-9 |  |  | \n\n\n"
        }
    },
    {
        "CSCI-577A": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis is the first of two courses in the Software Engineering sequence, which serves as the core of the Master\nof Science in Computer Science with a specialization in Software Engineering. CSCI-577a covers the complete\nsoftware development lifecycle, encompassing software planning, processes, requirements, architecture,\nproduct development, integration, testing, and maintenance.\nThe course is divided into two complementary parts, providing a comprehensive view of software engineering.\nDr. Eslamimehr will focus on the management aspects of software engineering, incorporating real-world\nindustry practices, while Dr. Bang will emphasize theoretical foundations with a focus on software architecture\ndesign.\nStudents will work in teams and are expected to apply quality management techniques to their projects. Each\nteam will develop an operational MVP, which includes requirements specifications, architectures, prototypes,\nlife cycle plans, and an integrating rationale for the proposed capabilities.\n1\nUSC CSCI-577a (Spring 2025) Syllabus\nAdditionally, student teams will be assigned cutting-edge research papers in software engineering. They are\nexpected to critically review and evaluate these papers, demonstrating the analytical skills required of\nresearchers and industry professionals when assessing new research.\nLecture Topics (Tentative)\nDr. Mahdi Eslamimehr: Software Engineering Management and Industry Practices\n● What causes the software to fail?\n○ History of software failures\n○ Enterprises vs. startups\n● Agile: state-of-industry\n● Evaluation metrics & management\n● Cloud nativeness\n● AI is a commodity now\nDr. Jae Young Bang: Software Engineering Theory\n● Introduction: “What is Software Engineering?”\n● Software engineering philosophy\n○ Software process models\n○ Value-based software engineering\n○ Affordability-based software engineering\n● Incremental commitment spiral model\n○ Exploration\n○ Valuation\n○ Foundations\n○ Development\n○ Operation\n● Agile\n○ Concepts\n○ Quality assurance\n○ Anti-patterns\n○ Verification and validation\n○ Scaling agile\n● Analysis and planning\n○ Risk analysis\n○ Feasibility analysis\n○ Software lifecycle plan\n○ Cost estimation\n○ Technical debt\n● Software architecture design\n○ “CSCI-578 in 90 minutes”\n○ Architecture-based software engineering\n● Prototyping UI/UX\n2",
            "Learning Objective": "",
            "Table Description": "Wk | Date | Instructor | Lecture Topic | Deliverables\n1 | Jan 13th | Jae | ● Course Logistics\n● Introduction: “What is\nSoftware Engineering?” | None\n2 | Jan 20th | (No lecture) MLK Day Holiday |  | Startup (Team Charter) formation and\nproject proposal\n3 | Jan 27th | Mahdi | ● What causes software to\nfail?\n○ History of\nsoftware failures\n○ Enterprise vs\nStartup | Project plan and backlog creation\n4 | Feb 3rd | Jae | ● Software engineering\nphilosophy\n● Incremental commitment\nspiral model\n● Agile | Sprint 1: Deliver prototype requirements\nand backlog\n5 | Feb 10th | Mahdi | ● Agile: State-of-Industry | Sprint 2: Risk analysis and feasibility report\n6 | Feb 17th | (No lecture) President’s Day Holiday |  | Sprint 3: Review and Git repository setup\n7 | Feb 24th | Jae | ● Analysis and planning\n● Software architecture\ndesign\n● Team Presentation #1 | Sprint 4: Architecture review and mockups\n8 | Mar 3rd | Mahdi | ● Evaluation Metrics &\nManagement | Sprint 5: Review and Git repository setup\n9 | Mar 10th | Jae | ● Prototyping UI/UX\n● Reviews and testing\n● DevOps\n● Team Presentation #2 | Sprint 6: First feature prototype delivery\n10 | Mar 17th | (No lecture) Spring Recess |  | \n11 | Mar 24th | Jae | ● Software maintenance\n● Software engineering\nbest practices\n● Exam #1 Preparation\n● Team Presentation #3 | None\n\n\n\n\n12 | Mar 31st | Exam #1 (Location and time TBD) |  | \n13 | Apr 7th | Mahdi | ● Cloud Nativeness | Sprint 7: Microservices\n14 | Apr 14th | Jae | ● Software ethics\n● Project management\n● Team Presentation #4 | None\n15 | Apr 21th | Mahdi | ● AI is a commodity now | MVP Delivery - D-Day\n16 | Apr 28th | Jae | ● Future of software\nengineering\n● Exam #2 Preparation\n● Team Presentation #5 | None\n17 | May 5th | (No lecture) Study week |  | \n18 | May 12th | Exam #2 (Location and time TBD) |  | \n\n\n"
        }
    },
    {
        "CSCI-531": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:",
            "Learning Objective": "At the end of the course, the students will achieve the following:",
            "Table Description": "Lectures | Topics | Readings\nLecture 1\n1/20 | Introduction, Attacks on crypto, Crypto history,\nOne time pad | HAC: 1.2, 1.4\nHAC: 1.13; CNS: 1.3,1.4\nLecture 2\n1/27 | Perfect secrecy, Stream ciphers, Semantic security | HAC: 1.5; CNS: 2.1,2.2\nCNS: 3.1, 3.2; 6.1\nLecture 3\n2/3 | Block ciphers, DES, Attacks on block ciphers, AES | CNS: 3.4, 5.2\nCNS: 6.2\nQuiz 1\nLecture 4\n2/10 | Using block ciphers, EBC, CBC, CTR | CNS: 6.3, 6.6\nCNS: 12.1-12.4\nLecture 5\n2/17 | Message integrity, MAC, Collision resistance | HAC: 9.2\nCNS: 2.7\nLecture 6\n2/24 | Authenticated encryption | CNS: 4.1-4.5\nQuiz 2\nLecture 7 | Basic key exchange, Number theory review, Public | CNS: 9.1, 9.2\n\n\n\n\n3/3 | key crypto intro, RSA, El Gamal | CNS: 10.2\nLecture 8\n3/10 | Key management and distribution, Digital\nsignatures, Digital certificates, PKI, Identity based\nencryption | CNS: 13.1-13.5\nCNS: 14.1-14.3\nCNS: 14.4,14.5\nIdCrypto\n3/17 | Midterm\nTopic TBD | \nLecture 9\n3/24 | Identification and authentication, Zero knowledge\nprotocols, Kerberos, Electronic mail security | CNS: 15.1-15.4\nCNS: 19.1\nQuiz 3\nLecture 10\n3/31 | Web and transport level security,\nIP security, Wireless network security | CNS: 17\nCNS: 18, 20.1, 20.2\n4/7 | No lecture, University Wellness day | \nLecture 11\n4/14 | Anonymous communication, TOR,\nCryptocurrencies, Bitcoin | AnCom, TOR\nLecture 12\n4/21 | Hardware–based security, Physically Unclonable\nFunction, Trusted Platform Module | PUF\nQuiz 4\nLecture 13\n4/28 | Quantum cryptography,\nCourse review | Quantum\nFinal Exam | May 10, 2-4 p.m. | \n\n\n"
        }
    },
    {
        "DSCI-556": {
            "Course Description": "Catalogue Course Description:\n:\nThe practice of User Experience Design and Strategy principles for the creation of unique\nand compelling digital products and services.\n\nExpanded Course Description:\nExpanded Course Description:\nDesigners, product managers/owners, engineers and entrepreneurs must work\ncollaboratively to create innovative and compelling user-centered products and services.\nThe process of developing a shared vision of a product’s value proposition requires an\nopen mind to experimentation and failure. User Experience Design and Strategy are\npractices that, when conducted empirically, are a better guarantee of a successful digital\nproduct than just writing a bunch of code and crossing your fingers.\nThis course is a combination of contemporary methodologies culled from several\ndisciplines including user research, interaction design, and business strategy. Topics will\ninclude: competitive analysis and identification of marketplace opportunities, value\n1\nFOR REFERENCE ONLY: SUBJECT TO CHANGE FOR FUTURE SEMESTERS\ninnovation, rapid prototyping, customer discovery, and designing for conversion using\nmetrics. By the conclusion of the course each student should be equipped with a strategic\nmethod to quickly and effectively launch a product or service online.\nRecommended Course/Prep:\nStudents should have a basic familiarity with web development and/or graphic design\nusing a digital layout tool. However, you can easily pick up these skills by allowing\nyourself extra time to do the assignments and by paying close attention to the homework\ncritiques in class.\nThis course is foundational and appropriate for students with backgrounds in a wide\nvariety of fields, including any engineering discipline, and other fields including\nbusiness, cinematic arts, communications, and design.\nYou will need to have a total cash budget of approximately $150 to either compensate\nresearch participants or for running online ad campaigns in order to do some of the\nhomework assignments.",
            "Learning Objective": ":\nThecourse objectives are to provide:\n● An overview of the discipline of user experience design including an introduction\nto the principles of information architecture, interaction design, and user research\n● An understanding of how to conduct strategy informed by both traditional and\ncontemporary business approaches such as “Blue Ocean Strategy” and “Lean\nStartup”\n● An understanding of how to validate your assumptions about your end-user’s\nneeds through customer discovery techniques, user interviews and design\nexperiments\n● A comprehensive view of the necessary tools and techniques to enact a successful\nUser Experience strategy for a digital product through hands-on weekly\nassignments and class critiques\n● The analytical abilities required for students to be able to confidently articulate\ntheir impressions of technological advancements that affect how people\ncommunicate, shop, earn money, and entertain themselves using digital products\nand services\nMethods of Teaching/Class Rules:\nEach class will include weekly lecture(s), homework critiques/peer reviews, and in-class\n2",
            "Table Description": "| Topics/Activities | Readings & Homework | Homework Due\nWk 1\n8/23 | Review of syllabus. Class introductions. Intro to UX and\nDesign Process. | Reading:UXS Ch 1 & 2\nHW 1:10 Principles + Write 3 ProblemStatements and\n5 Whys | \nWk 2\n8/30 | Customer Discovery: Empathy Maps and Provisional Personas | Reading:UXS Ch 2 & 3\nHW 2:Empathy Map,Provisional Persona | HW 1\nWk 3\n9/6 | HOLIDAY- LABOR DAY\nInitial Value Proposition andCustomer Discovery(lecture\nvideo and supporting materials will be provided via\nBlackboard) | Reading:UXS Ch 3\nHW 3: Initial Value Proposition,Customer Discovery\nPlan-of-Action. | HW 2\nWk 4\n9/13 | Customer Discovery Interviews and Findings Slides | Reading:UXS Ch 4\nHW 4:Conduct and DocumentDiscovery Interviews +\nCreate Findings Slides | HW 3\nWk 5\n9/20 | Heuristic Evaluation, Conducting Competitive Research | Reading:UXS Ch 4+5\nHW 5:Reassess Value Prop, Conduct Competitive\nResearch | HW 4\nWk 6\n9/27 | Competitive Analysis: Benchmarking + SWOT Analysis +\nFindings Brief, Feature Prioritization | Reading:UXS Ch 5\nHW 6:Conduct Competitive Analysis + Create Findings | HW 5\n\n\n\n\n |  | Brief | \nWk 7\n10/4 | Designing Key Experiences: Developing Scenarios and\nStoryboarding Value Innovation | Reading:UXS Ch 6\nHW 7:Create Scenario Maps and Storyboard Key\nFeatures | HW 6\nWk 8\n10/11 | Designing Key Experiences: Prototyping for Value Proposition\nValidation | Reading:UXS Ch 7\nHW 8:Create a Prototype for Testing the Value\nInnovation and Business Model | HW 7\nWk 9\n10/18 | Online User Research: Planning Phase + The Experiment\nDesign Tool. Prototype share. | Reading:UXS Ch 7+8\nHW 9:Refine prototype. Online User Research:\nPlanning Phase(Determine hypotheses, Interview prep,\nRecruit participants) | HW 8\nWk 10\n10/25 | Online User Research: Conducting and Analyzing + Pilot\nStudy. | Reading:UXS Ch 8\nHW 10:Conduct and Analyze Online Research Study | HW 9\nWk 11\n11/1 | Business Model Canvas. Online User Research: Findings Brief. | Reading:UXS Ch 8\nHW 11:Business Model Canvas (v1.0). Create a\nFindings Brief (including updated prototype screens). | HW 10\nWk 12\n11/8 | Design for Conversion: Landing Page Experiment and Ad\nCampaign (Experiment 1) | Reading:UXS Ch 9\nHW 12:Create Landing Page and Run Ad Campaign\n(Experiment 1) | HW 11\nWk 13\n11/15 | Share Experiment 1 results. Finalize Landing Pages and Run\nFinal Facebook Campaign (Experiment 2). Lean Canvas and\nBusiness Model Canvas (v2.0) | Reading:UXS Ch 9\nHW 13:Run Split-test Online Ad Campaign to Two\nSegments. (Experiment 2). Create Conversion Findings\nBrief. Lean Canvas. | HW 12\nWk 14\n11/22 | Present Design for Conversion Findings Briefs. Design Ethics\nand Values. End of class survey. | Reading:UXS Ch 10\nHW:Create Final Presentation and Case Study. | HW 13\nWk 15\n11/29 | Final Presentations and Peer Feedback. | HW:Create Final Presentation and Case Study. | -\nWk 16\n12/6 | NO CLASS - STUDY DAYS | HW:Create Final Presentation and Case Study. | -\nWk 17\n12/13 | Final Presentations and Peer Feedback. Submit Final Project\nCase Study. |  | Submit Final\nProject Case Study"
        }
    },
    {
        "DSCI-351": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nCatalog:\nData management course focused on data modeling, data storage, indexing, relational\ndatabases, key-value/document store, NoSQL, distributed file system, parallel computation,\nand big-data analytics.\nExtended:\nThis course provide students with the fundamental knowledge and key skills for managing\nlarge-scale diverse data. After taking INF 351, students will have solid knowledge of data\nmodeling, data formats, and query languages; basic understanding of relational and NoSQL\ndatabases; and exposure to systems and techniques for managing and analyzing large-scale\ndata.\nMajor topics in INF 351 are as follows: (a) Fundamentals of data management: conceptual\ndata modeling, relational data model, and JSON; data storage, data organization, indexing,\nand relational databases; structured query languages such as SQL. (b) Management of non-\nrelational data: document stores such as MongoDB, and row stores such as Amazon\nDynamoDB. (c) Systems and techniques for managing and analyzing large-scale data:\ndistributed file system such as HDFS, MapReduce parallel computation framework, and big\ndata software such as Apache Hadoop and Spark.\nB. Prerequisites: INF 250: Introduction to Data Informatics; ITP 115: Programming in Python\nC. Course Notes\nThe course will be run as a lecture class with student participation strongly encouraged. There\nare weekly readings and students are encouraged to finish the readings prior to the discussion\nin class. All of the course materials, including the readings, lecture slides, homework, and\nprogramming assignments will be posted online. We will be using Blackboard this semester.\nD. Technological Proficiency and Hardware/Software Required\nStudents are expected to know how to program in a language such as Python or Java.\nStudents are also expected to have their own laptop or desktop computer where they can\ninstall and run software to do the weekly homework assignments.\nE. Recommended Readings and Supplementary Materials\n• [GUW] Hector Garcia-Molina, Jeffrey D. Ullman, and Jennifer Widom. Database\nSystems: The Complete Book (Second Edition), Prentice Hall, 2009 (selected chapters\nonly, see schedule below). Book web site:\nhttp://infolab.stanford.edu/~ullman/dscb.html\nIn addition to the textbook, students may be given additional reading materials. Students are\nresponsible for all reading assignments.\nF. Course Structure\nHomework Assignments\nThere will be 6 homework/programing assignments on major topics of the course.\nAssignments must be completed independently. Each assignment is typically graded on a\nscale of 0-100 and grading rubric for each assignment will be provided.\nQuizzes: There will be weekly quizzes, based on last week’s materials (unless announced\notherwise).\nExams: There will be a midterm exam and a final exam. Closed-notes and book. The final\nexam will cover the materials after the midterm.\nClass Participation: Students are expected to come to class and participate in the class\ndiscussions. There will also be online forums (usually on Blackboard) created to facilitate out-\nof-class discussions of class materials.\nProject: Students are also expected to complete a term project on managing data for data\nscience.\nGrading Scheme:\nQuizzes 10%\nHomework 30%\nMidterm 20%\nFinal 30%\nProject 10%\n-----------------------------------------\nTotal 100%\nGrades will range from A through F. The following is the breakdown for grading:\n[93, 100] = A [73, 76) = C\n[90, 93) = A- [70, 73) = C-\n[87, 90) = B+ [67, 70) = D+\n[83, 87) = B [63, 67) = D",
            "Learning Objective": "",
            "Table Description": "Week | Topic | Readings | Handon | Homework\n1\n( 1/18) | • Introduction\n• Amazon EC2\n• No class on Monday\n(1/18, Martin Luther\nKing’s Birthday) |  |  | \n2\n( 1/25) | • Data modeling I: ER &\ndesign principles | • [GUW] Sec. 4.1-4.6 | • Set up EC2\ninstance | HW1 out\n3\n( 2/1) | • Data modeling II:\nRelational | • [GUW] Sec. 2 |  | HW1 in\n4\n( 2/8) | • SQL I: single-relation\nquery | • [GUW] Sec. 2.3, 6.1-6.5 | • Install & run\nMySQL on EC2 | HW2 out\n5\n( 2/15) | • SQL II: join, subquery,\naggregation\n• No class on Monday\n(2/15, President’s day) |  |  | HW2 in\n6\n( 2/22) | • Constraints & Views | • [GUW] Sec. 7.1-7.2, 8,1 |  | HW3 out\n7\n(3/1) | • External sorting\n• Midterm |  |  | HW3 in\n8\n(3/8) | • Indexing: B+-tree\n• Query execution:\noverview\n• Project proposal due | • [GUW] Sec. 14.1‐14.2 |  | HW4 out\n\n\n\n\n |  |  |  | \n9\n(3/15) | • NoSQL1: MongoDB &\nJSON | • R. Cattell, \"Scalable SQL\nand NoSQL data stores,\"\nACM SIGMOD Record, vol.\n39, pp. 12-27, 2011. | • Install & run\nMongoDB on\nEC2 | HW4 in\n10\n(3/22) | • NoSQL2: Amazon\nDynamoDB & row\nstore\n• Project progress\nreport due | • G. DeCandia, D. Hastorun,\nM. Jampani, G. Kakulapati,\nA. Lakshman, A. Pilchin, S.\nSivasubramanian, P.\nVosshall, and W. Vogels,\n\"Dynamo: amazon's highly\navailable key-value store,\"\nin SOSP, 2007, pp. 205- | • DynamoDB:\nsetup and\nquerying | HW5 out\n11\n(3/29) | • BigData 1: Hadoop\nMapReduce | • J. Dean and S. Ghemawat,\nMapReduce: simplified\ndata processing on large\nclusters,\" Communications\nof the ACM, vol. 51, pp.\n107-113, 2008. | • Install & run\nHadoop on EC2 | HW5 in\n12\n(4/5) | • BigData 1: Hadoop\nMapReduce\n• No class on 4/7\n(Wellness day) | • Zaharia, Matei and\nChowdhury, Mosharaf and\nFranklin, Michael J. and\nShenker, Scott and Stoica,\nIon. Spark: cluster\ncomputing with working\nsets. HotCloud, 2010.\n• Resilient Distributed\nDatasets: A Fault-Tolerant\nAbstraction for In-Memory\nCluster Computing, Matei\nZaharia, et. al., NSDI,\n2012. | • Install & run\nSpark on EC2 | HW6 out\n13\n(4/12) | • Big data2: Apache\nSpark |  |  | \n14\n(4/19) | • Big data2: Apache\nSpark\n• Final review |  |  | HW6 in\n15\n(4/26) | • Project demo & final\nreport due |  |  | \nFinal\nexam | May 10, Monday, 8-\n10am |  |  | \n\n\n"
        }
    },
    {
        "CSCI-534": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\ns the theory of\nhuman emotion (how it arises from and influences cognition, the body, and the social environment),\ntechniques for recognizing and synthesizing emotional behavior, and illustrates how these can be applied\nto application design. The course is suitable for non-computer science students with some familiarity with\ncomputational methods. Students will gain a strong background in theory and practice in human---\ncentered computing as it relates to decision-making, health, entertainment and pedagogy.\nInstructor: Jonathan Gratch\nTA: James Hale <jahale@usc.edu)\nDate/Time: Mon, Wed 2:00---3:50p (DMC 156); “office” hours, Thur 230-330\nPiazza: https://piazza.com/usc/spring2025/csci534\nGrades: Grades determined by class participation 10%, mid---term project presentation 15%,\nhomework 40%, final project presentation. 15%, final project writeup 20%\nSee Late homework policy. See Policy on the use of GenAI\nClass participation is expected and part of the grade. Lectures frequently involve participatory demonstrations\nand exercises. Thus, students are expected to attend class and participate in in-class activities. Lectures are\nnot recorded. You will lose participation grade if you miss these exercises unless you inform me in advance.\nThe course is project-based. Students are expected to work in teams (of approximately 5 students) to develop,\nexecute, and present a research project. Students are encouraged to build upon existing tools. A list of some\npre-existing software tools available to students and summaries of some prior student projects built with\nthese tools can be found HERE. Project guidelines can be found HERE.\nSource book: Oxford Handbook of Affective Computing (OHAC): useful but becoming dated.\nOther useful books: ACM Handbook on Social Agents (AHSIA); Oxford Handbook on Affective Science and\nACM’s Applied Affective Computing\nSoftware: Students will gain knowledge and/or hands---on experience with the following software tools related\nto affective computing including:\n• Emotion Recognition Techniques\n• Emotion Synthesis Techniques\n• Cognitive and Emotional Modeling\n• Algorithms and tools that support the above methods\n• Human-subjects experimental design and analysis\n• Ethical issues in AI\nNote to Instructors: Other instructors are welcome to use these course materials. Please acknowledge the\noriginal source in footer of slides. Note some slides have been borrowed from other instructors as noted in the\nfooters of presentation material.\n© Jonathan Gratch, University of Southern California\nCourse Outline\n(WARNING: This may change throughout the semester). Most current version will be HERE. Don’t get more than 1\nweek ahead on readings. The same topics will be presented but changes to reading lists and homework may occur.)\nLecture 1 (Mon, Jan 13) Course Overview. Introduction to Affective Computing\n• Review the structure of the course\n• What is affective computing? Overview of applications\n• Broadly overview functions of affect and why of interest to computer science\n• Discussion of Ethics / AI Act\n• Homework 1: Emotion prediction (all homework will be posted on brightspace): Estimated time, 30-40 min,\nDue Wed, Jan 15th, 11:59p (encouraged to complete before Lecture 2)\n• Readings:\nGratch 2021: The field of Affective Computing: An Interdisciplinary Perspective\no\n• Optional background readings:\nOHAC, Chapter 1. Summarizes major topics in affective computing\no\nThe rise of affectivism. article illustrating the growing importance of affective science\no\nTutorial on the EU’s AI Act and consequences for affective computing\no\n• Lecture slides\nLecture 2 (Wed, Jan 15) Emotion Theory:\n• Define affective phenomena (emotion, mood, attitude/sentiment, personality)\n• What is emotion theory and why does it matter? Review alternative theories\n• Homework 2 (part 1): Short appraisal experiment (Due Thur, Jan 16th,11:59pm): Estimated time, <10minutes\n• Suggested Reading:\nOHAC, Chap 3. Short history of psychological perspectives on emotion\no\n• Optional reading:\nThe science of ‘Inside Out’: Short piece by Dacher Keltner and Paul Ekman about the Pixar movie\no\n• Lecture slides\nMartin Luther King’s Birthday (Mon, Jan 20th)\nPART I: EMOTION ELICITATION\nLecture 3 (Wed, Jan 22) Theories of emotion elicitation (what triggers emotion?)\n• Discuss theories of what causes emotion in people\n• Appraisal theories, Constructivist theories\n• Homework 2 (part 2): Appraisal modeling (Due Jan 27th, 11:59pm)\n• Suggested Reading\nOHAC, Chap 5. Discussion of appraisal theory and its influence over computational models.\no\n• Lecture slides\nLecture 4 (Mon, Jan 27) Models of emotion elicitation I\n• Discuss computational approaches to predict and model emotion elicitation\n• Suggested Reading:\nMarsella and Gratch (2009), sections 1.1, 1.2, 2 and 3: describes model of “the Bird”\no\n• Optional reading:\nEmotional Calculator: a short description of how the Emotion Calculator (HW1) was created\no\nEmotion Profiler: a published paper describing how the emotion profiler works (here they call it the\no\n“Emotion Analyst” but it is the same thing).\n© Jonathan Gratch, University of Southern California",
            "Learning Objective": ":\nThis course provides a comprehensive and interdisciplinary introduction to Affective Computing: i.e.,\ncomputing that relates to, arises from, or deliberately influences emotions. It overviews the theory of\nhuman emotion (how it arises from and influences cognition, the body, and the social environment),\ntechniques for recognizing and synthesizing emotional behavior, and illustrates how these can be applied\nto application design. The course is suitable for non-computer science students with some familiarity with\ncomputational methods. Students will gain a strong background in theory and practice in human---\ncentered computing as it relates to decision-making, health, entertainment and pedagogy.\nInstructor: Jonathan Gratch\nTA: James Hale <jahale@usc.edu)\nDate/Time: Mon, Wed 2:00---3:50p (DMC 156); “office” hours, Thur 230-330\nPiazza: https://piazza.com/usc/spring2025/csci534\nGrades: Grades determined by class participation 10%, mid---term project presentation 15%,\nhomework 40%, final project presentation. 15%, final project writeup 20%\nSee Late homework policy. See Policy on the use of GenAI\nClass participation is expected and part of the grade. Lectures frequently involve participatory demonstrations\nand exercises. Thus, students are expected to attend class and participate in in-class activities. Lectures are\nnot recorded. You will lose participation grade if you miss these exercises unless you inform me in advance.\nThe course is project-based. Students are expected to work in teams (of approximately 5 students) to develop,\nexecute, and present a research project. Students are encouraged to build upon existing tools. A list of some\npre-existing software tools available to students and summaries of some prior student projects built with\nthese tools can be found HERE. Project guidelines can be found HERE.\nSource book: Oxford Handbook of Affective Computing (OHAC): useful but becoming dated.\nOther useful books: ACM Handbook on Social Agents (AHSIA); Oxford Handbook on Affective Science and\nACM’s Applied Affective Computing\nSoftware: Students will gain knowledge and/or hands---on experience with the following software tools related\nto affective computing including:\n• Emotion Recognition Techniques\n• Emotion Synthesis Techniques\n• Cognitive and Emotional Modeling\n• Algorithms and tools that support the above methods\n• Human-subjects experimental design and analysis\n• Ethical issues in AI\nNote to Instructors: Other instructors are welcome to use these course materials. Please acknowledge the\noriginal source in footer of slides. Note some slides have been borrowed from other instructors as noted in the\nfooters of presentation material.\n© Jonathan Gratch, University of Southern California\nCourse Outline\n(WARNING: This may change throughout the semester). Most current version will be HERE. Don’t get more than 1\nweek ahead on readings. The same topics will be presented but changes to reading lists and homework may occur.)\nLecture 1 (Mon, Jan 13) Course Overview. Introduction to Affective Computing\n• Review the structure of the course\n• What is affective computing? Overview of applications\n• Broadly overview functions of affect and why of interest to computer science\n• Discussion of Ethics / AI Act\n• Homework 1: Emotion prediction (all homework will be posted on brightspace): Estimated time, 30-40 min,\nDue Wed, Jan 15th, 11:59p (encouraged to complete before Lecture 2)\n• Readings:\nGratch 2021: The field of Affective Computing: An Interdisciplinary Perspective\no\n• Optional background readings:\nOHAC, Chapter 1. Summarizes major topics in affective computing\no\nThe rise of affectivism. article illustrating the growing importance of affective science\no\nTutorial on the EU’s AI Act and consequences for affective computing\no\n• Lecture slides\nLecture 2 (Wed, Jan 15) Emotion Theory:\n• Define affective phenomena (emotion, mood, attitude/sentiment, personality)\n• What is emotion theory and why does it matter? Review alternative theories\n• Homework 2 (part 1): Short appraisal experiment (Due Thur, Jan 16th,11:59pm): Estimated time, <10minutes\n• Suggested Reading:\nOHAC, Chap 3. Short history of psychological perspectives on emotion\no\n• Optional reading:\nThe science of ‘Inside Out’: Short piece by Dacher Keltner and Paul Ekman about the Pixar movie\no\n• Lecture slides\nMartin Luther King’s Birthday (Mon, Jan 20th)\nPART I: EMOTION ELICITATION\nLecture 3 (Wed, Jan 22) Theories of emotion elicitation (what triggers emotion?)\n• Discuss theories of what causes emotion in people\n• Appraisal theories, Constructivist theories\n• Homework 2 (part 2): Appraisal modeling (Due Jan 27th, 11:59pm)\n• Suggested Reading\nOHAC, Chap 5. Discussion of appraisal theory and its influence over computational models.\no\n• Lecture slides\nLecture 4 (Mon, Jan 27) Models of emotion elicitation I\n• Discuss computational approaches to predict and model emotion elicitation\n• Suggested Reading:\nMarsella and Gratch (2009), sections 1.1, 1.2, 2 and 3: describes model of “the Bird”\no\n• Optional reading:\nEmotional Calculator: a short description of how the Emotion Calculator (HW1) was created\no\nEmotion Profiler: a published paper describing how the emotion profiler works (here they call it the\no\n“Emotion Analyst” but it is the same thing).\n© Jonathan Gratch, University of Southern California",
            "Table Description": ""
        }
    },
    {
        "CSCI-520": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nTA: Mianlun Zheng This course introduces students to computer animation and related simulation\nInstructor: Jernej Barbic Office: online on techniques, as applicable to computer games, virtual reality systems, and film special\nOffice: online on Zoom Zoom effects. Efficient numerical methods for simulating a variety of visually interesting\nOffice hours: Wednesday 4:00 Office hours: Tue 3- physical phenomena will be discussed in the context of both interactive and offline\n- 5:00 5pm simulation. Topics include deformable objects (solids, cloth), fluids, character rigging,\nEmail: jnb@usc.edu Email: quaternions, inverse kinematics, motion capture, sound simulation, collision detection,\nmianlunz@usc.edu haptics, rigid body dynamics, and GPU programming.\nGrader: TBA\nSchedule | Prerequisites | Readings | Assignments | Grading | Class participation | Academic Integrity\nDate Topic Reading, slides, and other material Notes\nMon Jan\nNo class (Martin Luther King Day)\n18 2021\nOverview of computer animation and\nsimulation\nWed Jan\nCourse slides\n20\nMon Jan Overview of computer animation and\n25 simulation\nD. Baraff and A. Witkin:\nWed Jan Primer on numerical simulation and\n27 linear algebra for graphics\nPhysically Based Modeling, course notes, SIGGRAPH 2001\nHelper slides for hw1 (jello cube) | 6X-BW\nOpenGL \"Hello world\" application (with GLUT) Makefile (Mac OS X)\nMon Feb 1\nOpenGL Red Book, Chapters 1-3 | CMU slides on OpenGL | CMU slides on\nOpenGL shading | CMU slides on texture mapping\nOpenGL Red Book, Chapters 4 (Color), 5 (Lighting), 9 (Texture Mapping)\nhttp://barbic.usc.edu/cs520-s21/ Page 1 of 5\nCSCI 520 Computer Animation and Simulation 11/29/20, 10:05 PM\nStructured deformable objects: cloth\nSlides (thanks to Andy Pierce, USC REU)\nAssignment\nWed Feb 3\n1 out\nD. Baraff and A. Witkin: Large steps in cloth simulation, SIGGRAPH 1998\nStructured deformable objects: FEM\nM. Mueller and M. Gros: Interactive virtual materials, Graphics Interface 2004\nJ. Barbic: Real-time Reduced Large-Deformation Models and Distributed Contact\nfor Computer Graphics and Haptics , PhD thesis, 2007 (pages 33-42)\nMon Feb 8\nM. Mueller and co-organizers: Real-time physics, course notes, SIGGRAPH 2008\n(pages 43-51)\nS. Capell, S. Green, B. Curless, T. Duchamp, Z. Popovic: Interactive Skeleton-\nDriven Dynamic Deformations, SIGGRAPH 2002\nRigid body dynamics\nWed Feb D. Baraff and A. Witkin: Physically Based Modeling, course notes (the chapter on\n10 Rigid Body Dynamics), SIGGRAPH 2001\nMon Feb\nNo class (President's Day)\n15\nKeyframe Animation\nWed Feb\nLecture slides\n17\nMotion capture slides\nMotion capture\nJessica Hodgins's slides on motion capture\nMon Feb\nJ. Lee, J. Chai, P. Reitsma, J. Hodgins, N. Pollard: Interactive Control of Avatars\n22\nAnimated with Human Motion Data, SIGGRAPH 2002\nJ. Barbic, A. Safonova, J. Pan, C. Faloutsos, J. Hodgins, N. Pollard: Segmenting\nMotion Capture Data into Distinct Behaviors, Graphics Interface, 2004\nQuaternions\nCourse slides | version for printing\nAssignment\nKen Shoemake: Animating rotation with quaternion curves, SIGGRAPH 1985\nWed Feb 1 due\n24 Assignment\nAlan H. Barr, Bena Currin, Steven Gabriel, John F. Hughes: Smooth interpolation\n2 out\nof orientations with angular velocity constraints using quaternions, SIGGRAPH\n1992\nInverse Kinematics\nRick Parent's slides on Inverse Kinematics\nMon Mar\n1 Chris Welman: Inverse Kinematics and Geometric Constraints for Articulated\nFigure Manipulation, M.S. Thesis, Simon Fraser University, 1993\nCharacter Rigging\nLadislav Kavan, Steven Collins, Jiří Žára, Carol O’Sullivan: Geometric Skinning\nWed Mar 3 with Approximate Dual Quaternion Blending, ACM Transaction on Graphics,\n27(4), 2008\nFacial Animation Ming Lin's course slides on facial animation Digital Emily video Video on\nhttp://barbic.usc.edu/cs520-s21/ Page 2 of 5",
            "Learning Objective": "",
            "Table Description": "Date | Topic | Reading, slides, and other material | Notes\nMon Jan\n18 2021 | No class (Martin Luther King Day) |  | \nWed Jan\n20 | Overview of computer animation and\nsimulation | Course slides | \nMon Jan\n25 | Overview of computer animation and\nsimulation |  | \nWed Jan\n27 | Primer on numerical simulation and\nlinear algebra for graphics | D. Baraff and A. Witkin:\nPhysically Based Modeling, course notes, SIGGRAPH 2001 | \nMon Feb 1 |  | Helper slides for hw1 (jello cube) | 6X-BW\nOpenGL \"Hello world\" application (with GLUT) Makefile (Mac OS X)\nOpenGL Red Book, Chapters 1-3 | CMU slides on OpenGL | CMU slides on\nOpenGL shading | CMU slides on texture mapping\nOpenGL Red Book, Chapters 4 (Color), 5 (Lighting), 9 (Texture Mapping) | \n |  |  | \np://barbic.us | c.edu/cs520-s21/ |  | Page 1 o\n |  |  | \n\n\n\n\n | CI 520 Computer Animation and Simulation 11/29/20, 10:05 P |  |  |  | \n |  |  |  |  | \n | Wed Feb 3 | Structured deformable objects: cloth | Slides (thanks to Andy Pierce, USC REU)\nD. Baraff and A. Witkin: Large steps in cloth simulation, SIGGRAPH 1998 | Assignment\n1 out | \n | Mon Feb 8 | Structured deformable objects: FEM | M. Mueller and M. Gros: Interactive virtual materials, Graphics Interface 2004\nJ. Barbic: Real-time Reduced Large-Deformation Models and Distributed Contact\nfor Computer Graphics and Haptics , PhD thesis, 2007 (pages 33-42)\nM. Mueller and co-organizers: Real-time physics, course notes, SIGGRAPH 2008\n(pages 43-51)\nS. Capell, S. Green, B. Curless, T. Duchamp, Z. Popovic: Interactive Skeleton-\nDriven Dynamic Deformations, SIGGRAPH 2002 |  | \n | Wed Feb\n10 | Rigid body dynamics | D. Baraff and A. Witkin: Physically Based Modeling, course notes (the chapter on\nRigid Body Dynamics), SIGGRAPH 2001 |  | \n | Mon Feb\n15 | No class (President's Day) |  |  | \n | Wed Feb\n17 | Keyframe Animation | Lecture slides |  | \n | Mon Feb\n22 | Motion capture | Motion capture slides\nJessica Hodgins's slides on motion capture\nJ. Lee, J. Chai, P. Reitsma, J. Hodgins, N. Pollard: Interactive Control of Avatars\nAnimated with Human Motion Data, SIGGRAPH 2002\nJ. Barbic, A. Safonova, J. Pan, C. Faloutsos, J. Hodgins, N. Pollard: Segmenting\nMotion Capture Data into Distinct Behaviors, Graphics Interface, 2004 |  | \n | Wed Feb\n24 | Quaternions | Course slides | version for printing\nKen Shoemake: Animating rotation with quaternion curves, SIGGRAPH 1985\nAlan H. Barr, Bena Currin, Steven Gabriel, John F. Hughes: Smooth interpolation\nof orientations with angular velocity constraints using quaternions, SIGGRAPH\n1992 | Assignment\n1 due\nAssignment\n2 out | \n | Mon Mar\n1 | Inverse Kinematics | Rick Parent's slides on Inverse Kinematics\nChris Welman: Inverse Kinematics and Geometric Constraints for Articulated\nFigure Manipulation, M.S. Thesis, Simon Fraser University, 1993 |  | \n | Wed Mar 3 | Character Rigging | Ladislav Kavan, Steven Collins, Jiří Žára, Carol O’Sullivan: Geometric Skinning\nwith Approximate Dual Quaternion Blending, ACM Transaction on Graphics,\n27(4), 2008 |  | \n |  | Facial Animation | Ming Lin's course slides on facial animation Digital Emily video Video on |  | \n | tp://barbic.us | c.edu/cs520-s21/ |  | Page 2 o | \n |  |  |  |  | \n\n\n\n\n |  |  |  |  | \n | CI 520 Com | puter Animation and Simulation | 11/ | 29/20, 10:05 P | \n | Mon Mar\n8 |  | paired muscles\nJun-yong Noh, Ulrich Neumann: A Survey of Facial Modeling and Animation\nTechniques, University of Southern California\nE. Sifakis, I. Neverov and R. Fedkiw: Automatic Determination of Facial Muscle\nActivations from Sparse Motion Capture Marker Data, SIGGRAPH 2005 |  | \n | Wed Mar\n10 | Crowd Animation | Craig W. Reynolds: Flocks, herds and schools: A distributed behavioral model,\nSIGGRAPH 1987.\nSIGGRAPH 1997 course notes A pseudocode implementation\nMatt Anderson, Eric McDaniel and Stephen Chenney: Constrained Animation of\nFlocks, Symposium on Computer Animation 2003\nCrowd research at UNC\nCourse slides on crowd animation, Ohio State University |  | \n | Fri Mar 12 | Wellness day |  |  | \n | Mon Mar\n15 | Maya | Maya tutorials at Lynda.com (free of charge access for USC students).\nAutodesk: The Art of Maya\nThe Maya scene used in class. |  | \n | Wed Mar\n17 | Maya |  | Assignment\n2 due | \n | Mon Mar\n22 | Constraints and contact | D. Baraff and A. Witkin: Physically Based Modeling, course notes (the chapters\n\"Constrained Dynamics\" and \"Collision and Contact\"), SIGGRAPH 2001 |  | \n | Tue Mar\n23 | Wellness day |  |  | \n | Wed Mar\n24 | Inverse Kinematics homework (theory\nand implementation) | Eigen example 1 Eigen example 2 Eigen example 3 | Assignment\n3 out | \n | Mon Mar\n29 | Catch-up day |  |  | \n | Wed Mar\n31 | Collision detection | Ming Lin's course slides on collision detection | PDF Collision detection at\nUNC, Chapel Hill\nMing Lin's course slides on bounding volume hierarchies and spatial partitioning |\nPDF\nS. Gottschalk, M. Lin, D. Manocha: OBB-Tree: A Hierarchical Structure for\nRapid Interference Detection, SIGGRAPH 1996\nS. Quinlan: Efficient Distance Computation between Non-Convex Objects, ICRA\n1994 |  | \n | Mon Apr 5 | Catch-up day |  |  | \n | Wed Apr 7 | Wellness day |  |  | \n | Mon Apr\n12 | Haptics | F. Conti's haptics slides: Introduction to Haptics\nK. Salisbury and F. Conti: Haptic Rendering: Introductory Concepts, IEEE\nComputer Graphics, 2004 (a survey)\nM. Lin and M. Otaduy: Recent Advances in Haptic Rendering & Applications,\nSIGGRAPH 2005 Course Notes\nJ. Barbic and D. James: Six-DoF Haptic Rendering of Contact between\nGeometrically Complex Reduced Deformable Models, IEEE Transactions on\nHaptics 2008 |  | \n | Wed Apr |  |  | Assignment | \n |  |  |  |  | \n | tp://barbic.usc.edu/cs520-s21/ Page 3 o |  |  |  | \n\n\n\n\nCI 520 Computer Animation and Simulation 11/29/20, 10:05 P |  |  | \n |  |  | \n14 | Guest lecture: TBA |  | 3 due\nFri Apr 16 | Background reading: Sound\nsimulation | J. O'Brien, C. Shen, and C. Gatchalian: Synthesizing Sounds from Rigid-Body\nSimulations, SCA 2002 | \nMon Apr\n19 | Fluids (Navier-Stokes) | J. Stam: Stable Fluids, SIGGRAPH 1999\nStable Fluids presentation | \nWed Apr\n21 | Simulation on programmable graphics\nhardware (CUDA) | Nvidia's CUDA\nTrefftz and Wolffe: Tutorial on CUDA | (modified version; used in class)\nOpenCL\nJ. Georgii, R. Westermann: Mass-spring systems on the GPU | \nThu Apr\n22 | Wellness day |  | \nMon Apr\n26 | Computer Animation Engines | Slides | Unity Unreal Engine Havok Physics Open Dynamics Engine (ODE)\nVega FEM | \nWed Apr\n28 | Review for exam |  | \nMon May\n10 | Final exam | Online on Zoom | \n\n\n"
        }
    },
    {
        "DSCI-553": {
            "Course Description": "Catalogue Course Description:\nAlgorithms and techniques of Data Mining and Machine Learning for analyzing massive\ndatasets. Emphasis on Map Reduce and others. Case studies and applications.\n\nExpanded Course Description:\nExpanded Course Description\nData mining is a fundamental skill for massive data analysis. At a high level, it allows the analyst\nto discover patterns in data, and transform it into a usable product. The course will teach data\nmining algorithms for analyzing very large data sets. It will have an applied focus, in that it is\nmeant for preparing students to utilize topics in data mining to solve real world problems.\nRecommended Preparation\nDSCI-550, DSCI-551 and DSCI-552 (or equivalents) are required prerequisites. Knowledge of\nprobability, linear algebra, algorithm design, skilled programming, and some machine learning,\nare essential or highly desirable.\nA basic understanding engineering principle is required, including skilled programming with the\nPython language is desirable. Most assignments are in Spark and require sufficient\nprogramming experience and algorithm design. The assignments are designed for the Unix\nenvironment (see vocareum.com); basic Unix skills will make programming assignments much\neasier. Students will need sufficient mathematical background, including probability, statistics,\nand linear algebra.\nCourse Notes\nThe course will be run as a lecture class with student participation strongly encouraged. There\nare weekly readings and students are encouraged to do the readings prior to the discussion in\nclass. All of the course materials, including the readings, lecture slides, homework will be posted\nonline.\nTechnological Proficiency and Hardware/Software Required\nStudents are expected to know how to program in programming languages such as Python.\nStudents are also expected to have their own laptop or desktop computer where they can\ninstall and run software to do the weekly homework assignments.\nRequired Readings and Supplementary Materials\n● Rajaraman, J. Leskovec and J. D. Ullman, Mining of Massive Datasets, Cambridge\nUniversity Press, 2012.\nAvailable free at: http://infolab.stanford.edu/~ullman/mmds.html\nIn addition to the textbook, students may be given additional reading materials such as\nresearch papers. Students are responsible for all assigned reading assignments.\nDescription and Assessment of Assignments\nHomework Assignments: There will be 6 homework assignments and a final project. The\nassignments and final project must be done individually. Each assignment is graded on a scale\nof 0-100 and the specific rubric for each assignment is given in the assignment. Each submission\nwill be checked for plagiarism. Students will be required to finish their homework with pySpark,\nDSCI-553 Syllabus, Page 2 of 7",
            "Learning Objective": "",
            "Table Description": "| Schedule |  | Topic |  | Readings and |  | Deliverables/Due Dates\n |  |  |  |  | Assignments |  | \nWeek 1\n8/23 |  |  | Introduction to Data\nMining, MapReduce | Ch1: Data Mining\nCh2: Large-Scale File\nSystems and Map-\nReduce |  |  | \nWeek 2\n8/30 |  |  | MapReduce (cont.) | Ch2: Large-Scale File\nSystems and Map-\nReduce |  |  | Learn/Install Spark\nPractice quiz online\nWeek 3\n9/6 |  |  | Frequent itemsets and\nAssociation rules | Ch6: Frequent\nitemsets, |  |  | Weekly Quiz starts\nHomework 1 assigned\nWeek 4\n9/13 |  |  | Similar Itemset: Shingling,\nMinhashing, Locality\nSensitive Hashing | Ch3: Finding Similar\nItems |  |  | \nWeek 5\n9/20 |  |  | Recommendation Systems:\nContent-based and\nCollaborative Filtering | Ch9:\nRecommendation\nsystems |  |  | Homework 1 due\nHomework 2 assigned\nWeek 6\n9/27 |  |  | Recommendation Systems:\nContent-based and\nCollaborative Filtering | Additional Readings\nsee lecture notes |  |  | \nWeek 7\n10/4 |  |  | Analysis of Massive Graphs\n(Social Networks) | Ch10: Analysis of\nSocial Networks |  |  | Homework 2 due\nHomework 3 assigned\nWeek 8\n10/11 |  |  | Analysis of Massive Graphs\n(Social Networks) | Ch10: Analysis of\nSocial Networks |  |  | \nWeek 9\n10/18 |  |  | Mining data streams | Ch4: Mining data\nstreams |  |  | \nWeek 10\n10/25 |  |  | Clustering massive data\nLink Analysis | Ch7: Clustering |  |  | Homework 3 due\nHomework 4 assigned\nCompetition project\nassigned\nWeek 11\n11/1 |  |  | Link Analysis I | Ch5: Link Analysis |  |  | \n\n\n\n\nWeek 12\n11/8 | Link Analysis II | Ch5: Link Analysis | Homework 4 due\nHomework 5 assigned\nWeek 13\n11/15 | Web Advertising | Ch8: Advertising on\nthe Web | Homework 5 due\nHomework 6 assigned\nWeek 14\n11/22 |  |  | Homework 6 due\nWeek 15\n11/29 | Comprehensive Exam |  | \nWeek 16\n12/6 |  |  | Competition project due\n\n\n"
        }
    },
    {
        "DSCI-552": {
            "Course Description": "Catalogue Course Description:\n: Practical applications of machine learning techniques to real-world\nproblems. Uses in data mining and recommendation systems and for building adaptive user inter-\nfaces.\n\nExpanded Course Description:\nCourse Description: This is a foundational course with the primary application to data analyt-\nics, but is intended to be accessible both to students from technical backgrounds such as computer\nscience, computer engineering, electrical engineering, or mathematics; and to students from less\ntechnical backgrounds such as business administration, communication, accounting, various medi-\ncal specializations including preventative medicine and personalized medicine, genomics, and man-\nagement information systems. A basic understanding of engineering and/or technology principles\nis needed, as well as basic programming skills, sufficient mathematical background in probability,\nstatistics, and linear algebra.\nCourse Objectives: Upon successful completion of this course a student will\n• Broadly understand major algorithms used in machine learning.\n• Understand supervised and unsupervised learning techniques.\n• Understand regression methods.\n• Understand resampling methods, including cross-validation and bootstrap.\n• Understand decision trees, dimensionality reduction, regularization, clustering, and kernel\nmethods.\n• Understand hidden Markov models and graphical models.\n• Understand feedforward and recurrent neural networks and deep learning.\nExam Dates:\n• Midterm 1 (in-person): Friday March 8, 10:00 AM-11:50 AM. (May be changed to a a\ndifferent hour, most probably 8:00 AM-9:50 AM, on the same day)\n• Midterm 2 (in-person): Friday, April 26, 10:00 AM - 11:50 AM (May be changed to a\ndifferent hour, most probably 8:00 AM-9:50 AM, on the same day)",
            "Learning Objective": ": Upon successful completion of this course a student will\n• Broadly understand major algorithms used in machine learning.\n• Understand supervised and unsupervised learning techniques.\n• Understand regression methods.\n• Understand resampling methods, including cross-validation and bootstrap.\n• Understand decision trees, dimensionality reduction, regularization, clustering, and kernel\nmethods.\n• Understand hidden Markov models and graphical models.\n• Understand feedforward and recurrent neural networks and deep learning.\nExam Dates:\n• Midterm 1 (in-person): Friday March 8, 10:00 AM-11:50 AM. (May be changed to a a\ndifferent hour, most probably 8:00 AM-9:50 AM, on the same day)\n• Midterm 2 (in-person): Friday, April 26, 10:00 AM - 11:50 AM (May be changed to a\ndifferent hour, most probably 8:00 AM-9:50 AM, on the same day)",
            "Table Description": "Tuesday | Thursday\nJan 9th 1\nIntroduction to Statistical Learning\n(ISLR Chs.1,2, ESL Chs.1,2)\nMotivation: Big Data\nSupervised vs. Unsupervised Learning | 11th 2\nIntroduction to Statistical Learning\n(ISLR Chs.1,2, ESL Chs.1,2)\nRegression, Classification\nThe Regression Function\nNearest Neighbors\n16th 3\nIntroduction to Statistical Learning\n(ISLR Chs.1,2, ESL Chs.1,2)\nModel Assessment\nThe Bias-Variance Trade-off\nNo Free Lunch Theorem | 18th 4\nLinear Regression (ISLR Ch.3, ESL Ch. 3)\nEstimating Coefficients\nEstimating the Accuracy of Coefficients\n23rd 5\nLinear Regression (ISLR Ch.3, ESL Ch. 3)\nVariable Selection and Hypothesis Testing\nMultiple Regression\nAnalysis of Variance and the F Test | 25th 6\nLinear Regression (ISLR Ch.3, ESL Ch. 3)\nStepwise Variable Selection\nQualitative Variables\n30th 7\nClassification (ISLR Ch. 4, ESL Ch. 4)\nMulti-class and Multi-label Classification\nLogistic Regression\nClass Imbalance\nHypothesis Testing and Variable Selection | Feb 1st 8\nClassification (ISLR Ch. 4, ESL Ch. 4)\nSubsampling and Upsampling\nSMOTE\nMultinomial Regression\nBayesian Linear Discriminant Analysis\n6th 9\nClassification (ISLR Ch. 4, ESL Ch. 4)\nMeasures for Evaluating Classifiers\nQuadratic Discriminant Analysis*\nComparison with K-Nearest Neighbors\nThe Na¨ıve Bayes’ Classifier\nText Classification\nFeature Creation for Text Data\nHandling Missing Data | 8th 10\nResampling Methods (ISLR Ch. 5, ESL\nCh. 7)\nModel Assessment\nValidation Set Approach\nCross-Validation\nThe Bias-Variance Trade-off for\nCross-Validation\nThe Bootstrap\nBootstrap Confidence Intervals\n13th 11\nLinear Model Selection and\nRegularization (ISLR Ch.6, ESL Ch. 3)\nSubset Selection\nAIC, BIC, and Adjusted R2)\nShrinkage Methods\nRidge Regression | 15th 12\nLinear Model Selection and\nRegularization (ISLR Ch.6, ESL Ch. 3)\nThe LASSO\nElastic Net\nDimension Reduction Methods*\n\n\n\n\nTuesday | Thursday\n20th 13\nTree-based Methods (ISLR Ch. 8, ESL\nChs. 9, 10)\nRegression and Classification Trees\nCost Complexity Pruning | 22nd 14\nTree-based Methods (ISLR Ch. 8, ESL\nChs. 9, 10, 16)\nBagging, Random Forests, and Boosting\n27th 15\nSupport Vector Machines (ISLR Ch. 9,\nESL Ch. 12)\nMaximal Margin Classifier\nSupport Vector Classifiers | 29th 16\nSupport Vector Machines (ISLR Ch. 9,\nESL Ch. 12)\nThe Kernel Trick\nSupport Vector Machines\nL1 Regularized SVMs\nMulti-class and Multilabel Classification\nThe Vapnik-Chervonenkis Dimension*\nSupport Vector Regression\nMar 5th 17\nUnsupervised Learning (ISLR Ch. 12,\nESL Ch. 14)\nK-Means Clustering\nHierarchical Clustering | 7th 18\nUnsupervised Learning (ISLR Ch. 12,\nESL Ch. 14)\nPractical Issues in Clustering\n12th\nSpring Recess | 14th\nSpring Recess\n19th 19\nUnsupervised Learning (ISLR Ch. 12,\nESL Ch. 14)\nPrincipal Component Analysis\nAnomaly Detection*\nAssociation Rules*\nMixture Models and Soft K-Means* | 21st 20\nActive and Semi-Supervised Learning\nSemi-Supervised Learning\nSelf-Training\nCo-Training\nYarowsky Algorithm\nRefinements\nActive vs. Passive Learning\nStream-Based vs. Pool-Based Active Learning\nQuery Selection Strategies\n26th 21\nNeural Networks and Deep Learning\n(ISLR Ch. 10, ESL Ch. 11, DL Ch. 6)\nThe Perceptron\nFeedforward Neural Networks\nBackpropagation and Gradient Descent\nOverfitting | 28th 22\nNeural Networks and Deep Learning\n(DL Chs. 6, 7)\nAutoencoders and Deep Feedforward Neural\nNetworks\nRegularization\nEarly Stopping and Dropout\nAdversarial Training*\n\n\n\n\nTuesday | Thursday\nApr 2nd 23\nNeural Networks and Deep Learning\n(ISLR Ch. 12, DL Chs. 9, 10)\nConvolutional Neural Networks\nSequence Modeling\nRecurrent Neural Networks | 4th 24\nNeural Networks and Deep Learning\n(ISLR Ch. 12, DL Ch. 10)\nSequence-to-Sequence Modeling*\nLong Short Term Memory (LSTM) Neural\nNetworks\n9th 25\nHidden Markov Models (AL Ch. 15)\nPrinciples\nThe Viterbi Algorithm | 11th 26\nReinforcement Learning*\nDefinitions\nTask-Reward-Policy Formulation\nTotal Discounted Future Reward\nOptimal Policy\nValue Function\nQ-Function\nThe Bellman Equation\nQ-Learning\nExploration- Exploitation\nTemporal Difference Learning\nExtensions to Stochastic Environments and\nRewards\nDeep Reinforcement Learning\n16th 27\nFuzzy Systems*\nFuzzy Sets\nSet Operations\nT-norms, T-conorms, and Fuzzy complements\nCylindrical Extensions and Fuzzy Relations\nFuzzy If-Then Rules as Association Rules | 18th 28\nFuzzy Systems*\nInference from Fuzzy Rules\nFuzzification and Defuzzification\nLearning Fuzzy Rules from Examples\nThe Wang-Mendel Algorithm\nFuzzy C-Means Clustering\n23rd 29\nGuest Lecture* | 25th 30\nGuest Lecture*\n\n\n\n\nFriday\nJan 12th\n-\n19th\n-\n26th\nHomework 0 Due (not graded)\nFeb 2nd\nHomework 1 Due\n9th\nHomework 2 Due\n16th\n-\n23rd\nHomework 3 Due\nMar 1st\nHomework 4 Due\n8th\n[Midterm 1]\n15th 1\nSpring Recess\n22nd 1\nHomework 5 Due\n29th 1\nHomework 6 Due\nApr 5th 1\nHomework 7 Due\n12th 1\n-\n19th 1\nHomework 8 Due\n26th 1\n[Midterm 2]\n\n\n"
        }
    },
    {
        "CSCI-535": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n​\nHuman face-to-face communication is a little like a dance, in that participants continuously\nadjust their behaviors based on verbal and nonverbal displays and signals. Human\ninterpersonal behaviors have long been studied in linguistic, communication, sociology and\npsychology. The recent advances in machine learning, pattern recognition and signal\nprocessing enabled a new generation of computational tools to analyze, recognize and predict\nhuman communication behaviors during social interactions. This new research direction has\nbroad applicability, including the improvement of human behavior recognition, the synthesis of\nnatural animations for robots and virtual humans, the development of intelligent tutoring\nsystems, and the diagnoses of social disorders (e.g., autism spectrum disorder).\nThe objectives of this course are:\n​\n1. To give a general overview of human communicative and social behaviors (language,\nvocal and nonverbal) and show a parallel with computer science (natural language\nprocessing, speech processing and computer vision);\n2. To understand the multimodal challenge of human communication (e.g. speech and\ngesture synchrony) and learn about multimodal signal processing;\n3. To understand the social aspect of human communication and its implication on\ncomputational modeling;\n4. To learn about recent advances in machine learning and pattern recognition to analyze,\nrecognize and predict human social and communicative behaviors;\n5. To give students practical experience in computational study of human social\ncommunication through a course project.\nCourse format\n​\nCourse includes lectures, discussion, assignments and a project. There will be a total of three\nassignments which will be done individually. Each student will also present one relevant paper\nand lead the discussion on the topic. Students will be asked to form teams (up three people)\nand present their project advancement for mid-term and at the end of the semester.\nCourse Material\n​\nRequired:\nReading material will be based on published technical papers available via the\nACM/IEEE/Springer digital libraries or freely available online. All USC students have\nautomatic access to these digital archives.\nPython, MATLAB can be used using USC license (for practical exercises)\nOptional:\n● Burgoon, J. K., Magnenat-Thalmann, N., Pantic, M., & Vinciarelli, A. (Eds.). (2017).\n​\nSocial signal processing. Cambridge University Press.\n●\n● Multimodal Processing and Interaction, Gros, Potamianos and Maragos, SpringerLink,\n​ ​\n2008, DOI: 10.1007/978-0-387-76316-3 (freely available on SpringerLink for USC\nstudents)\n● Nonverbal Communication in Human Interaction (7th ​ edition), Mark Knapp and Judith\n​ ​\nHall, Wadsworth, 2010\n● Speech and Language Processing (2nd ​ edition), Daniel Jurafsky and James Martin,\n​\nPearson, 2008\n● Machine Learning for Audio, Image and Video Analysis: Theory and Applications,\n​ ​\nFrancesco Camastra and Alessandro Vinciarelli, Springer, 2008, DOI:\n10.1007/978-1-84800-007-0 (freely available on SpringerLink for USC students)\nCourse Topics and Readings\n​\n** Topics and readings may change based on student interest **\nLectures\n(Tue/Thu 3:30-5:20pm)\nWeek 1\nIntroduction and communication models\n● Human communication dynamics\n● Applications and domains\n● Communication models\n● Mid-term and final projects\n● Datasets and sensing tools\nReading material\n● Vinciarelli et al. (2012), Social Signal Processing",
            "Learning Objective": "s of this course are:\n​\n1. To give a general overview of human communicative and social behaviors (language,\nvocal and nonverbal) and show a parallel with computer science (natural language\nprocessing, speech processing and computer vision);\n2. To understand the multimodal challenge of human communication (e.g. speech and\ngesture synchrony) and learn about multimodal signal processing;\n3. To understand the social aspect of human communication and its implication on\ncomputational modeling;\n4. To learn about recent advances in machine learning and pattern recognition to analyze,\nrecognize and predict human social and communicative behaviors;\n5. To give students practical experience in computational study of human social\ncommunication through a course project.\nCourse format\n​\nCourse includes lectures, discussion, assignments and a project. There will be a total of three\nassignments which will be done individually. Each student will also present one relevant paper\nand lead the discussion on the topic. Students will be asked to form teams (up three people)\nand present their project advancement for mid-term and at the end of the semester.\nCourse Material\n​\nRequired:\nReading material will be based on published technical papers available via the\nACM/IEEE/Springer digital libraries or freely available online. All USC students have\nautomatic access to these digital archives.\nPython, MATLAB can be used using USC license (for practical exercises)\nOptional:\n● Burgoon, J. K., Magnenat-Thalmann, N., Pantic, M., & Vinciarelli, A. (Eds.). (2017).\n​\nSocial signal processing. Cambridge University Press.\n●\n● Multimodal Processing and Interaction, Gros, Potamianos and Maragos, SpringerLink,\n​ ​\n2008, DOI: 10.1007/978-0-387-76316-3 (freely available on SpringerLink for USC\nstudents)\n● Nonverbal Communication in Human Interaction (7th ​ edition), Mark Knapp and Judith\n​ ​\nHall, Wadsworth, 2010\n● Speech and Language Processing (2nd ​ edition), Daniel Jurafsky and James Martin,\n​\nPearson, 2008\n● Machine Learning for Audio, Image and Video Analysis: Theory and Applications,\n​ ​\nFrancesco Camastra and Alessandro Vinciarelli, Springer, 2008, DOI:\n10.1007/978-1-84800-007-0 (freely available on SpringerLink for USC students)\nCourse Topics and Readings\n​\n** Topics and readings may change based on student interest **\nLectures\n(Tue/Thu 3:30-5:20pm)\nWeek 1\nIntroduction and communication models\n● Human communication dynamics\n● Applications and domains\n● Communication models\n● Mid-term and final projects\n● Datasets and sensing tools\nReading material\n● Vinciarelli et al. (2012), Social Signal Processing",
           "Table Description": "Lectures\n(Tue/Thu 3:30-5:20pm)\nWeek 1\nIntroduction and communication models\n● Human communication dynamics\n● Applications and domains\n● Communication models\n● Mid-term and final projects\n● Datasets and sensing tools\nReading material\n● Vinciarelli et al. (2012), Social Signal Processing\n\n\n\n\n\n\n\n● Krauss et al. (2002), The psychology of Verbal Communication\n● (optional) Pentland (2008), Honest Signals, Ch. 1\n● (optional) Morency et al. (2010), Human Communication dynamics\nWeek 2\nMachine Learning: basic concepts\n● Classification and Evaluation methods\n● Training/validation and testing\n● Decision models\n● Support Vector Machine\n● Neural networks/deep learning\n● CNNs and RNNs\n● ML toolbox (scikit-learn)\nReading material\n● (optional) https://github.com/jakevdp/sklearn_tutorial\n● Courville et al., 2015 deep learning (optional)\n● (optional) Langley and Kibler (1991), The Experimental Study of Machine Learning\nWeek 3\n** Draft project proposals due\nStudy Design, Evaluation and Analysis\nUser studies (guest lecture by Gale Lucas - to be confirmed)\n● Coder agreement, kappa\n● Statistical analysis\n● Student t-test, effect-size\nReading material\n● Lucas et al. (2014), It’s only a computer: Virtual humans increase willingness to disclose\n● Costa et al., CHI 2018. Regulating Feelings During Interpersonal Conflicts by Changing\nVoice Self-perception\n● (optional) Wainer (1984) - How to display data badly - The American Statistician\n● (optional) Leroy (2011), Designing User Studies in Informatics\nWeek 4\nProject proposal presentations (Flash talks – 5m +5m Q&A)\nAffective messages and personality traits\n● Emotion theory\n● Social emotions\n● Social behaviors\n\n\n\n\n\n\n\n● Big five personality dimensions\nReading material\n● de Melo et al. (2013). Reading People’s Minds: From Emotion Expressions in\nInterdependent Decision Making\n● (optional) Gratch et al. (2013), Felt emotion and social context determine the intensity of\nsmiles in a competitive video game\n● (optional) Gratch and Marsella (2005), Emotion Psychology\n● (optional) Barrick and Mount (1991), Big Five personality\nWeek 5\nVocal messages\n● Phonetics and phonology\n● Prosody and voice quality\n● Vocal expressions\n● Audio representation and basic feature extraction\n● Praat/OpenSMILE\nReading material\n● Schuller et al., (2011), Recognising realistic emotions and affect in speech: State of the\nart and lessons ..\n● (Optional) Eyben et al. (2015), The Geneva Minimalistic Acoustic Parameter Set\n(GeMAPS) for Voice Research …\n● (optional) Bachorowsky et al. (2001), The acoustic features of laughter\n● (optional) Ladefoged (2004), A course in phonetics\nWeek 6\nVirtual Humans\n● VHToolkit (Guest lecture by Arno Hartholt)\n○ Behavior planning and generation\n● Multimodal behavior generation\n● Designing ECAs\nReading material\n● Devault et al. Simsensei 2014\n● (optional) Ding et al. (2014) Laughter Animation Synthesis\n● (optional) Cafaro et al (2016) The Effects of Interpersonal Attitude of a Group of\nAgents on User’s Presence and Proxemics Behavior\nWeek 7\n\n\n\n\n\n\n\nVerbal and Conversational messages\n● Discourse analysis\n● Turn-taking and backchannel\n● Semantics and pragmatics\n● Speech and dialogue acts\n● Language models and N-grams\n● Boundaries, fillers and disfluencies\n● Syntax and part-of-speech tagging\n● Word and sentence embedding (GloVe, BERT, etc.)\nReading material\n● Ghosh et al. Affect-LM:, ACL 2017\n● (optional) Hoegen et al. Conversational style, 2019\n● (optional)Stolcke et al. CL 2000: Dialogue act modeling for automatic tagging and..\n● (optional)Bohus and Horvitz (2010), Computational Turn-taking\n● (optional) Jurafsky and Martin (2008), Speech and Language Processing, 4.1-4.4,\n5.1-5.3 and 12.1-12.2\n● (optional) Liu et al. (2004) Metadata extraction\n● (optional) Clark and Brennan (1991)\nWeek 8\nMultimodal behavior recognition (1/2)\n● Multimodal fusion\n● Multimodal alignment,\n● Audio-visual recognition\n● Long Short-term Memory Networks\nReading material\n● Baltrušaitis et al., 2018\n● (optional) Kang et al, 2010\n● (optional) Soleymani et al, 2019\nWeek 9\nHuman-Robot communication\nGuest lecture by Stefanos Nikolaidis (to be confirmed)\nLecture on Social robotics\nReading material\n● Celiktutan et al. Computational Analysis of Affect,\n● Personality, and Engagement in\n● Human–Robot Interactions, 2018\n● Dong et al., Embodiment in socially interactive robots, 2019\n\n\n\n\n\n\n\nWeek 10\n(31 Mar, 2 Apr)\nMid-term project presentations (mid-term reports are due) (report deadline April 3rdt)\nWeek 11\nMultimodal behavior recognition (2/2)\n● Gaze in interaction\n● Speech activity detection\n● Guest lecture by Kalin Sefanov\nMultimodal behavior recognition (2/2)\n● Admoni and Scassellati, Social eye gaze in human-robot interaction: a review, in ACM\nJournal of Human-Robot Interaction, 2017.\n● (optional) Stefanov et al, 2019\nWeek 12\nMultimodal Sentiment Analysis\n● Sentiment vs emotions\n● Text-based sentiment analysis\n● Multimodal sentiment analysis\nHealth\n● Multimodal behavior analysis in Health\n● Mental health assessment\n● Neurodevelopmental disorders\n● Neurodegenerative disorders\nReading material - sentiment\n● Pang et al. EMNLP 2002: Thumbs up? Sentiment classification using machine learning\ntechniques\n● Soleymani et al. 2017, definition\n● Tavabi et al, 2019\n● Zadeh et al, 2017\nReading material - health\n● Tavabi et al., 2020\n● Cummings et al, 2015\n\n\n\n\n\n\n\nWeek 13\nDyadic and Multiparty Interactions\n● Dyadic Modeling\n● Recurrence plot analysis\n● Synchrony and entrainment\n● Team processes and assessment\n● Climate and cohesion\n● Knowledge formation\nBias and ethics\n● Bias\n● Fairness\nDyadic and Multiparty Interactions\nTeam processes and assessment\n● Kozlowski\n● Neubauer et al. 2016\n● Zhang et al, 2018\nBias and ethics\n● Raghavan et al., 2019\n● McDuff et al., 2019\n● Yan et al., 2020\nWeek 14\nFinal project presentations\nBibliography\nPrimary readings\nIntroduction and communication models\n1. Vinciarelli, A., Pantic, M., Heylen, D., Pelachaud, C., Poggi, I., D'Errico, F., & Schroeder,\nM. (2011). Bridging the gap between social animal and unsocial machine: A survey of\nsocial signal processing. IEEE Transactions on Affective Computing, 3(1), 69-87.Krauss,\n​ ​ ​ ​\nR.M. (2002).\n2. The psychology of verbal communication. In, N. Smelser & P. Baltes (eds.), International\n​\nEncyclopedia of the Social and Behavioral Sciences. London: Elsevier.\n​\n3. (optional) Morency, L.-P., Modeling Human Communication Dynamics, IEEEE Signal\nProcessing Magazine, September 2010\n4. (optional) Pentland, Honest Signals, Chapter 1\nMachine Learning: Basic Concepts\n\n\n\n\n\n\n\n5. Tom Fawcett, An introduction to ROC analysis, Pattern Recognition Letters, Volume 27,\n​ ​ ​ ​ ​\nIssue 8, June 2006, Pages 861–874\n6. (optional) Langley and Kibler (1991), The Experimental Study of Machine Learning,\n​ ​ ​\nUnpublished paper.\nStudy Design, Evaluation and Analysis\n8. Gale M. Lucas, Jonathan Gratch, Aisha King, Louis-Philippe Morency, It’s only a\ncomputer: Virtual humans increase willingness to disclose, Computers in Human\nBehavior, Volume 37, August 2014, Pages 94-100.\n9. Costa, J., Jung, M. F., Czerwinski, M., Guimbretière, F., Le, T., & Choudhury, T. (2018,\nApril). Regulating feelings during interpersonal conflicts by changing voice\nself-perception. In Proceedings of the 2018 CHI Conference on Human Factors in\n​\nComputing Systems (pp. 1-13)\n​\n10. (optional) H Wainer - How to display data badly - The American Statistician, 1984\n11. (optional) Leroy (2011), Designing User Studies in Informatics, Springer.\n​ ​\n12. (optional) http://www.sparknotes.com/psychology/psych101/researchmethods/\n​ ​ ​ ​\nAffective messages and personality traits\n13.de Melo, C. M., Carnevale, P. J., Read, S. J., & Gratch, J. (2013, September 30).\nReadingPeople’s Minds From Emotion Expressions in Interdependent Decision Making.\nJournal of Personality and Social Psychology. Advance online publication. doi:\n10.1037/a0034251\n14.Jonathan Gratch, Lin Cheng, Stacy Marsella and Jill Boberg, Felt emotion and social\ncontext determine the intensity of smiles in a competitive video game, Face and Gesture\n2013\n15.(optional) Gratch & Marsella, 2005 Lessons from Emotion Psychology for the Design of\nLifelike Characters\n16.(optional) Mr Barrick, Mk Mount (1991) The Big Five Personality Dimensions And Job\nPerformance: A Meta-Analysis - Personnel Psychology\nVocal messages\n17.Schuller et al., (2011), Recognising realistic emotions and affect in speech: State of the\nart and lessons learnt from the first challenge, Volume 53, Issues 9–10, 2011, Pages\n​ ​ ​\n1062–1087\n18.(Optional) Eyben, Florian, et al. \"The Geneva minimalistic acoustic parameter set (GeMAPS) for\n​\nvoice research and affective computing.\" IEEE transactions on affective computing 7.2 (2015):\n​ ​\n190-202.\n19.(Optional) (Bachorowski et al. (2001), The acoustic features of human laughter, Journal\n​\nof the Acoustic Society of America, 110 (3), pp. 1581-1597\n​\n20.(Optional) Ladefoged (2004), A course in phonetics\nVisual messages\n21.Chu, Wen-Sheng, Fernando De la Torre, and Jeffrey F. Cohn. \"Learning spatial and\ntemporal cues for multi-label facial action unit detection.\" 2017 12th IEEE International\n​\nConference on Automatic Face & Gesture Recognition (FG 2017). IEEE, 2017.\n​\n\n\n\n\n\n\n\n22.(optional) Krämer, N. C. (2008). Nonverbal Communication. In J. Blascovich & C. Hartel\n(eds.), Human behavior in military contexts (pp. 150-188). Washington: The National\nAcademies Press.\n23. (optional) Fernando de la Torre and Jeffrey F. Cohn, Facial Expression Analysis, Visual\n​\nAnalysis of Humans, 2011, 377-409\n​\n24.(optional) Adam Kendon, An Agenda for Gesture Studies, This article appeared in\nVolume 7 (3) of the Semiotic Review of Books.\n25.(optional) Michael Argyle and Janet Dean, Eye-contact, distance and Affiliation,\nSociometry, Vol. 28, No. 3, pp. 289-304, 1965\nVirtual humans\n26.DeVault, David, Ron Artstein, Grace Benn, Teresa Dey, Ed Fast, Alesia Gainer, Kallirroi\nGeorgila et al. \"SimSensei Kiosk: A virtual human interviewer for healthcare decision\nsupport.\" In Proceedings of the 2014 international conference on Autonomous agents\nand multi-agent systems, pp. 1061-1068. 2014.\n27.(optional) Ding, Yu, Ken Prepin, Jing Huang, Catherine Pelachaud, and Thierry Artières.\n\"Laughter animation synthesis.\" In Proceedings of the 2014 international conference on\n​\nAutonomous agents and multi-agent systems, pp. 773-780. 2014.\n​\nVerbal messages\n28.Ghosh, Sayan, et al. \"Affect-LM: A Neural Language Model for Customizable Affective Text\nGeneration.\" Proceedings of the 55th Annual Meeting of the Association for Computational\n​\nLinguistics (Volume 1: Long Papers). 2017.\n​\n29.(optional)Pang et al. EMNLP 2002: Thumbs up? Sentiment classification using machine\nlearning techniques, http://www.aclweb.org/anthology/W02-1011\n​ ​\n30.(optional)Andreas Stolcke , Noah Coccaro , Rebecca Bates , Paul Taylor , Carol Van\nEss-Dykema , Klaus Ries , Elizabeth Shriberg , Daniel Jurafsky , Rachel Martin , Marie\nMeteer, Dialogue act modeling for automatic tagging and recognition of conversational\nspeech, Computational Linguistics, v.26 n.3, p.339-373, September 2000\n31.(optional) Jurafsky and Martin (2008), Speech and Language Processing, Sections\n4.1-4.4, 5.1-5.3 and 12.1-12.2\n32.(optional) Soo-Min Kim and Eduard Hovy (2004) Determining the Sentiment of Opinions,\n​ ​ ​\nProceedings of the COLING conference, Geneva\n33.(optional) Yang Liu, Elizabeth Shriberg, Andreas Stolcke, Dustin Hillard, Mari Ostendorf,\nBarbara Peskin, and Mary Harper. 2004. The ICSI-SRI-UW Metadata Extraction System,\n​ ​ ​\nICSLP 2004\nConversational messages\n34.Hoegen, R., Aneja, D., McDuff, D., & Czerwinski, M. (2019, July). An end-to-end\nconversational style matching agent. In Proceedings of the 19th ACM International\nConference on Intelligent Virtual Agents (pp. 111-118).\n35.Duncan (1974) Some Signals and Rules for Taking Speaking Turns in Conversations\n​ ​\n36.Bohus, D., Horvitz, E., (2010) - Computational Models for Multiparty Turn-Taking,\n​ ​ ​\nMicrosoft Technical Report MSR-TR-2010-115\n\n\n\n\n\n\n\n37.(optional) Jurafsky and Martin (2008), Speech and Language Processing, Sections\n17.1-17.4 and 21.1-21.4\nMultimodal behavior recognition (1/3)\n41.Baltrušaitis, Tadas, Chaitanya Ahuja, and Louis-Philippe Morency. \"Multimodal machine\n​\nlearning: A survey and taxonomy.\" IEEE Transactions on Pattern Analysis and Machine\n​\nIntelligence 41.2 (2018): 423-443.C. Christoudias, K. Saenko, L.-P. Morency, and T.\nDarrell (2006) Co-Adaptation of Audio-Visual Speech and Gesture Classifiers,\n​ ​ ​\nInternational Conference on Multimodal Interactions (ICMI 2006)\n42.I. McCowan, D. Gatica-Perez, S. Bengio, G. Lathoud, M. Barnard, M., D. Zhang,\n“Automatic analysis of multimodal group actions in meetings”, IEEE Transaction on\n​ ​ ​\nPattern Analysis and Machine Intelligence, Vol. 27, pp. 305–317, 2005\n​\n43.(optional) Gros, Potamianos and Maragos (2008) Multimodal Processing and Interaction,\nSpringerLink, Chapter 1 [SpringerLink or USC blackboard]\n44.(optional) Pradeep K. Atrey, M. Anwar Hossain, Abdulmotaleb El Saddik and Mohan S.\nKankanhalli, Multimodal fusion for multimedia analysis: a survey, Multimedia Systems,\nVolume 16, Number 6 (2010), 345-379 (optional) A. Nefian, L. Liang, X. Pi, X. Liu and K.\nMurphy, (2002) Dynamic Bayesian networks for audio-visual speech recognition,\n​ ​ ​\nEURASIP Journal on Applied Signal Processing, Volume 2002, Issue 1\nSocial robotics\n45.Celiktutan, Oya, Evangelos Sariyanidi, and Hatice Gunes. \"Computational Analysis of\nAffect, Personality, and Engagement in Human–Robot Interactions.\" Computer Vision for\nAssistive Healthcare. Academic Press, 2018. 283-318.\n46.(optional) Deng, Eric, Bilge Mutlu, and Maja J. Mataric. \"Embodiment in socially\ninteractive robots.\" Foundations and Trends® in Robotics 7.4 (2019): 251-356.\nMultimodal behavior recognition 2/3 (gaze, gesture and speech activity)\n47.(optional) K. Stefanov and J. Beskow, \"A real-time gesture recognition system for isolated\n​\nswedish sign language signs,\" in Linköping University Electronic Press, 2017.\n48.(optional) K. Stefanov, G. Salvi, D. Kontogiorgos, H. Kjellström and J. Beskow, \"Modeling of\n​\nhuman visual attention in multiparty open-world dialogues,\" in ACM Transactions on\nHuman-Robot Interaction, 2019.\n49.(optional) K. Stefanov, \"Webcam-based eye gaze tracking under natural head movement,\" in\n​\narXiv preprint arXiv:1803.11088, 2010.\n50.(optional) K. Stefanov, J. Beskow and G. Salvi, \"Self-supervised vision-based detection of the\n​\nactive speaker as support for socially-aware language acquisition,\" in IEEE Transactions on\nCognitive and Developmental Systems, 2019.\n51. (optional) X. Anguera, S. Bozonnet, N. Evans, C. Fredouille, G. Friedland and O. Vinyals,\n​\n\"Speaker diarization: a review of recent research,\" in IEEE Transactions on Audio, Speech, and\nLanguage Processing, 2012.\n52. H. Admoni and B. Scassellati, \"Social eye gaze in human-robot interaction: a review,\" in ACM\nJournal of Human-Robot Interaction, 2017.\n53. (optional) S. Rautaray and A. Anupam, \"Vision based hand gesture recognition for human\n​\ncomputer interaction: a survey,\" in Springer Artificial Intelligence Review, 2015.\n\n\n\n\n\n\n\nMultimodal behavior recognition (3/3) Health and Sentiment\n54.Soleymani, M., Garcia, D., Jou, B., Schuller, B., Chang, S. F., & Pantic, M. (2017). A survey of\nmultimodal sentiment analysis. Image and Vision Computing, 65, 3-14.\n​ ​ ​ ​\nDyadic and team processes\n53.Neubauer, C., Woolley, J., Khooshabeh, P., & Scherer, S. (2016, October). Getting to\nknow you: a multimodal investigation of team behavior and resilience to stress. In\nProceedings of the 18th ACM International Conference on Multimodal Interaction (pp.\n​\n193-200). ACM.\n54.Zhang, Yanxia, et al. \"TeamSense: assessing personal affect and group cohesion in\nsmall teams through dyadic interaction and behavior analysis with wearable sensors.\"\nProceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies\n2.3 (2018): 150.\nBias and ethics\n55.McDuff, Daniel, et al. \"Characterizing bias in classifiers using generative models.\"\nAdvances in Neural Information Processing Systems. 2019.\n​\n56.Yan, Shen, Di Huang, and Mohammad Soleymani. \"Mitigating Biases in Multimodal\nPersonality Assessment.\" Proceedings of the 2020 International Conference on\n​\nMultimodal Interaction. 2020.\n​\nHealth\n57.Cummins, Nicholas, Stefan Scherer, Jarek Krajewski, Sebastian Schnieder, Julien Epps,\nand Thomas F. Quatieri. \"A review of depression and suicide risk assessment using\nspeech analysis.\" Speech Communication 71 (2015): 10-49."
    }
    },
    {
        "DSCI-550": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n:\nThis course is designed as an overview course to give non-engineering background students a\nbroad understanding of data science topics for big data and to get practical experience with key\nbig data informatics techniques. Topics include roadmap of informatics, the data lifecycle, the\nrole of the data scientist, brief introduction to machine learning and data mining, analyzing and\nexploring big data with real world use cases, introduction to big data management eco system,\nand data visualization. Homework assignments and projects will give students practical\nexperience with important topics covered in the course. This class will be primarily individual\nand/or team study, with assigned readings, homework/projects assignments, a midterm exam, and\na final.\nRecommended Preparation:\nA basic understanding of engineering principles and programming language is desirable.\nBooks and Readings:\nNo textbook but reading materials will be provided.\nLecture notes will be available in the Class Blackboard.\nGrading:\nExams: 50% (midterm 20%, Final 30%), Homework 20%, Project: 25%, Attendance 5%\n* The instructor reserves the right to make changes to the grading criteria, assignments\nand course outline to best serve the needs of the class.\nCourse Schedule\nWeek Topic Readings\n1 Class Introduction Lecture Note\nIntroduction to Data\nInformatics\n2 Overview of Big Data Lecture Note\nBasic Background\n(stat, programming)\n3 Basic Background 9/5 Labor Day – University Holiday\n(stat, programming) Lecture Note\n4 Machine Learning 1 Lecture Note\nClass Project Discussion\n5 Machine Learning 1 Lecture Note\n6 Machine Learning 2 Lecture Note\n7 Data Mining 1 Lecture Note\n8 Midterm In-person exam\nData Mining 2 Lecture Note\n9 Project Progress Review\n10 Introduction to Hadoop Lecture Note\nEcosystem\n11 Introduction to Hadoop Lecture Note\nEcosystem\n12\nNoSQL Lecture Note\n13 HBase Lecture Note\n14 Introduction to Data 11/23 Thanksgiving – University Holiday\nVisualization Lecture Note\n15 Review\nFinal Exam TBD\nStudents with Disabilities:\nAny student requesting academic accommodations based on a disability is required to register\nwith Disability Services and Programs (DSP) each semester. A letter of verification for approved\naccommodations can be obtained from DSP. Please be sure the letter is delivered to me as early in\nthe semester as possible. Your letter must be specific as to the nature of any accommodations\ngranted. DSP is located in STU 301 and is open 8:30 am to 5:30 pm, Monday through Friday.\nThe telephone number for DSP is (213) 740-0776.\nAcademic Integrity:\nUSC seeks to maintain an optimal learning environment. General principles of academic honesty\ninclude the concept of respect for the intellectual property of others, the expectation that",
            "Learning Objective": "",
            "Table Description": "Week | Topic | Readings\n1 | Class Introduction\nIntroduction to Data\nInformatics | Lecture Note\n2 | Overview of Big Data\nBasic Background\n(stat, programming) | Lecture Note\n3 | Basic Background\n(stat, programming) | 9/5 Labor Day – University Holiday\nLecture Note\n4 | Machine Learning 1\nClass Project Discussion | Lecture Note\n5 | Machine Learning 1 | Lecture Note\n6 | Machine Learning 2 | Lecture Note\n7 | Data Mining 1 | Lecture Note\n8 | Midterm\nData Mining 2 | In-person exam\nLecture Note\n9 | Project Progress Review | \n10 | Introduction to Hadoop\nEcosystem | Lecture Note\n11 | Introduction to Hadoop\nEcosystem | Lecture Note\n12 | NoSQL | Lecture Note\n13 | HBase | Lecture Note\n14 | Introduction to Data\nVisualization | 11/23 Thanksgiving – University Holiday\nLecture Note\n15 | Review | \n | Final Exam | TBD\n\n\n"
        }
    },
    {
        "CSCI-655": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThe process of developing a new software system – a cloud-hosted web service, a multi-threaded\nsmartphone application, a key-value store, etc. – rarely involves invention of new techniques. Instead, any\nsystem design is typically based on a careful combination of well-known techniques, taking into account the\nconstraints and objectives of the system’s target workload and the environment in which the system will be\ndeveloped. In this course, first-year graduate students will learn the common techniques used to make a\nsystem reliable and performant at scale. In every lecture, we will discuss 1-2 research papers, distill the\ntechniques used in those systems, understand the authors’ motivations in choosing to use those\ntechniques, and discuss the applicability of those techniques in other settings. In groups of 2, every student\nwill lead the discussion for one of these papers over the course of the semester. Students will also conduct\na semester-long project in which they will implement and evaluate a prototype system in groups of 2-3.",
            "Learning Objective": "s of the system’s target workload and the environment in which the system will be\ndeveloped. In this course, first-year graduate students will learn the common techniques used to make a\nsystem reliable and performant at scale. In every lecture, we will discuss 1-2 research papers, distill the\ntechniques used in those systems, understand the authors’ motivations in choosing to use those\ntechniques, and discuss the applicability of those techniques in other settings. In groups of 2, every student\nwill lead the discussion for one of these papers over the course of the semester. Students will also conduct\na semester-long project in which they will implement and evaluate a prototype system in groups of 2-3.\nLearning Objectives\nBy the end of this course, students will have gained experience with\n- techniques for dealing with failures caused by concurrency bugs, power outages, hardware\ncorruption, etc.\n- techniques for optimizing latency and throughput in a variety of settings\n- techniques for enabling a system to scale to a large number of users, data items, computers, etc.\n- reading and distilling a research paper in the area of computer systems\n- presenting the findings of a research paper in the area of computer systems\n- implementing some of the techniques learned in an example prototype system\nRecommended Preparation\nStudents are expected to have completed an undergraduate course on operating systems, and have a basic\nunderstanding of concurrency using threads, virtual memory management using paging and segmentation,\nand data storage using file systems.\nCourse Notes\nStudents enrolled in this course will receive a letter grade.\nAll lectures will be recorded to enable students to review the lectures, but not to use as a substitute for\nattending lecture.\nLecture slides and recordings will be posted on a website dedicated for this course.\nPiazza will be used for announcements and course discussions.\nReadings and Supplementary Materials\nThere is no textbook for this course.\nFor every lecture, 1 or 2 research papers will be posted on the course website, which students are required\nto read before coming to class.\nProject\nStudents will work in groups of two or three on a semester-long project of their choice. There will be four\nmilestones:\n- Week 3: Form a group and pick a topic for your project\n- Week 6: Submit two-page project proposal\n- Week 10: Submit five-page intermediate project report\n- Week 15: Present project outcomes in class and submit ten-page final project report\nThe project counts for 40% of your final grade.\nTo help students pick a project, at the start of the semester, the instructor will discuss strategies for\nchoosing a project topic. Examples include a measurement-based characterization of a deployed or open-\nsource system, the development of a new software system, or reproducing results from the evaluation\nsection of a published paper.\nProject Groups\nDeclare the membership of your project group by the third week of the semester. After this date, we will\nform groups from the remaining students. Choose your group members carefully. You should discuss topics\nsuch as prior experience, course background, goals for this course, workload and schedule for this\nsemester, and preferred project management and work style. Make sure you can find several blocks of time\nduring the week to meet to discuss or carry out the project.\nStudents are expected to work diligently in their group for the benefit of the entire group. All group\nmembers should be familiar with all aspects of each project, irrespective of their role on the project. We\nexpect all group members to contribute their fair share, and we expect to assign the same project grade to\nall members of a group. Members who either contribute less than their share or prevent others from\ncontributing their share may receive a lower grade on the project; non-contributing members will receive\na zero. In case of disputes regarding contribution, the instructor may interview group members and inspect\ncommits to any code repository used by the group. Commits to the repository should reflect the proportion\nof work performed by each group member. If you use pair programming, take turns at the keyboard so that\nthe commit log reflects the contributions of all members.\nStudents may be fired from a group by the remaining members. The procedure for this is as follows: (1)\ndocumented \"gentle warning\" of risk of firing via both e-mail and private Piazza post (with instructor\nincluded on both), with cause and specific work required to remain in group; (2) allow at least 72 hours for\ncompliance; (3) if the problems persist, e-mail statement of firing to the group and post privately to the\ninstructors via Piazza. Fired group members may join another group; students who cannot find a group\nmust complete a project by themselves.\nManaging group dynamics and using each group member's time and talents effectively can be difficult. If\nthere are problems with your group, please see an instructor as soon as possible. Be open and candid with\nyour group about potential problems early on so your group can plan around those problems and not fall\nbehind. A sure way to make your group upset at you is not finishing your work at an agreed-upon deadline\nand not informing them about the problems early enough for them to help. Similarly, it is not okay to try to\ndo all of your group's work on a project by yourself, rather than in collaboration with your group.\nPage 2",
            "Table Description": ""
        }
    },
    {
        "DSCI-551": {
            "Course Description": "Catalogue Course Description:\nFunction and design of modern storage systems, including cloud; data management\ntechniques; data modeling; network attached storage, clusters and data centers;\nrelational databases; the map-reduce paradigm.\nB.\n\nExpanded Course Description:\nExpanded Course Description\nThis course is one of the foundation courses in the Applied Data Science program. It\nprepares the students with the fundamental knowledge on the data management. Such\nknowledge is critical for the students to succeed in more advanced data management\ncourses in the program. It also exposes students to the cutting-edge data management\nconcepts, systems, and techniques for managing a large scale of data, to ensure that\nstudents have adequate background to further explore big data analytics in the follow-up\ncourses.\nThe course may be divided into three parts. (1) Fundamental of data management: data\nstorage, file system, file format, relational data vs. semi-structured data such as XML and\nJSON, conceptual modeling, relational modeling, relational algebra, SQL, views,\nconstraints, query processing and optimization. (2) Big data analytics: NoSQL, key-value\nand document stores, cloud data storage, distributed file system, and MapReduce. (3)\nAdvanced topics in data management (if time permits): data cleaning, data\ntransformation, data warehousing, and data integration.\nThe course will also provide students with hand-on experiences on RDBMS, e.g., MySQL,\nNoSQL & cloud databases such as Google Firebase, Amazon DynamoDB, MongoDB, and\nbig data platform & software stacks, e.g., AWS EC2, Apache Hadoop, and Spark.\nC. Recommended Preparation:\nDSCI 550 taken previously or concurrently. Basic understanding of operating systems,\nnetworks, and databases. A basic understanding of engineering principles is required,\nincluding basic programming skills; familiarity with the Python is required & knowing Java\nprogramming language is desirable.\nD. Course Notes\nThe course will be run as a lecture class with student participation strongly encouraged.\nThere are weekly readings and students are encouraged to do the readings prior to the\ndiscussion in class. All course materials, including the readings, lecture slides, homework\nwill be posted online on Blackboard.\nE. Technological Proficiency and Hardware/Software Required\nStudents are expected to know how to program in Python (preferably Java too). Students\nare also expected to have their own laptop or desktop computer where they can install\nand run software to complete the homework assignments and project.\nF. Recommended Readings and Supplementary Materials\n• [AA] Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau. Operating Systems:\nThree Easy Pieces, 2015 (selected chapters only). Available free at:\nhttp://pages.cs.wisc.edu/~remzi/OSTEP/\n• [GUW] Hector Garcia-Molina, Jeffrey D. Ullman, and Jennifer Widom. Database\nSystems: The Complete Book (Second Edition), Prentice Hall, 2009 (selected chapters\nonly, see schedule below). Book web site:\nhttp://infolab.stanford.edu/~ullman/dscb.html\n• [HKP] Jiawei Han, Micheline Kamber, and Jian Pei. Data Mining: Concepts and\nTechniques. Morgan Kaufmann, 2011, 3rd Edition (selected chapters only, when time\npermits).\nIn addition to the textbook, students may be given additional reading materials such as\nresearch papers. Students are responsible for all reading assignments.\nG. Grading Scheme\nHomework Assignments: There will be 5 homework assignments. The assignments must\nbe done individually. Each assignment is typically graded on a scale of 0-100 and the\nspecific rubric for each assignment will be provided for the assignment.\nExams: There will be two midterms and a final exam. The final exam will be\ncomprehensive, but focus on materials after the 2nd midterm.\nLab sessions: There will be 4 hand-on exercises on NoSQL and big data software.\nCourse project: Students are also expected to complete a term project on managing data\nfor data science. Details will be announced separately. Note that in addition to in-class\ndemo, each group is required to submit up to 20-minute video for the detailed\npresentation and demo of their project.\nGrade breakdown:\nHomework 20%\nMidterm1 15%",
            "Learning Objective": "",
            "Table Description": "Week | Topic | Readings | Homework/Project | Lab\n1\n( 1/10) | • Data Management\nO verview | • [AA] Chapter 2 (optional)\n• [AA] Chapter 4 (optional) |  | \n2\n( 1/17) | • NoSQL 1: Firebase &\nJSON\n• No class on 1/17, | • [AA] Chapter 37 (storage\nsystem) |  | \n\n\n\n\n | MLK birthday |  |  | \n3\n( 1/24) | • Storage System\n• File System | • [AA] Chapter 39\n• [AA] Chapter 40 | HW1 out | Lab 1:\nAmazon EC2\n4\n( 1/31) | • Hadoop HDFS | • K. Shvachko, H. Kuang, S.\nRadia, and R. Chansler,\n\"The hadoop distributed\nfile system,\" in Mass\nStorage Systems and\nTechnologies (MSST), 2010\nIEEE 26th Symposium on,\n2010, pp. 1-10. | HW1 due | \n5 (2/7) | • File Format\n• XML & XPath\n• Project proposal\npresentation | • [GVW] Sec. 11.1-3, 12.1 | Project proposal\ndue\nHW2 out | Lab 2: HDFS\n6\n( 2/14) | • Data Modeling (ER &\nrelational)\n• Midterm 1 (2/15 for\nTuesday section,\n2/16 for MW section) | • [GUW] Sec. 4.1-4.6, 2.1-\n2.1 | HW2 due | \n7\n(2/21) | • SQL\n• No class on Monday,\n2/21 president's day | • [GUW] Sec. 2.3, 6.1-6.5 |  | \n8\n(2/28) | • SQL | • [GUW] Sec. 2.3, 6.1-6.5 | HW3 out | \n9 (3/7) | • Constraints & views\n• Data organization &\nexternal sorting | • [GUW] Sec. 7.1-7.2, 8,1,\n8.3\n• [GUW] Sec. 13.5, 13.7 | HW3 due | \n10\n(3/14) | • Spring recess, 3/13-\n3/20 | • |  | \n11\n(3/21) | • NoSQL 2: MongoDB\n• Midterm 2: 3/22 for\nTuesday section,\n3/23 for MW section |  |  | \n12\n(3/28) | • Indexing (B+-tree)\nQuery execution | • [GUW] Sec. 14.1‐14.2\n[GUW] Chapter 15 | HW4 out\nProject midterm\nreport due | Lab 3:\nMongoDB\n13\n(4/4) | • Query execution\n• NoSQL 3: DynamoDB | • G. DeCandia, D. Hastorun,\nM. Jampani, G. Kakulapati,\nA. Lakshman, A. Pilchin, S.\nSivasubramanian, P.\nVosshall, and W. Vogels,\n\"Dynamo: amazon's highly\navailable key-value store,\"\nin SOSP, 2007, pp. 205-\n220. | HW4 due | \n\n\n\n\n14\n(4/11) | • Hadoop MapReduce | • J. Dean and S. Ghemawat,\nMapReduce: simplified\ndata processing on large\nclusters,\" Communications\nof the ACM, vol. 51, pp.\n107-113, 2008.\n• F. Chang, J. Dean, S.\nGhemwat, W. C. Hsieh, D.\nA. Wallach, M. Burrows, T.\nChandra, A. Fikes, and R.\nE. Gruber, \"Bigtable: A\ndistributed storage system\nfor structured data,\" ACM\nTransactions on Computer\nSystems (TOCS), vol. 26, p.\n4, 2008.\n• R. Cattell, \"Scalable SQL\nand NoSQL data stores,\"\nACM SIGMOD Record, vol.\n39, pp. 12-27, 2011. | HW5 out | Lab 4:\nDynamoDB\n15\n(4/18) | • Apache Spark | • Resilient Distributed\nDatasets: A Fault-Tolerant\nAbstraction for In-Memory\nCluster Computing, Matei\nZaharia, et. al., NSDI,\n2012.\n• Zaharia, Matei and\nChowdhury, Mosharaf and\nFranklin, Michael J. and\nShenker, Scott and Stoica,\nIon. Spark: cluster\ncomputing with working\nsets. HotCloud, 2010. | HW5 due | \n16\n(4/25) | • Project demo |  | Project final report\n& demo video due | \nFinal\nexam | • MW afternoon\nsections: May 4,\nWednesday, 4:30-\n6:30pm\n• Tuesday section:\nMay 10, Tuesday, 2-\n4pm |  |  | \n\n\n"
        }
    },
    {
        "CSCI-522": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course will provide basic and advanced techniques for\ndesigning and developing a game engine suitable for use on a wide\nvariety of next-generation gaming hardware. Through\nimplementing the essential systems of a high-performance, multi-\nthreaded, cross-platform, real-time 3D game engine, the student\nwill gain familiarity with the characteristics of such engines.\nFirst, the students will learn the principles and techniques\nassociated with software development of a game engine. The\nstudents will learn to use and/or understand the tools needed to\nmake games and build the game engine libraries and executables\nusing MS Visual Studio Integrated Development Environment.\nEach week the student will learn about every game engine\nsubsystem and be exposed to advanced techniques currently used\nin the video game industry.\nThen each student will be assigned a game engine module to\ndesign, develop and document around the USC Gamepipe Game\nEngine, GGE. The game engine will be based around OGRE 3D, an\nexisting and popular Open Source Render API.\nThrough class projects the students will create software demos and\ndocumentation on their assigned game modules. The lessons\nlearned will be shared with other students through class\ndiscussions and online documentation using Wiki pages.\nFinal project will consist of final presentation of the game engine at\nwork including a peer presentation on how to use it as part of the\nGGE.\nPrerequisite None\nLecture 3 hours a week\nTextbook\nRequired Real-Time Rendering, Third Edition\nby Tomas Akenine-Moller and Eric Haines\nTextbook Pro OGRE 3D Programming\nOptional by GregoryJunker\n3D Game Engine Design, 2nd Edition\nby David H. Eberly\nGame Programming Gems\nEdited by Mark DeLoura\nGrading The following point structure will be used in determining the grade\nfor the course. Final grade will be based upon the total points\nreceived, the highest total in the class, and the average of the\nclass.\nAttendance 200\nProject 1 200\nProject 2 100\nProject 3 200\nFinal Project 300\nTOTAL POSSIBLE 1000\nPolicies - Make-up policy for exams: In order to make up for a missed\nexam, the student must provide a satisfactory reason along\nwith proper documentation. Usually make-ups are allowed only\nunder extraordinary circumstances.\n- Late Projects: Only one project may be turned in late (and\nreceive full points). No other late projects will be accepted.\n- Though working together is encouraged, the projects must be\nyour own effort. “Duplicate” projects will all receive zero points\nand possible referral to the Office for Student Conduct.\n- All students should read, understand and abide by the\nUniversity Student Conduct Code\nhttp://www.usc.edu/dept/publications/SCAMPUS/governance/g\nov03.html\n- 2 -",
            "Learning Objective": "The purpose of this course is to familiarize the student with the\nprinciples of developing game engines targeted at modern PC and\ngame console hardware.\nConcepts This course will provide basic and advanced techniques for\ndesigning and developing a game engine suitable for use on a wide\nvariety of next-generation gaming hardware. Through\nimplementing the essential systems of a high-performance, multi-\nthreaded, cross-platform, real-time 3D game engine, the student\nwill gain familiarity with the characteristics of such engines.\nFirst, the students will learn the principles and techniques\nassociated with software development of a game engine. The\nstudents will learn to use and/or understand the tools needed to\nmake games and build the game engine libraries and executables\nusing MS Visual Studio Integrated Development Environment.\nEach week the student will learn about every game engine\nsubsystem and be exposed to advanced techniques currently used\nin the video game industry.\nThen each student will be assigned a game engine module to\ndesign, develop and document around the USC Gamepipe Game\nEngine, GGE. The game engine will be based around OGRE 3D, an\nexisting and popular Open Source Render API.\nThrough class projects the students will create software demos and\ndocumentation on their assigned game modules. The lessons\nlearned will be shared with other students through class\ndiscussions and online documentation using Wiki pages.\nFinal project will consist of final presentation of the game engine at\nwork including a peer presentation on how to use it as part of the\nGGE.\nPrerequisite None\nLecture 3 hours a week\nTextbook\nRequired Real-Time Rendering, Third Edition\nby Tomas Akenine-Moller and Eric Haines\nTextbook Pro OGRE 3D Programming\nOptional by GregoryJunker\n3D Game Engine Design, 2nd Edition\nby David H. Eberly\nGame Programming Gems\nEdited by Mark DeLoura\nGrading The following point structure will be used in determining the grade\nfor the course. Final grade will be based upon the total points\nreceived, the highest total in the class, and the average of the\nclass.\nAttendance 200\nProject 1 200\nProject 2 100\nProject 3 200\nFinal Project 300\nTOTAL POSSIBLE 1000\nPolicies - Make-up policy for exams: In order to make up for a missed\nexam, the student must provide a satisfactory reason along\nwith proper documentation. Usually make-ups are allowed only\nunder extraordinary circumstances.\n- Late Projects: Only one project may be turned in late (and\nreceive full points). No other late projects will be accepted.\n- Though working together is encouraged, the projects must be\nyour own effort. “Duplicate” projects will all receive zero points\nand possible referral to the Office for Student Conduct.\n- All students should read, understand and abide by the\nUniversity Student Conduct Code\nhttp://www.usc.edu/dept/publications/SCAMPUS/governance/g\nov03.html\n- 2 -",
            "Table Description": ""
        }
    },
    {
        "CSCI-555 L": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThe process of developing a new software system – a cloud-hosted web service, a multi-threaded\nsmartphone application, a key-value store, etc. – rarely involves invention of new techniques. Instead, any\nsystem design is typically based on a careful combination of well-known techniques, taking into account the\nconstraints and objectives of the system’s target workload and the environment in which the system will be\ndeveloped. In this course, first-year graduate students will learn the common techniques used to make a\nsystem reliable and performant at scale. In every lecture, we will discuss 1-2 research papers, distill the\ntechniques used in those systems, understand the authors’ motivations in choosing to use those\ntechniques, and discuss the applicability of those techniques in other settings. In groups of 2, every student\nwill lead the discussion for one of these papers over the course of the semester. Students will also conduct\na semester-long project in which they will implement and evaluate a prototype system in groups of 2-3.",
            "Learning Objective": "s of the system’s target workload and the environment in which the system will be\ndeveloped. In this course, first-year graduate students will learn the common techniques used to make a\nsystem reliable and performant at scale. In every lecture, we will discuss 1-2 research papers, distill the\ntechniques used in those systems, understand the authors’ motivations in choosing to use those\ntechniques, and discuss the applicability of those techniques in other settings. In groups of 2, every student\nwill lead the discussion for one of these papers over the course of the semester. Students will also conduct\na semester-long project in which they will implement and evaluate a prototype system in groups of 2-3.\nLearning Objectives\nBy the end of this course, students will have gained experience with\n- techniques for dealing with failures caused by concurrency bugs, power outages, hardware\ncorruption, etc.\n- techniques for optimizing latency and throughput in a variety of settings\n- techniques for enabling a system to scale to a large number of users, data items, computers, etc.\n- reading and distilling a research paper in the area of computer systems\n- presenting the findings of a research paper in the area of computer systems\n- implementing some of the techniques learned in an example prototype system\nRecommended Preparation\nStudents are expected to have completed an undergraduate course on operating systems, and have a basic\nunderstanding of concurrency using threads, virtual memory management using paging and segmentation,\nand data storage using file systems.\nCourse Notes\nStudents enrolled in this course will receive a letter grade.\nAll lectures will be recorded to enable students to review the lectures, but not to use as a substitute for\nattending lecture.\nLecture slides and recordings will be posted on a website dedicated for this course.\nPiazza will be used for announcements and course discussions.\nReadings and Supplementary Materials\nThere is no textbook for this course.\nFor every lecture, 1 or 2 research papers will be posted on the course website, which students are required\nto read before coming to class.\nProject\nStudents will work in groups of two or three on a semester-long project of their choice. There will be four\nmilestones:\n- Week 3: Form a group and pick a topic for your project\n- Week 6: Submit two-page project proposal\n- Week 10: Submit five-page intermediate project report\n- Week 15: Present project outcomes in class and submit ten-page final project report\nThe project counts for 40% of your final grade.\nTo help students pick a project, at the start of the semester, the instructor will discuss strategies for\nchoosing a project topic. Examples include a measurement-based characterization of a deployed or open-\nsource system, the development of a new software system, or reproducing results from the evaluation\nsection of a published paper.\nProject Groups\nDeclare the membership of your project group by the third week of the semester. After this date, we will\nform groups from the remaining students. Choose your group members carefully. You should discuss topics\nsuch as prior experience, course background, goals for this course, workload and schedule for this\nsemester, and preferred project management and work style. Make sure you can find several blocks of time\nduring the week to meet to discuss or carry out the project.\nStudents are expected to work diligently in their group for the benefit of the entire group. All group\nmembers should be familiar with all aspects of each project, irrespective of their role on the project. We\nexpect all group members to contribute their fair share, and we expect to assign the same project grade to\nall members of a group. Members who either contribute less than their share or prevent others from\ncontributing their share may receive a lower grade on the project; non-contributing members will receive\na zero. In case of disputes regarding contribution, the instructor may interview group members and inspect\ncommits to any code repository used by the group. Commits to the repository should reflect the proportion\nof work performed by each group member. If you use pair programming, take turns at the keyboard so that\nthe commit log reflects the contributions of all members.\nStudents may be fired from a group by the remaining members. The procedure for this is as follows: (1)\ndocumented \"gentle warning\" of risk of firing via both e-mail and private Piazza post (with instructor\nincluded on both), with cause and specific work required to remain in group; (2) allow at least 72 hours for\ncompliance; (3) if the problems persist, e-mail statement of firing to the group and post privately to the\ninstructors via Piazza. Fired group members may join another group; students who cannot find a group\nmust complete a project by themselves.\nManaging group dynamics and using each group member's time and talents effectively can be difficult. If\nthere are problems with your group, please see an instructor as soon as possible. Be open and candid with\nyour group about potential problems early on so your group can plan around those problems and not fall\nbehind. A sure way to make your group upset at you is not finishing your work at an agreed-upon deadline\nand not informing them about the problems early enough for them to help. Similarly, it is not okay to try to\ndo all of your group's work on a project by yourself, rather than in collaboration with your group.\nPage 2",
            "Table Description": "Assessment Tool (assignments) | Points | % of Grade\nProject |  | 40%\nQuizzes |  | 30%\nPaper presentation |  | 10%\nClass participation |  | 20%\nTOTAL |  | 100%\n\n\n"
        }
    },
    {
        "DSCI-560": {
            "Course Description": "Catalogue Course Description:\n:\nStudent teams working on external customer data analytic challenges; project/presentation based; real\nclient data, and implementable solutions for delivery to actual stakeholders; capstone to degree.\n\nExpanded Course Description:\nExpanded Course Description:\nOne of the fundamental principles of data science is the ability to live in the data. It is necessary to gain\na level of immersion in the information environment to truly apply the diverse skill sets necessary to\nboth become an effective analyst, and provide customers solutions to hard problems. While students\nwill get a sense of this paradigm in many of the courses focused on knowledge and skill enhancement\nthroughout their degree matriculation, the goal of this course is to combine previously learned\ncapabilities and apply them against actual data sets, in real data environment, and toward solving\ndifficult challenges for an external stakeholder.\nThe Data Science Professional Practicum is a capstone experience designed to allow students exposure\nto the world of data analytics from the perspective of the organization. Students will work with external\nstakeholders on a project that answers an organizational problem. Each semester, the data science\nprogram will partner with an external organization, which will pose a broad business requirement to the\nclass. Students will team and propose projects around this requirement and be responsible for\ndelivering a data science-based solution to the stakeholder. This product will consist of a not less than\n50-page report detailing the proposal, methods utilized in the analysis, the output from the analysis, and\nDSCI 560: Data Science Professional Practicum\nconclusions and recommendations based on the study. Students will also be responsible for a not less\nthan 30-minute presentation on their project to the stakeholder.\nA possible example of a capstone project would be: Google volunteers to be the external partner. They\nobviously are one of the main collectors and brokers of information in the world. One of their areas of\nphilanthropic interest is disease monitoring. Google might pose the question “How can the data Google\ncollects in general could be better utilized to inform on disease, or help mitigate disease, in various\nareas in the world?” It would be up to the student teams to proposal a project plan, design a study,\nimplement the analysis, and report conclusions and recommendations.\nThe Professional Practicum (DSCI 560) provides an opportunity to face real-world challenges and to\ndevelop your personal innovative project in cooperation with the members of your team. The\ncombination of industry and academic experiences will provide a peek at what to expect as a data\nscience experts and data scientist, in addition to providing project management techniques such as lean\nsix sigma aimed at efficiency and effectiveness.",
            "Learning Objective": "• Expected learning outcomes for students are:\n• To understand how to apply the various engineering and business principles\n• studied in Data Science curriculum toward solving an organizational\n• challenge\n• To handle difficulties associated with defining and organizing a realistic problem\n• Statement\n• To manage impediments in obtaining information and approval\n• To present and sell ideas to higher-level management\n• To understand the importance of the need for a continuous exchange between engineers,\nmanagement and employees in solving an existing problem, given a set of constraints\n• To meet aggressive deadlines in a multidisciplinary team effort\n• To improve project-based presentation skills, both in-class and in company settings\n• To understand the requirements and objectives of customers, how these vary, and how one\nmust tailor a solution to the expectations of a customer\n• To understand how data science are viewed in diverse domains; and how solutions and\napproaches will differ in various fields\n• To understand how to work with individuals from diverse domain (engineering, business, etc.) to\naccomplish a common goal\nStudents are expected to have foundational knowledge in data management, machine learning, data\nmining, and data visualization, as well as other topics associated with the Data Science degree program.\nThe course can be taken by students in the ISE Analytics program and/or the Marshall Business Analytics\nprogram (being created) as well as the Data Science program. Course is usually taken after other courses\nin the program. This class will be primarily group work, with some assigned readings, and a major\nproject and presentation that will count for the primary grade in the course.",
            "Table Description": "Week |  |  | Topic |  |  | Readings/Notes |  |  | Homework | \nWeek 1 | Week 1 |  |  | Orientation, |  | Overview of project management in\nData Science\nPost-class, teams will be formed | Overview of project management in |  | Ref: Fundamentals of\nProject Management\n(Worksmart) : Joseph\nHeagney | Ref: Fundamentals of | \n |  |  |  | Requirement Outline, |  |  | Data Science |  |  | Project Management | \n |  |  |  | Developing Project |  |  | Post-class, teams will be formed |  |  | (Worksmart) : Joseph | \n |  |  |  | Ideas, Fundamentals |  |  |  |  |  | Heagney | \n |  |  |  | of Project |  |  |  |  |  |  | \n |  |  |  | Management |  |  |  |  |  |  | \n |  |  | External\nPartner presentation,\nLean Thinking, Lean\nSix sigma,\nDeliverables, DMAIC1,\nAnalytics in the “real\nworld” |  |  | The external sponsor will present and\nchallenge the class\nProposals briefs (1-3 pages outlining\n“big idea”) will be completed |  |  |  |  | \nWeek 3 |  |  |  | Value stream mapping |  |  | Project Initiation; Prepare Monthly |  | Proposal\nBriefs Due\n(assignment 1) |  | \n |  |  |  | , Quality, Variability, |  |  | Report |  |  |  | \n |  |  |  | and Role of the |  |  | Proposal Brief Review – schedule |  |  |  | \n |  |  |  | Analyst |  |  | time with instructor |  |  |  | \n |  |  | Root Cause Analysis,\nTeams, People, Lean\nEngineering |  |  | Schedule Time to Meet with\nInstructor |  |  |  |  | \nWeek 5 |  |  |  | Understanding |  | You must meet with your instructor\nthis week to review monthly report |  |  | NA |  | \n |  |  |  | the Analytics |  |  |  |  |  |  | \n |  |  |  | Product in |  |  |  |  |  |  | \n |  |  |  | Business, Improve |  |  |  |  |  |  | \n |  |  | Total project\nmanagement and\nTheory of Constraints |  |  | Project Work Time |  |  |  |  | \nWeek 7 |  |  | Mid-Term\nReview |  |  |  | Half of class dedicated to mid-term |  | Team Presentation on\nMonthly report |  | \n |  |  |  |  |  |  | review |  |  |  | \n |  |  |  |  |  |  | Remainder of class dedicated to |  |  |  | \n |  |  |  |  |  |  | project presentation |  |  |  | \n |  |  | Mid-Term,\nProject Work Time |  |  | Mid-Term\nSchedule meeting with instructor |  |  |  |  | \nWeek 9 |  |  | Stakeholder\nSession |  |  |  | Stakeholder will be in class to review |  | Instructor\nMeeting |  | \n |  |  |  |  |  |  | progress, answer questions, Students |  |  |  | \n |  |  |  |  |  |  | will provide the presentations. |  |  |  | \n |  |  |  |  |  |  | You must have had your second |  |  |  | \n |  |  |  |  |  |  | instructor review meeting by the end |  |  |  | \n |  |  |  |  |  |  | of this week |  |  |  | \n\n\n\n\n |  |  | Leadership &\nInnovation in Start-ups |  |  | Guest Lecturer on the topics of Data\nanalytics\nManagement, Leadership and\nentrepreneurship.\nCorrection and discussion of Midterm\nexam. |  |  | \nWeek 11 |  |  |  | Understanding |  |  | Review expectations of the analyst in |  | Second Monthly\nReport Due\n |  |  |  | the Analytics |  |  | the Retail Industry and marketing. |  | \n |  |  |  | Product in |  |  | Schedule time to meet with |  | \n |  |  |  | industry |  |  | instructor |  | \n |  |  | Business Data Science |  |  | Guest Lecture on the topics of\nanalytics and “Big Data”.\nSchedule time to meet with\ninstructor |  |  | \nWeek 13 |  |  | Dress\nRehearsal |  |  |  | For those who desire, they will be |  | Presentations\n |  |  |  |  |  |  | able to go over their reports and |  | \n |  |  |  |  |  |  | presentations with the instructor, |  | \n |  |  |  |  |  |  | and receive feedback |  | \n |  |  |  |  |  |  | before presenting to the customer |  | \n |  |  | Project Presentations |  |  | Presentations will conclude\nAll projects must be submitted before\nfinal class |  |  | \n | Week 15 |  |  | Projects Due |  | Team presentation |  |  | Final Project Due\n |  |  |  |  |  |  |  |  | \n |  |  | Stakeholder\nSummit |  |  | Stakeholder will be in class for\nStudent presentations and final\nreports |  |  | \n\n\n"
        }
    },
    {
        "CSCI-467": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course provides a broad introduction to machine learning, a family of methods through which\nprograms can infer desired behavior from data. We will start with supervised learning, where our goal is to\nlearn an input-to-output mapping given a set of correct input-output pairs. Next, we will study unsupervised\nlearning, which seeks to identify hidden structure in data. Finally, we will cover reinforcement learning, in\nwhich an agent learns from observations it makes as it explores the world. The course will focus both on\napplying machine learning techniques and on theoretically understanding these methods and their\nalgorithmic properties.",
            "Learning Objective": "By the end of this course, students will be able to apply machine learning techniques—including supervised\nlearning, unsupervised learning, and reinforcement learning—to a wide variety of problem domains. This\nincludes being able to choose appropriate methods, implement them, evaluate them, and diagnose factors\ncontributing to poor performance. They will also be able to prove properties of machine learning algorithms\nand derive new machine learning algorithms to suit new problems.\nPrerequisite(s): CSCI 270, MATH 225, EE 364 or MATH 407 or BUAD 310\nCourse Notes\nGrading type: Letter or Credit/No Credit\nTechnological Proficiency and Hardware/Software Required\nAssignments will require a computer with python and the ability to install python packages. Students must\ncomplete programming assignments in python 3.\nOptional Readings and Supplementary Materials\nThere are no required readings for this class. You may find the following references useful:\n• Probabilistic Machine Learning: An Introduction (PML) and Probabilistic Machine Learning:\nAdvanced Topics (PML2) by Kevin Murphy\n• The Elements of Statistical Learning by Trevor Hastie, Robert Tibshirani, and Jerome Friedman\n• Patterns, Predictions, and Actions: A Story about Machine Learning by Moritz Hardt and Benjamin\nRecht\n• Fairness and Machine Learning: Limitations and Opportunities (FAML) by Solon Barocas, Moritz\nHardt, and Arvind Narayanan.\nDescription and Assessment of Assignments\nGrades will be based on homework assignments (40%), a class project (20%), and two exams (40%).\nThe final project can be done individually or in groups of up to 3. This is your chance to freely explore\nmachine learning methods and how they can be applied to a task of our choice. You will also learn about\nbest practices for developing machine learning methods—inspecting your data, establishing baselines, and\nanalyzing your errors.\nGrading Breakdown\nAssessment Tool (assignments) % of Grade\nHomework 0 4%\nHomework 1-4 9% each = 36%\nProject proposal 2%\nProject midterm report 3%\nProject final report 15%\nMidterm exam 15%\nFinal exam 25%\nTOTAL 100%\nGrading Scale\nThe course will use the following grading scale as a default:\nLetter grade Corresponding numerical point range\nA [95, ∞)\nA- [90, 95)\nB+ [87, 90)\nB [83, 87)\nB- [80, 83)\nC+ [77, 80)\nC [73, 77)\nC- [70, 73)\nD+ [67, 70)\nD [63, 67)\nD- [60, 63)\nF [0, 60)\nWe may alter this grading scale but only to lower these thresholds, i.e., only to make the final letter grades\nhigher.\nAssignment Submission Policy\nAssignments should be submitted on Gradescope. All assignments will be due by 11:59pm on the due date.\nFor additional information, see the course website.\nPage 2",
            "Table Description": "| Topics/Daily Activities | Readings/Preparation | Deliverables\nWeek 1 | Introduction; Linear Regression | PML 1, 7.8, 8.1-8.2 | \nWeek 2 | Featurization, Normal Equations, Maximum\nLikelihood Estimation; Logistic Regression,\nSoftmax Regression | PML2.6.3, 4.2, 11.1-\n11.2, 10.1-10.4 | Homework 0 due\nWeek 3 | Regularization, Bias and Variance; Generative\nClassifiers, Naïve Bayes | PML 4.5, 4.7, 11.3-11.4,\n9.3-9.4 | \nWeek 4 | Nearest Neighbors, Locally Weighted Linear\nRegression, Kernel methods | PML 16.1, 16.3, 17.1 | Homework 1 due\nWeek 5 | Convexity, Second-Order Optimization,\nSupport Vector Machines | PML 8.1, 8.3, 4.3, 17.3 | Project Proposal\ndue\nWeek 6 | Generalization bounds; Introduction to Neural\nnetworks | PML 5.4, 13.1-13.3 | \nWeek 7 | Dropout, Optimizing Neural Networks,\nConvolutional Neural Networks, Weight\nSharing | PML 13.4-13.5, 14.1-\n14.2 | \nWeek 8 | Recurrent neural networks, Vanishing\nGradients, Attention, Transformers | PML 15.1-15.2, 15.4-\n15.7 | Homework 2 due\nWeek 9 | Decision Trees, Ensembles; In-class Midterm\nExam | PML 18.1-18.5 | \nWeek 10 | k-Means Clustering, Gaussian Mixture Models,\nExpectation Maximization | PML 21.3-21.4; PML2\n8.1-8.2 | Project Midterm\nReport due\nWeek 11 | Hidden Markov Models, Dimensionality\nReduction, Principal Component Analysis | PML2 29.1-29.4; PML\n20.1, 20.4 | \nWeek 12 | Learned embeddings, Word Vectors; Multi-\narmed Bandits | PML 20.3, 20.5; PML2\n34.1-34.4 | Homework 3 due\nWeek 13 | Markov Decision Processes, Reinforcement\nLearning | PML2 34.5-34.6, 35.1-\n35.4 | \nWeek 14 | Robustness, Adversarial Examples,\nDistribution Shift, Fairness in ML | PML2 19.1-19.8; FAML\n1-4 | Homework 4 due\nWeek 15 | Active Learning; Conclusion | PML2 34.7 | \nFINAL | Final Exam May 4, 2-4pm |  | Project Final\nReport due May 9\n\n\n"
        }
    },
    {
        "CSCI-670": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n: The topics covered and the corresponding chapters and sections in the\ntextbook are as follows:\n Introduction\no Divide and conquer: 4.2, 4.5.\no Heapsort: 6.1 - 6.5.\no Lower bounds for sorting 8.1\n Design and analysis techniques\no Dynamic programming: Ch. 15.\no Greedy algorithms: 16.1, 16,2, 16.3.\no Amortized analysis: 17.1 - 17.3.\n Advenced Data structures\no Fibonacci Heaps: Ch. 19\n Graph algorithms:\no Minimum spanning trees: 23.1 - 23.2.\no Shortest Paths: 24.1 - 24.3, 25.1 - 25.3.\no Maximum Flow: 26.1 - 26.2.\n Number Theoretic Algorithms: 31.1 - 31.7\n NP-Completeness: 34.1 - 34.5.\n Approximation Algorithms: 35.1 - 35.3.\nClass Structure:\n Homework: There will be about 8 assignments. They will be posted under\nAssignments.\n Exams: There will be four in-class quizzes on homework problems. Your\nhomework grade will be based on the scores of these quizzes. There will be an in-\nclass midterm exam and a final exam. The exams are closed book and closed\nnotes.\nDate Location\nQuiz 1 Wed., Sep. 9 SSL 150\nQuiz 2 Wed., Sep. 30 SSL 150\nMidterm Wed., Oct. 14 SSL 150\nQuiz 3 Wed, Nov. 4 SSL 150\nQuiz 4 Mon., Nov. 23 SSL 150\nFinal Exam Mon., Dec. 14, 8-10am TBD\n Grading Policy:\nHomeworks 40%\nMidterm 30%\nFinal Exam 30%\nStatement for Students with Disabilities\nAny student requesting academic accommodations based on a disability is required to\nregister with Disability Services and Programs (DSP) each semester. A letter of\nverification for approved accommodations can be obtained from DSP. Please be sure the\nletter is delivered to me (or to TA) as early in the semester as possible. DSP is located in\nGFS 120 and is open 8:30 a.m.-5:00 p.m., Monday through Friday. The phone number\nfor DSP is (213) 740-0776.\nThe email: ability@usc.edu\nStatement on Academic Integrity\nUSC seeks to maintain an optimal learning environment. General principles of academic\nhonesty include the concept of respect for the intellectual property of others, the\nexpectation that individual work will be submitted unless otherwise allowed by an",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "DSCI-549": {
            "Course Description": "Catalogue Course Description:\nIntroduction to data analysis techniques and associated computing concepts for non-programmers. Topics\ninclude foundations for data analysis, visualization, parallel processing, metadata, provenance, and data\nstewardship.\n\nExpanded Course Description:\nExpanded Course Description\nThis course will teach non-programmers to think in computing terms about modern topics and to approach\nreal-world phenomena through data science. The course will enable students to:\n• Acquire computational thinking skills that will enable students to represent and reason about\ncomplex problems in the digital arena\n• Understand different kinds of data in terms of their possibilities and limitations to approach\ncomplex problems cast in terms of the emerging field of data science\n• Become data science scholars through best practices in data documentation and dissemination\nThe course is intended for students in disciplines outside of computer science, so no prior experience with\ncomputer science is assumed. The course topics will be particularly relevant to students interested in\nphysical sciences and social sciences.\nThis class will include five homework assignments, a midterm and a final exam.",
            "Learning Objective": "This course teaches non-programmers to think in computing terms about modern topics and to approach\nreal-world phenomena through data science. The course introduces different kinds of data and\ncorresponding approaches to data analysis, including geospatial data, time series, networks, and\nmultimedia data. Students learn to run multi-step analyses and will experience high-level, complex\nconcepts in data science, such as parallel computing, provenance, and visualization. Students also learn to\nuse ontologies and logic representations to capture metadata and other knowledge about complex data.\nThe course includes practical lessons on using representation and analysis tools and best practices for data\nstewardship and dissemination.\nPrerequisite(s): none\nCo-Requisite (s): none\nRecommended Preparation: Mathematics and logic undergraduate courses.\nSoftware and Supplementary Readings\nAll required software is freely available for students to install on their personal computers or to access\nthrough a web interface.\nThere is no textbook. Students can find all the supplementary readings online. Supplementary readings\ninclude:\n• “Computational Thinking.” J. M. Wing. Communications of the ACM, viewpoint, vol. 49, no.3, March\n2006.\n• “Data Science in the News: Advances and Challenges for the Era of Big Data.” Kate Musen, Alyssa\nDeng, Taylor Alarcon, Yolanda Gil. Technical Report ISI-TR-702, Information Sciences Institute,\nUniversity of Southern California. August 24, 2015.\n• “Ten Simple Rules for the Care and Feeding of Scientific Data.” Goodman, A.; Pepe, A.; Blocker, A. W.;\nBorgman, C. L.; Cranmer, K.; Crosas, M.; Stefano, R. D.; Gil, Y.; Groth, P.; Hedstrom, M.; Hogg, D. W.;\nKashyap, V.; Mahabal, A.; Siemiginowska, A.; and Slavkovic, A. PLOS Computational Biology, 10, 2014.\n• “Intelligent Workflow Systems and Provenance-Aware Software.” Y. Gil. Proceedings of the Seventh\nInternational Congress on Environmental Modeling and Software, San Diego, CA, 2014.\n• “Data Science for Business”, Foster Provost and Tom Fawcett. O’Reilly Media publishers, 2013.\n• “A Primer for the PROV Provenance Model.” Gil, Y.; Miles, S.; Belhajjame, K.; Deus, H.; Garijo, D.; Klyne,\nG.; Missier, P.; Soiland-Reyes, S.; and Zednik, S. World Wide Web Consortium (W3C) Technical Report,\n2013.\n• “The Ethics of Data Sharing and Reuse in Biology.” Duke, C. S., & Porter, J. H. BioScience, 63(6), 483–\n489, 2013. doi:10.1525/bio.2013.63.6.10\nDescription and Assessment of Homework Assignments\nThere will be 5 homework assignments. The assignments must be submitted individually and students will\nreceive individual scores. Students may NOT work in groups to complete the tasks. The homework\nassignments are expected to take 6-8 hours. Each assignment is graded on a scale of 0-100. The\nhomework topics are listed in the Course Schedule.\nAssignment Submission Policy\nHomework assignments are due at 11:59pm on the due date and should be submitted in Desire2Learn\n(D2L). Homework can be accepted up to 1 week late , however, the student must request a late submission\nahead of time, and the assignment will be graded at 20% less than the possible points for the assignment.\nAfter one week, the assignment will not be graded. Exceptions to this “one week/planned/20% less” rule\nwill only be made with a note from a professional: for illness or family caregiving due to illness, religious\nobservances, or USC athletic event.\nSyllabus for DSCI 549 Fall 2020, Page 2",
            "Table Description": "| Week |  |  | Topic |  |  | Material Covered |  |  | Homework assigned | \n | Section I: Introduction to Computational Thinking and Data Science |  |  |  |  |  |  |  |  |  | \nWeek 1\n24 Aug |  |  | Computational\nthinking and\ndata science\n(on Zoom) |  |  | • What is computational thinking\n• Computational thinking for\nreasoning and analysis\n• What is data science\n• Data scientists\n• The context of data science |  |  |  |  | \n |  |  | Data |  |  | • What is data\n• What is not (yet) data\n• Time series data\n• Networked data\n• Geospatial data\n• Text data\n• Labeled and annotated data\n• Big data |  |  |  |  | \nWeek 2\n31 Aug |  |  | Data analysis\nsoftware |  |  | • Programs for data analysis\n• Inputs and Outputs\n• Program Parameters\n• Programming Languages\n• Programs as Black Boxes\n• Algorithms versus software |  |  |  |  | \n |  |  | Multi-step data\nanalysis as\nworkflows |  |  | • Building workflows by composing\nsoftware\n• Pre-processing and post-\nprocessing data\n• Workflows for data analysis\n• Workflow inputs and parameters\n• Executing workflows\n• Exploring data through workflows\n• Workflows in practice |  |  |  |  | \n | Section II: Data Analysis |  |  |  |  |  |  |  |  |  | \nWeek 3\n7 Sep |  |  | Logic and\nprobability for\nstatistics |  |  | • Basic probability for statistics\n• Logic for statistics\n• Null hypothesis significance\ntesting\n• Sampling distributions |  |  | Homework HW1:\nAnalyzing data |  | \n |  |  | Basic statistics |  |  | • Descriptive statistics\n• Inferential statistics\no T-tests\no ANOVAs\no Chi-squared tests |  |  |  |  | \n\n\n\n\n |  | o Correlation | \nWeek 4\n14 Sep | Data analysis\ntasks (I) | • Data analysis tasks in data mining,\nstatistics, and machine learning\n• Supervised learning\no Classification tasks\no Classification algorithms\no Evaluation of classifiers | \n | Data analysis\ntasks (II) | • Unsupervised learning\no Clustering\no Pattern detection\no Anomaly detection\n• Simulation and prediction | \nWeek 5\n21 Sep | Data analysis\ntasks (III) | • Causality\no Probabilistic graphical\nmodels\no Bayesian networks\no Causal models | Homework HW2:\nProcessing Different\nTypes of Data\n | Data analysis\ntasks (IV) | • Networks\no Network structure\no Dynamic networks\no Scale-free networks | \n | Analyzing\ndifferent kinds\nof data (I) | • Time series\no Collecting time series data\no Pre-processing time series\ndata\no Event detection\no Granger causality | \nWeek 6\n28 Sep | Analyzing\ndifferent kinds\nof data (II) | • Analyzing text data (NLP)\no Pre-processing text\no Document classification\no Document clustering\no Topic detection\no Sentiment analysis | \n | Analyzing\ndifferent kinds\nof data (II) | • Analyzing multimedia data\no Pre-processing images\no Segmentation\no Edge detection\no Object detection\no Video analysis\n• Analyzing geospatial data\no Coordinate systems\no GIS systems | \n | Data\nvisualization | • Quality of visualizations | \n\n\n\n\n |  |  | • Major types of visualizations\n• Time series visualizations\n• Geospatial visualizations\n• Multi-dimensional spaces\n• Network visualizations |  | \nWeek 7\n5 Oct |  | MIDTERM\nEXAM | • Midterm exam |  | \nWeek 8\n12 Oct |  | NO CLASS | Fall recess |  | \n | Section IV: User interfaces and user studies |  |  |  | \nWeek 9\n19 Oct |  | User\nexperience,\nuser interfaces,\nuser studies | • UX/UI Design Principles\n• AB testing\n• User study design | Homework HW3:\nData Visualization\nand Representation | \nWeek\n10\n26 Oct |  | Analysis for\nexperiments | • Advanced analysis for\nexperiments\n• Appropriate statistical tests |  | \n |  | Causal claims\nfrom user\nstudies | • Correlational research\n• Comparing correlational research\nto experiments\n• Ensuring internal validity |  | \n | Section V: Data analysis at scale |  |  |  | \nWeek\n11\n2 Nov |  | Parallel and\ndistributed\ncomputing for\nbig data (I) | • Cost of computation\n• Divide and conquer\n• Speedup with parallel processing\n• Limits of speedup: Critical path\n• Amdahl’s law\n• When problems are not\nparallelizable | Homework HW4:\nData analysis and\nresearch methods | \n |  | Parallel and\ndistributed\ncomputing for\nbig data (II) | • Multi-core computing\n• Distributed computing\n• Cluster computing\n• Cloud computing\n• Grid computing\n• Virtual machines\n• Web services\n• Practical concerns in distributed\ncomputing\n• Parallel programming languages |  | \n\n\n\n\nWeek\n12\nSheet\n9 Nov |  | Databases and\ndata lakes | • Handling and structuring data\n• Relational databases\n• Distributed databases\n• Data warehouses\n• Data lakes |  | \n | Section VI: Metadata |  |  |  | \nWeek\n13\n16 Nov |  | Semantic\nmetadata\n& Ontologies | • What is metadata\n• Basic metadata versus semantic\nmetadata\n• Metadata about data collection\n• Metadata about data processing\n• Metadata for search and retrieval\n• Metadata standards\n• Domain metadata and ontologies\n• What is an ontology\n• Taxonomies and class inheritance\n• Properties\n• Logical constraints | Homework HW5:\nData analysis and\nresearch methods | \n |  | Provenance\nand standards | • What is provenance\n• Provenance models\n• Provenance standards\n• Data formats and standards\n• Data repositories and services\n• Data sharing\n• Data identifiers\n• Licenses for data\n• Data citation and attribution\n• Software and other work products |  | \nWeek\n14\n23 Nov |  | NO CLASS | Thanksgiving |  | \n | Section VII: Data lifecycle |  |  |  | \nWeek\n15\n30 Nov |  | Data lifecycle | • Data collection and storage\n• Data cleaning\n• Data extraction and querying\n• Data preparation\n• Quality control\n• Data integration |  | \n |  | Privacy and\nethics | • Privacy\n• Sensitive data\n• Anonymization |  | \n\n\n\n\n |  | • Research ethics | \n |  | • Question and answer | \n\n\n"
        }
    },
    {
        "CSCI-699": {
            "Course Description": "Catalogue Course Description:\nProbabilistic and generative models, including approximate inference algorithms (MCMC, variational\ninference), deep generative models (autoregressive, score-matching, diffusion, and flow-based models),\nand model-based sequential decision making.\n\nExpanded Course Description:\nCourse Description\nThis course focuses on the foundational principles of probability and its central role within modern machine\nlearning and generative modeling. With probability increasingly driving advancements in AI, this course will\nexplore its applications across a range of topics. From approximate inference algorithms, to generative models\nvia large-scale self-supervised learning, to probabilistic-model based decision-making methods, you will gain a\ndeeper understanding of how these methods shape contemporary AI research.",
            "Learning Objective": "Through this course, you will be introduced to core topics in probabilistic machine learning, including\nprobabilistic graphical models and approximate inference algorithms (e.g., MCMC and variational\ninference), deep generative models (e.g., autoregressive, score-matching, diffusion, and flow-based\napproaches), and methods for probabilistic model-based sequential decision-making (e.g., Bayesian\noptimization, and information-based experimental design). By the end of this course, you will have gained\nfamiliarity with both cutting-edge research and the historical foundations of the field.\nRecommended Preparation\nThis course is designed for students currently pursuing research, or who wish to pursue research, in\nprobabilistic machine learning or deep generative models. It will be beneficial to have familiarity with\nmachine learning (at the level of CSCI 567), algorithms (at the level of CSCI 570), and probability (at the level\nof MATH 505a). Students are expected to be comfortable with reading and presenting modern machine\nlearning conference papers.\nCourse Notes\nGrading type: letter grades. Copies of lecture slides and other class information will be posted on the course\nwebsite.\nTechnological Proficiency and Hardware/Software Required\nThere are no specific software requirements for this course.\nThis class will periodically plan to use portions of lectures for in-class (practical) “lab sessions”, to provide\nmore hands-on experience with the theoretical concepts that we will learn. These sessions will involve\nrunning code and using implementations of probabilistic and generative models. It is therefore encouraged\n(though not required) that students bring a laptop with them to each class, so that they can follow along\nand participate in these practical lab sessions. These sessions will also be helpful for implementation skills\nthat may be used in the course project running over the course of the semester. Additionally, please see the\nfollowing information about the USC Computing Center Laptop Loaner Program (link).\nRequired Readings and Supplementary Materials\nThere are no required readings, supplementary materials, or textbook in this class.\nOptional Readings and Supplementary Materials\nThe following resources are useful for many of the topics covered in this class:\n1. Kevin Murphy, “Machine Learning: A Probabilistic Perspective”, 2012 (link).\n2. Kevin Murphy, “Probabilistic Machine Learning: Advanced Topics”, 2023 (link).\n3. Chris Bishop, “Pattern Recognition and Machine Learning”, 2006 (link).\n4. Chris Bishop, “Deep Learning - Foundations and Concepts”, 2024 (link).\n5. Stefano Ermon, Deep Generative Models, Course Notes (link).\nPage 2 of 8",
            "Table Description": "| Topics/Daily Activities | Deliverables\nWeek 1 | Introduction to probabilistic machine learning.\na. Applications in deep generative modeling and decision making.\nb. Review of core concepts: sampling, (approximate) inference, learning. | \nWeek 2 | Probability fundamentals and review.\na. Probabilistic modeling preliminaries: useful definitions, terminology, and\nformulas.\nb. Where these fundamentals appear in modern machine learning models. | \nWeek 3 | Probabilistic modeling and PGMs.\na. Types of probabilistic graphical models (PGMs), plate notation.\nb. Overview on learning and approximate inference in PGMS. | Project pitch due.\nWeek 4 | Learning in PGMs: classic algorithms.\na. Expectation Maximization (EM) algorithm.\nb. Forward-backward, Viterbi, Baum–Welch, and belief propagation\nalgorithms. | \nWeek 5 | Approximate Bayesian inference.\na. Markov-chain Monte Carlo (MCMC).\nb. Variational inference (VI). | \nWeek 6 | Probabilistic (deep) generative models.\na. Paradigms of generative modeling.\nb. Overview of model types: autoregressive, diffusion/score-based, flow-\nbased. | HW 1 due.\nWeek 7 | Autoregressive generative models.\na. Large language models (LLMs) from a probabilistic perspective.\nb. Decoding in LLMs. | \nWeek 8 | VAEs and GANs.\na. Variational autoencoders (VAEs).\nb. Generative adversarial networks (GANs). | \nWeek 9 | Diffusion models.\na. Score-based and diffusion generative models.\nb. Recent advances in diffusion modeling. | Midway report due.\nWeek 10 | Flow-based models.\na. Normalizing flows.\nb. Continuous normalizing flow, neural ODEs.\nc. Score-matching. | \nWeek 11 | Predictive uncertainty quantification.\na. Gaussian processes (GPs), Bayesian neural networks (BNNs), and more.\nb. Ensemble models and dropout. | HW 2 due.\nWeek 12 | Active learning.\na. Sequential decision making via probabilistic models.\nb. Bayesian optimization and optimal experimental design.\nc. Acquisition functions. | \nWeek 13 | Generative models in decision making.\na. Diffusion for planning and generative design. | \nWeek 14 | Project presentations | Group project presentation due.\nWeek 15 | Project presentations | \nFINAL | Final Project Report | Refer to the final exam schedule\nin the USC Schedule of Classes at\nclasses.usc.edu."
        }
    },
    {
        "CSCI-103 L": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThisclassisanintroductiontocomputerprogramming,usingC++astheprogramminglanguage.Youwill\nlearnaboutvariables,types,loops,conditionalstatements,functions,input/output,arrays,recursion,\ndynamicmemory,object-orientedprogramming,performance,andseveraldatastructures.Youwillgeta\nlotofpracticereading,writing,anddebuggingcomputerprograms.Weassumesomebasicprogramming\nexperience(eg.CSCI102),whichwillbereviewedatthebeginningofthesemesterfollowedbyafairlyfast\npacedcourse.Thoseneedinganon-ramptoprogrammingarerequiredtotakethe2-unitCS102course\nbeforeCS103.",
            "Learning Objective": "Belowarethespecific,measurableskillsastudentwilldemonstratebytheendofthecourse.These\nobjectiveswillbebothtaughtandassessedinthecourseandarealignedwiththeassignments,\nassessmentsandlearningmaterials.\n1.Writecomputerprogramsusingconditionalanditerativestructures,andfunctionaldecomposition.\n2.Developsimplealgorithmstosolvecomputationalproblems.\n3.Determinethecomputationalcomplexityofsimplealgorithms.\n4.Implementkeyalgorithmswithinthefield.\n5.Performfunctionaldecompositionandtracerecursivesolutions.\n6.Selectandimplementappropriatebasicdatastructures(e.g.arrays,linked-lists,array-basedlists)\nandtheiraccessmethods(e.g.pointers)\n7.Correctlyandefficientlymanagememoryandthelifetimeofobjects\n8.CreateprogramsthatutilizebothterminalandfileI/Omethodstoperformdataanalysis.\n9.Applyobject-orienteddesignprinciples.\n10.Usecommandlinedevelopmenttoolsneededtowrite,compile,anddebugbasicC++programs.\nPrerequisite(s):CS102(StudentsmustcompleteCSCI102,orpassitschallengeexam,orhaveAP\nComputerScienceAcredittoenrollinthiscourse.)Thismeansyoumusthaveaworkingunderstandingof\nJava,C,orC++.\nCo-Requisite(s):None\nRecommendedPreparation:Proficiencyinhighschoolmath(includingtrigonometry,algebra,andbasic\nprobability).\nCourseMaterials\nAllcontentwillbeprovidedonourwebsite:http://bytes.usc.edu/cs103.PDFversionsoflectureslideswillbe\npostedonourwebsitebeforelectureandmaybeprintedbeforecomingtoclassorusedelectronically.\nCourseWebsites\n1.Primarywebsite:Allcourseassignments,content,officehourinformation,etc.willbepostedatour\nmainwebsite:http://bytes.usc.edu/cs103.\n2.Q&Awebsite:AQ&Aandannouncementwebsite,EdStemwillbeutilized:Allofficial\nannouncementsregardingassignments,lectures,exams,etc.willbemadeviaEdStem.Itisyour\nresponsibilitytocheckthissiteoften.Seethecoursewebsiteforalinktothediscussionboard.\n3.Brightspace:Brightspace(http://brightspace.usc.edu)willalsobeusedtorecordhomework,quiz,and\nexamgrades.\n4. Codio: Lab and homework code submissions will bemadeviaCodio.comClicktheCodiolinkonthe\ncoursewebsitetoregister.Costis~$45.\n5.Gradescope:Usedforexamsandsomehomework.\nAttendance\nIn-personattendanceistheonlysupportedmodeforlectureandlab.Ingeneralwewillnotrecordtheclass\nlecture.However,wemayalsoperiodicallypostrecordingsforreviewandstudy.Weencourageyoutoreview\nlecturenotes,attendofficehours,andformstudygroupsinplaceofrelyingonrecordedlecturesforreview.\nLabs:Labsarein-persononly.Ourlabgradingpolicyisdesignedforflexibilitywithanumberofallowed\nabsencesintendedtocoverthecaseofillnessorunavoidablescheduleconflicts.Pleasenote:saveyourlab\nabsencesforwhenyoureallyaresickorunabletoattendvs.justsleepinginorwantingtogooutoftownfora\nlongweekend.Ifyouhaveusedallyourabsencesandthenareunabletoattend,youwillnotgetcreditforthat\nlab (exceptforextraordinarysituationsdeterminedonacase-by-casebasis).\nTechnologicalProficiencyandHardware/SoftwareRequired\nAlaptopandInternetconnectionarerequiredtocompletehomeworksandotherassignments.Examswillalso\nbegivenusingonlinemethods,soalaptopwith90min.ofbatterylifeisrequired.\nReadingsandSupplementaryMaterials\nThefollowingtextbooksarerequire-mended(technicallyNOTrequiredbutstronglyrecommended)andwillbe\nreferencedforreadingsandamajorsourceofexercisesandpracticeproblems.Werecommendyoureadthe\nsectionslistedonthecourseschedulebelowforthecorrespondingweekBEFOREattendingthefirstlectureof\nthatweek.\n1.BriefC++LateObjects,CayHortsmann,JWileyandSons,(ISBN:978-1119739708)ortheolderedition:\nC++ForEveryone,2ndEd.,CayHorstmann,JWileyandSons,2012(ISBN:978-0470927137)Available\natthebookstoreandorfromanonlineretailer.\nDescriptionandAssessmentofAssignments\nHomeworksandProjects\nAvailability:HomeworkandprojectswillbemadeavailableonCodio\nDuedatesandCodio:TheduedateofeachassignmentisshownontheHW/Projectswebpage.Thisis\nthe datebywhichtheassignmentshouldbedoneforfullcredit.YouMUSTmarkyourassignment\n“COMPLETE”BEFOREtheduedate.Ifyouarenotdonewiththeassignmentyoumaycontinuetowork\non itaftertheduedatewithlatepenalties(seebelow)applied.Ifyoumarkyourhomeworkcomplete\nandthenrealizeyouwanttomodifysomething,youmayre-openyourassignment,howeverifyoudoso\naftertheduedateyouwillincurthepenaltiesbelow(evenifyoudon’tmakeanychanges)andthenyou\nwill needtomarkitascompletewhenyouaredone.\nGrading/Rubric:AsyoucompleteportionsofyourHWcodeyouwillneedtorunchecksinCodio.You\nshouldalwaysreviewtheseresultstoensureyourprogramis outputtingthedesiredinformationinthe",
            "Table Description": ""
        }
    },
    {
        "CSCI-698": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nBelow are the first two pages of the course website which is located at csci698.com\nThe Schedule of Lectures tab contains a list of all of the topics to be covered\nThis semester, Spring, 2021 all meetings will be handled remotely and via zoom.\nThere are no exams. Students will be graded based either on their class presentations or on\nreports. See the Schedule of Lectures and Assignments pages for details",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "CSCI-673": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n1. Course description:\nThis is a course in software engineering, with an emphasis on design and production. It focuses\non building web-based applications and services because of their obvious relevance to students\nand professionals in building practical skills. In addition to teaching the fundamental notions of\nstructuring a network or web application, and how to write modular and elegant code, the course\nemphasizes behavioral and conceptual design: that is, designing the external behavior of the\nsoftware rather than its internal structure. I believe that this aspect of design is the most important\nin practice, the least well-understood by students, and the one that is hardest to acquire in\nstandard industrial settings.\nModern techniques and methods employed in the development of large software systems,\nincluding a study of each of the major activities occurring during the lifetime of a software system,\nfrom conception to obsolescence and replacement. Topics include cost/performance evaluation,\ndocumentation requirements, system design and production techniques, system verification\ntechniques, automated aids to system development, and project organization and management.\nFor the latest course information go to https://njit.instructure.com/courses/39027\nThe information below should help you plan and organize your preparation during the semester.\n2. Prerequisite courses and knowledge:\n• Prerequisite course: None\n• Required background:\no The students are required to have knowledge of key systems concept, software\ndevelopment life cycle, and programming in Java or Python or a similar\nlanguage.\no Good understanding of programming, design, development, data modeling\ntechniques and database fundamentals is expected as well.\no Good understanding of modern trends in information analysis, information\ntechnology, cloud computing, object-oriented principles and agility are a plus\no Undergraduate software engineering courses provide a good foundation\nCS 673 – Fall 2023 1",
            "Learning Objective": "",
            "Table Description": "Week | Lecture/Activity/Discussion | Reading (preliminary)\nCheck Canvas for additional reading in every\nmodule.\nWeek 1\nSep 4 | Course logistics and introduction\nCourse introduction – topics, objectives,\nSoftware as a Service, Agile Development,\nand Cloud Computing\nst\nReading: 1 reading assigned\nClass presentation schedule finalized | Text Book: [ESP] CH 1, [ESS] CH 1\n‘What is Product Line Engineering?’\n‘The Agile Mindset’\nClass presentation: Best Practices (discussion on Canvas)\nEvery student is expected to find a paper, survey or a topic\ndiscussing one or several current best practices and to provide\nan outline and references on Canvas. All students are\nexpected to comment on at least 2 postings by other students.\nWeek 2\nSep 11 | Software as a Service: Frameworks and\nLanguages\nHow to Learn a New Language - Ruby\nProject start:\n1) All groups finalized\n2) Teams work together to select topic and\nidentify project’s key contributions\n3) Project proposal posted on Canvas\nDiscussion: Evolution of software\ndevelopment practices; review of week’s\none reading (paper 1 “Software Chronic\nCrisis”) – Is there really a crisis today? | Text Book: [ESP] CH 2, [ESS] CH 2\nThe strengths and weaknesses of extreme programming.\nWilliam Matheson\nRuby Rapids (on YouTube) by Ingolf\nKrueger (beginner/intermediate\nrubykoans.com (intermediate/advanced)\nTry Ruby in your browser ruby.github.io/TryRuby\nProject presentation guidelines and requirements will be\nprovided on Canvas\nWeek 3\nSep 18 | SaAS Application Architecture:\nMicroservices, APIs, and REST\nProject:\n1.\n1) Discussion and approval of\nproject topics\n2.\n2) Market and competitors\nresearch\nIn class discussion – projects\nDiscussion (online): “No Silver Bullet\" by\nFred Brooks | Text Book: [ESP] CH 6, [ESS] CH 3\nWhat are microservices. D.J. Speiss\nWhat is a REST API?\n’Microservices’\nWeek 4\nSep 25 | Requirements: BDD and User Stories\nFeatures and Scenarios\nProject meetings- Progress review\nStart of individual assignment 1 | Text Book: [ESP] CH 3, [ESS] CH 7\nHow to write user stories, epics and personas Anissa Deanna\n‘An Introduction to Feature-driven Development’\nWeek 5\nOct 2 | SaAS Framework : Rails as a Model-View-\nController Framework\nDiscussion: RUP, Sacrum, agile principales\nClass Présentations | Text Book: [ESS] CH 4\nRuby on Rails API\n\n\n\n\n | Assignment 1 due date |  |  | \n |  | Assignment 1 due date |  | \nWeek 6\nOct 9 |  | Testing: Test-Driven Development |  | Text Book: [ESP] CH 9, [ESS] CH 8\nA beginner’s guide to testing. Philip Johnson\n‘How to Perform Software Product Testing’\n‘The Art of Agile Development: Test-Driven Development’\n |  | Class Presentations |  | \n |  | Project meetings Progress review |  | \nWeek 7\nOct 16 |  | Software Maintenance: Enhancing Legacy |  | Text Book: [ESS] CH 9\n |  | Software Using Refactoring and Agile |  | \n |  | Methods |  | \n |  | Class Présentations |  | \n |  | Discussion: (TBD) |  | \nWeek 8\nOct 23 | Architecture and design basics; Design\nPatterns for SaaS Apps.\nClass Présentations |  |  | Text Book: [ESP] CH 5, [ESS] CH 4\nCloud Computing Architecture Paul Naumann\n‘SaaS Vs. PaaS Vs IaaS – An Ultimate Guide on When to Use\nWhat’\nWeek 9\nOct 30 | Course Project présentations !\nClass Présentations |  |  | \nWeek 10\nNov 6 |  | Course Project présentations! |  | \n |  | Class Présentations |  | \nWeek 11\nNov 13 |  | SaAS Framework: Advanced Programming |  | Text Book: [ESS] CH 5, [ESS] CH 11\n |  | Abstractions |  | \n |  | Exercises: Simple OOA models explained |  | \n |  | Start of individual assignment 2 |  | \nWeek 12\nNov 20 |  | Security & Privacy |  | Text Book: [ESP] CH 7\nOAuth 2 Introduction\n‘The Basics of Web Application Security’\n |  | Discussion: (TBD) |  | \n |  | Assignment 2 due date |  | \nWeek 13\nDec 4 |  | Reliable programming and Testing: |  | Text Book: [ESP] CH 8\n10 Tips for Clean Code\nCode Refactoring Derek Banas\n‘How to handle errors and exceptions in large-scale software\nprojects’\n |  | Online discussion: SOA, cloud computing, |  | \n |  | DevOps (see Moodle) |  | \n |  | Discussion: Project retrospectives, team |  | \n |  | work, best current practices |  | \nWeek 14\nDec 11 |  | Dev Ops and Code Management |  | Text Book: [ESP] CH 10, [ESS] CH 12\n5 minute introduction to Git Michael Fudge\n‘What is DevOps’\n‘Continuous Integration’\n |  | Course summary |  | \n |  | DiscussionTentative): CMMI – is it still |  | \n |  | applicable? Course wrap-up and Q&A, |  | \n |  | Exam Preparation |  | \nWeek 15\nDec 18 | Final Exam |  |  | Closed book, comprehensive, 2 hours\n"
        }
    },
    {
        "CSCI-455 x": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course covers programming in Java and C++. Topics include review of basic\nprogramming concepts such as control structures, functions, and arrays; coverage of more\nadvanced programming topics such as classes and linked lists; use of a container class\nlibrary to program with tools such as a map class and a sort function; and an introduction to\nalgorithm analysis. There will also be an emphasis on good development techniques such\nas good code style and documentation, unit testing and use of debugging tools. A second\ngoal of the course is to introduce the Unix programming environment, including tools such\nas the shell, simple shell scripts, and makefiles.\nPrerequisite: minimal programming experience in a high-level language\nInstructor Claire Bono\nContact Info bono@usc.edu | SAL 310 | 213-740-4510\nLecture 3 hours / week\nLab 2 hours/ week\nTextbook Big Java, 4th Ed., by Cay Horstmann, Wiley 2010,\nISBN 978-0-470-50948-7\nAssignments Programming assignments are graded on thorough testing, documentation, and style, as\nwell as correctness. All work to be submitted for the class is to be done individually unless\nan assignment specifies otherwise.\nLate policy for programming assignments. You may turn in a program up to two days late\nfor a penalty of 10% of the available points. So, for example, if you would have gotten a\n70/100, you will get 60/100 instead (not 63). After the two day grace period, a late program\nreceives no credit.\nComputing All submitted programs must compile and run on aludra Sun java compiler for java\nenvironment programs and the g++ compiler for C++ programs. Aludra is a time-share Unix computer on\nthe SCF file system. You can access it remotely from PC's on or off campus using the x-\nwin32 software, or from Macs using the X11 application. You can also access the SCF file\nsystem and the compilers using Sun Unix Workstations in Sal 125. The first lab will be\nfocused on introducing the programming environment.\nIf you choose to develop your programs on your own computer using another environment\n(e.g., Eclipse or Visual C++) you are responsible for making sure your code compiles and\nruns on the SCF environment before submitting.\n1\nLabs The lab is intended to practice some of the techniques learned in class on the computer in\nan environment where you can get immediate help from the teaching assistant.\nLabs meet once a week for two hours. They will start the first week of classes. You will be\ngiven the lab exercises a few days before the lab: some require some advance preparation.\nYou may complete the lab exercises before the lab period if you wish, but they are due\nduring your lab section. If you finish early, you are free to leave (once you get the lab\nchecked off) or spend the rest of the time working on your other CS 455 assignments.\nEach set of lab exercises usually can earn you up to 4 points. There be will up to roughly\n40 lab points total. To take some of the pressure off the lab score only 80% of the available\npoints are applicable towards your final score in the class (but scaled to be worth 10% of\nthe total course score). This gives you some leeway if you have to miss a lab, or if you\ndon't have time to solve all of the problems one day.\nDen students. Den students will complete their labs remotely, and submit them\nelectronically. Den students do not have to be available during the lab session. They can\nget help on the lab the same way they do for other assignments: generally via email\n(whenever) or by phone (during office hours) with someone on the course staff.\nExams All exams are closed book, closed note. Makeup exams will not be given. Absence due to a\nserious illness will be an acceptable reason for missing an exam, and the final grade will be\nscaled accordingly. The exam dates will be announced the first day of class.\nWebsite https://www-scf.usc.edu/~csci455\nGrading The following is the relative weight of each part of the course work. At the end of the\nsemester, you will have a score out of 100 percent. This score will be used in a class curve\nto arrive at a letter grade. I guarantee that >=90 will be some kind of A, >=80 will at least be\nsome kind of B, >=70 will at least be some kind of C, and that >=60 will at least be some\nkind of D.\nProgramming assignments 30%\nLabs 10%\nMidterm Exam 1 10%\nMidterm Exam 2 20%\nFinal Exam 30%\nTotal 100%\nAcademic The USC Student Conduct Code prohibits plagiarism. All USC students are responsible for\nIntegrity reading and following the Student Conduct Code, which appears in the sections on\nUniversity Governance (sections 10.00-16.00) in the current version of SCampus and on\nthe web starting from: http://web-app.usc.edu/scampus/university-student-conduct-code/\n(links to subsequent sections are at the left side of the page).\nIn this course we encourage students to study together. This includes discussing general\nstrategies to be used on individual assignments. However, all work submitted for the class\nis to be done individually, unless an assignment specifies otherwise. Also, all exams are\nclosed book, closed note.\n2",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "DSCI-599": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nApplications of data science and machine learning techniques for solving business, economic, and societal\nproblems, including marketing, econometrics, education, public safety, healthcare, and social services.\nCourse Description\nThis course introduces students to the important challenges faced by business, economy, and the society;\nand teaches students how to develop effective data-driven solutions to address these challenges. Topics\ninclude data-driven marketing, customer analytics, growth forecasting, inflation simulation, education\ninequalities, crime prevention, drug overdose epidemic, and citizen sciences. It provides students with\nhands-on experiences on data science and machine learning techniques such as regression analysis, time-\nseries analysis, decision tree, random forest, clustering, Markov model, neural network, and deep learning.\nStudents will also work on course projects addressing real-world problems ranging from customer behavior\nanalysis, home sharing economy, panel data analysis, social pressure, and voter turnout, to COVID-19\nspread forecasting.",
            "Learning Objective": "Upon completion of this course, the students should be able to:\n• Identify the major challenges in digital marketing and customer analytics.\n• Identify the major problems in the global economy, such as growth and inflation.\n• Explain the major issues in education, public safety, public health, and healthcare.\n• Apply machine learning techniques to solve real-world problems in the above domains.\n• Build an end-to-end data science and machine learning project.\n• Evaluate the effectiveness of machine learning algorithms in solving the problems.\n• Discover the pitfalls in the data science practices.\nRecommended Preparation\nBasic understandings of machine learning algorithms. Working knowledge of linear algebra (at the level of\nMATH 225: Linear Algebra and Linear Differential Equations) and probability and statistics (at the level of EE\n364: Introduction to Probability and Statistics for Electrical Engineering and Computer Science). It is desirable\nthat students have taken a machine learning course (at the level of DSCI 352: Applied Machine Learning and\nData Mining or DSCI 552: Machine Learning for Data Science). Students should be proficient in Python\nprogramming and using Jupyter notebook (at the level of DSCI 510: Principles of Programming for Data\nScience).\nCourse Notes\nCourse materials including lecture notes, homework assignments, and project details will be posted on\nBlackboard. Lectures will be recorded and made available for the students to review after class. Class\ndiscussions will be conducted on Piazza.\nTechnological Proficiency and Hardware/Software Required\nStudents are expected to have been proficient in writing Python programs and using Jupyter notebook.\nExperiences with R would be helpful but not required.\nRequired Readings and Supplementary Materials\n• [Hwang19] Hwang, Yoon Hyup. Hands-on data science for marketing: Improve your marketing\nstrategies with machine learning using Python and R. Packt Publishing, 2019. (ISBN-13: 978-\n1789346343. Available online at USC library)\n• [Provost13] Provost, Foster, and Tom Fawcett. Data science for business: What you need to know\nabout data mining and data-analytic thinking. O'Reilly Media, Inc., 2013. (ISBN-13: 978-1449361327.\nAvailable online at USC library)\nPage 2",
            "Table Description": ""
        }
    },
    {
        "CSCI-677": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThe course will provide an overview of the challenges of vision, the common approaches and\ncurrent techniques. While specific examples and applications may be used to illustrate, the focus\nwill be on fundamental techniques and algorithms. We assume no prior knowledge of computer\nvision but still aim to study many modern, state-of-art techniques.\nCourse Availability\nCS677 is available for CS PhD credit but is also open to CS and ECE MS students. In\nexceptional cases, undergraduate students may also be admitted. PhD students will be given\npriority in enrollment; however, MS students are expected to be the large majority of enrollment.\nCurrently, the course requires D-clearance for new enrollments.\nPrerequisites\n1. Mathematics: Knowledge of and ability to use calculus, analytical geometry, linear\nalgebra and probability theory.\n2. Programming: Ability to program in Python and significant programming experience: in\nparticular, translate methods described in text and mathematical expressions to programs. The\ncourse will rarely present code or even pseudo-code.\n3. Other Courses: There are no specific pre-requisite courses. In particular, courses in AI,\nMachine Learning, Deep Learning, Computer Vision and Image Processing are not required.\n4. Entrance Exam: No exam will be given to assess pre-requisites. However, students with\nweak math or programming skills may have difficulty keeping up with the pace of the course.\nStudents with low GPA should self-assess their ability to successfully complete the course.\nTextbooks\nThere is, unfortunately, not a single, modern textbook available to cover the topics in this\ncourse. We will use published papers and tutorials extensively. Nonetheless, following books\nwill be helpful for study.\nRequired:\n“Computer Vision: A Modern Approach”, D. Forsyth and J. Ponce, 2010.\n“Deep Learning: Algorithms and Applications”, I. Goodfellow, Y. Bengio and A. Courville,\n2017 (online version available at no cost for personal use).\n“A Guide to Convolutional Neural Networks for Computer Vision”, S. Khan, H. Rahmani, S.\nShah and M. Bennamoun, 2018 (online version at no cost available from a USC account).\nRecommended:\n“Computer Vision: Algorithms and Applications”, Richard Szeliski, Second Edition, 2021;\nonline version available at no cost for personal use at https://szeliski.org/Book/.\n“Foundations of Computer Vision”, A. Torralba, P. Isola and W.T. Freeman, MIT Press, 2024\nGrading Breakdown\nThere will be two exams: Exam1 and Exam2, each counting for 25% of the grade (for a total of\n50%). Exam 1 will be in the middle of the term, Exam 2 will be at the end. The exact dates will\nbe announced later. It is not planned to have a “final exam”; instead, a “term paper”, will be due\non December 12 and count for 10% of the grade.\nIt is anticipated that there will be one mathematical assignment and five or six programming\nassignments. Large scale “projects” are not planned. Total assignments will count for 30% of the\ngrade. 10% of the grade will be assigned to attendance (DEN students will automatically earn\nthis 10%).\nProgramming Assignments\nThe assignments must be completed using the Python language. We will use OpenCV library for\nthe traditional part of the course and PyTorch for the deep learning component. It is expected\nthat some cloud resources will be made available for assignments requiring use of GPUs;\nstudents are not required to have GPU-enabled personal computers of their own.\nDetailed Course Syllabus:\nThe topic of computer vision is evolving very rapidly. Recent advances have come largely from\n“data-driven” deep learning and neural network approaches. However, traditional, “model-\nbased” methods continue to be of interest and use in practice. This course will cover both\ntraditional and deep-learning approaches with an emphasis on the latter category.\nFollowing is a list of topics expected to be covered, in anticipated order, and with expected time\nto be spent on them. However, this list should be taken as being only indicative and actual\ntopics, the order and the time devoted to them may vary depending on various factors including",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "CSCI-475": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:",
            "Learning Objective": "",
            "Table Description": "Week | Day | Topic | Sipser | Davis | HW\n1 | 1/20 | Introduction | Ch. 0, 1.1 |  | \n2 | 1/25\n1/27 | Nondeterminism, Regular Expressions\nNonregular Languages | Ch. 1.2, 1.3\nCh. 1.4 | Ch. 1\nCh. 2 | HW 1 Out\n3 | 2/1\n2/3 | Context-Free Languages\nPushdown Automata | Ch. 2.1\nCh. 2.2 | Ch. 3 | HW 1 In\n4 | 2/8\n2/10 | Non-context-free Languages\nTuring Machines | Ch. 2.3, 3.1\nCh. 3.2 | Ch. 4\nCh. 5 | HW 2 Out\n5 | 2/17 | Turing Machines Variants | Ch. 3.3, 4.1 |  | HW 2 In\n6 | 2/22\n2/24 | The Halting Problem\nUndecidable Problems | Ch. 4.2 | Ch. 6\nCh. 7 | HW 3 Out\n7 | 3/1\n3/3 | Reducibility\nThe Post Correspondence Problem | Ch. 5.1\nCh. 5.2, 5.3 | Ch. 8 | HW 3 In\nHW 4 Out\n8 | 3/8\n3/10 | P and NP\nThe Cook-Levin Theorem | Ch. 7.1-7.3\nCh. 7.4, 7.5 | Ch. 9 | HW 4 In\n9 | 3/15\n3/17 | Midterm\nSpace Complexity | Ch. 8.1, 8.2 |  | \n10 | 3/22\n3/24 | PSPACE\nPSPACE-Complete | Ch. 8.3 |  | Project Proposal In\nHW 5 Out\n11 | 3/29\n3/31 | Logarithmic Space\nL and NL | Ch. 8.4-8.6 |  | HW 5 In\n12 | 4/5 | NL-Complete |  |  | HW 6 Out\n13 | 4/12\n4/14 | Hierarchy Theorems\nRelativization | Ch. 9.1\nCh. 9.2 |  | HW 6 In\n14 | 4/19\n4/21 | Why is P vs. NP hard?\nQuantum Computing |  |  | HW 7 Out\n15 | 4/26\n4/28 | Quantum Computing\nQuantum Computing |  |  | HW 7 In\nProject In\n\n\n"
        }
    },
    {
        "CSCI-594Z": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course and its prerequisites, SSCI 594a/b, are required for the Master of Science degree in\nGeographic Information Science and Technology (GIST) Program; they are not applicable to the\nGIST Graduate Certificate program or any other SSI programs. The purpose of these courses is\nto complete a capstone project in the spatial sciences, culminating students’ experiences in the\nM.S. in GIST Program and validating them as master practitioners. Based upon the thesis work\ncompleted in SSCI 594a/b and with the approval of the Spatial Sciences Institute faculty,\nstudents should be undertaking SSCI 594z prepared to complete their thesis writing and\nsuccessfully defend their theses.",
            "Learning Objective": "On completion of this course, students will be able to:\n• Design and execute a meaningful research project that demonstrates spatial thinking\nand uses the knowledge and skills learned while in the GIST Program.\n• Undertake the research process and be aware of research obligations and pitfalls.\n• Articulate research or project objectives clearly, situate research within an academic or\nscholarly context, state claims and evidence clearly, assess validity of claims, evidence,\noutcomes, and results.\n• Utilize the Microsoft OfficeTM software suite and a bibliographic reference manager\ncompetently and efficiently to produce documents that meet M.S. in GIST Program\nrequirements.\n• Narrate the research process clearly in the form of a formal multi-chapter master’s\nthesis manuscript, structured according to the approved M.S. in GIST thesis style.\n• Describe your master’s research clearly and succinctly, in written and oral forms, to\nfaculty, mentors, and potential sponsors.\nPrerequisite(s): SSCI 594a/b\nCo-Requisite (s): None\nConcurrent Enrollment: None\nRecommended Preparation: Students must be enrolled in the M.S.in GIST Program and\nhave an approved thesis prospectus or proposal, with an advisor and committee members\nassigned.\nCourse Notes\nThe preparation and defense of your master’s thesis is the culminating experience in the M.S. in\nGIST Program. Students are expected to work with a high level of self-motivation. Successful\nstudents exercise initiative and exhibit strong communication skills in working with their\nadvisors and committee members.\nSSCI 594z Syllabus, Page 2 of 7",
            "Table Description": ""
        }
    },
    {
        "CSCI-299": {
            "Course Description": "Catalogue Course Description:\nIntroduction to Python and C++; intended for students without prior programming experience; examples from\nvarious domains in computational science\n\nExpanded Course Description:\nCourse Description\nThis course is intended to teach the fundamentals of programming using Python and a brief introduction to C++.\nPython’s high-level data structures and clear syntax make it an ideal first language, while many existing libraries\nmake it suitable to tackle almost any programming task. Python offers an interactive environment in which to\nexplore procedural, functional, and object-oriented approaches to problem-solving. This course is designed for\nnon-engineering students who need foundational programming skills. The examples and assignments used in this\ncourse will specifically highlight data and algorithms needed to solve computational problems in various fields.",
            "Learning Objective": "By the end of this course, students will be able to:\n● Write programs that get input from the user and display information to the user.\n● Write programs using conditional and iterative structures, and functional decomposition.\n● Demonstrate an understanding of various variable types including integers, floats, strings, and Booleans.\n● Define and call functions to simplify solutions and promote the concept of code reuse.\n● Create programs that utilize both terminal and file I/O methods to perform data analysis.\n● Use sequence and associative data structures including lists and dictionaries.\n● Develop simple algorithms to solve computational problems in various domains.\n● Demonstrate an understanding of computational complexity and how it impacts the way a program runs.\n● Apply object-oriented principles to implement basic object types.\n● Select and use libraries appropriate for various programming tasks, with an emphasis on computational\nscience.\nPrerequisite(s): None. This course is intended for (but not limited to) students whose major or other interests\nrequire computer programming for computational or quantitative inquiry.\nCourse Notes\nThis course will make use of Brightspace (https://brightspace.usc.edu/) for content, labs, and assignments. Lecture\nslides and any supplemental",
            "Table Description": " |  | Topics | In-Class Lab |  | Lab |  | Assignment |  | Assignment | \n |  |  |  |  | Due Date* |  |  |  | Due Date^ | \nWeek 1 |  | User Output and\nVariables | Installation |  |  |  | Assignment 1 | 09/09/2024 |  | \nWeek 2 |  | Math Operators and\nUser Input | Lab 1 | 09/06/2024 |  |  | Assignment 2 | 09/16/2024 |  | \nWeek 3 |  | Branching and\nBoolean Expressions | Lab 2 | 09/13/2024 |  |  | Assignment 3 | 09/23/2024 |  | \nWeek 4 |  | While Loops and\nFor Loops | Lab 3 | 09/20/2024 |  |  | Assignment 4 | 09/30/2024 |  | \nWeek 5 |  | Modules and\nSequences | Lab 4 | 09/27/2024 |  |  | Assignment 5 | 10/07/2024 |  | \nWeek 6 |  | Lists | No Lab |  |  |  | Study for Exam |  |  | \nWeek 7 |  | Exam #1\nFunctions | Exam #1 |  |  |  | No Assignment |  |  | \nWeek 8 |  | Functions and\nFiles | Lab 5 | 10/18/2024 |  |  | Assignment 6 | 10/28/2024 |  | \nWeek 9 |  | File Parsing | Lab 6 | 10/25/2024 |  |  | Assignment 7 | 11/04/2024 |  | \nWeek 10 |  | Dictionaries and JSON | Lab 7 | 11/01/2024 |  |  | Assignment 8 | 11/11/2024 |  | \nWeek 11 |  | Objects | Lab 8 | 11/08/2024 |  |  | Assignment 9 | 11/18/2024 |  | \nWeek 12 |  | NumPy, SciPy, and\nPandas | No Lab |  |  |  | Study for Exam |  |  | \nWeek 13 |  | Visualizations\nExam #2 | Exam #2 |  |  |  | Assignment 10 | 12/02/2024 |  | \nWeek 14 |  | C++ Fundamentals | Lab 9 | 11/29/2024 |  |  | Work on Final Project |  |  | \nWeek 15 |  | C++ Data Structures | Lab 10 | 12/06/2024 |  |  | Work on Final Project |  |  | \nFINALS |  |  | Final Project |  |  |  | Refer to the final exam schedule in the\nUSC Schedule of Classes at\nclasses.usc.edu. |  |  | \n |  |  |  |  |  |  |  |  |  | \n | * Each in-class lab is due on Friday by 11:59 pm PT (Pacific Time). |  |  |  |  |  |  |  |  | \n | ^ Each assignment is due on Monday by 11:59 pm PT (Pacific Time). |  |  |  |  |  |  |  |  | \n | *^ Dates are in MM/DD/YYYY format. |  |  |  |  |  |  |  |  | \n |  |  |  |  |  |  |  |  |  | \n"
        }
    },
    {
        "CSCI-270": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nrelated to algorithms and theory of computing:\n○ 13% - the better of your two dynamic programming exam questions\n​ ​\n○ 13% - the better of your two greedy algorithm exam questions\n​ ​\n○ 11% - the better of your two divide and conquer exam questions\n​ ​\n○ 12% - the better of your two network flow exam questions\n​ ​\n○ 12% - the better of your two NP-complete proof exam questions\n​ ​ ​ ​\nThe first three topics will have one question each on the midterm. The other two will\nhave one question each on the week 15 quiz (held November 29, 7pm). All five topics\nwill have one question each on the final exam, held Wednesday December 12, 2-4pm.\nLetter grades will be assigned based on the above relative weights. We will neither have a\nstraight scale nor a straight curve. It is guaranteed that 90% of the available points will\nconstitute an A, although the cut-line for an A may be lower than that. Similarly, collecting at\n​ ​\nleast 80% of the available points will be at least a B, and 70% will be sufficient (but might not be\nnecessary) for at least a C.\nHomework and take-home quizzes\nFive times during the semester, you will be given a take-home quiz and one week to complete it.\nTwo grace days will be available for your use to extend the due date by 24 hours. Note that\nthese are in place of, not in addition to, “excused late” submissions. If your anticipated cause of\nlate submission will require more than two grace days, such as due to religious observations,\nplease let me know so we can accommodate this. Grace days will not be able to be used for\n​\nthe third or fifth take-home quizzes due to their due date’s proximity to in-class exams.\nAll take-home quizzes will be submitted via the Desire2Learn system. You will need to turn your\nsubmission into a PDF in order to do this; free scanner apps are available for most\nsmartphones and physical scanners are available at the library. Unless you tell us otherwise,\nwe will grade the last submission you make within the submission period. You are encouraged\n​ ​\nto submit something on time, even if you plan to use late days; that can then be replaced with\n​ ​\nyour late submission if you so choose.\nHomework : in addition to the take-home quizzes, every unit of the class will have an\n​\nassociated set of homework problems. These will not be collected, nor does anything about\nthem directly figure into grade calculations. However, you are strongly encouraged to do these\n​ ​\nproblems. Solutions will be made available, but you are cautioned that the learning experience\nwith these lies in solving the problems, not in merely seeing the solution. To that end, every\n​ ​\nmember of course staff is available to help you solve these problems. Because we will not be\ncollecting your solutions for credit, you may also receive assistance from your classmates to\nwhatever extent you are collectively comfortable.\nWe do make one request: if you are going to ask about a solution on Piazza, please title the\npost in such a way that you do not spoil the solution for someone who has yet to solve it for\nthemselves.\nIn-class Exams: We have four in-class exams, marked in the “grades” section above. You will\n​\nbe provided with paper on which to take the exam. Exams will be individual effort, closed-book\nand closed-notes. You will be allowed one 8.5”x11” handwritten note sheet (front & back) on the\nexams. These are not “cheat sheets\"; please do not label them as such.\n​\nStudents requiring alternate exam arrangements must make such requests within the first two\nweeks of the term, or as soon as possible after knowing of the conflict or requirement.\nGrade Reconsideration: Reconsideration requests for any graded artifact must be made within\n​\none week of our first attempt to return the item or the grade to you. Once the reconsideration\nperiod has passed, grades are considered final. Reconsideration requests should be made\ndirectly to the instructor after filling out the form available on Piazza.",
            "Learning Objective": "",
            "Table Description": "Week | Lecture Topics | Reading | Due Dates and Exams\n1\nAug 20 | Introduction,\nGraph Fundamentals | Chapter 13; 14.1, 14.2,\n15.1, 15.3 | \n2\nAug 27 | Union-Find Data Structure,\nSkip Lists | Chapter 7; 15.2\n19.4, 19.6 | \n3\nSep 3 | No lecture Sep 3 or 6,\n​\nNumber-Theory Cryptography | 19.4, Chapter 24 | \n4\nSep 10 | Number-Theory Cryptography,\nDynamic Programming | Chapter 24,\n12.1, 12.2 | Quiz: Sept 13\n(Thursday evening)\n5\nSep 17 | Dynamic Programming | 12.5,\n12.6 | \n6\nSep 24 | Dynamic Programming,\nGreedy Algorithms | 14.3, 14.5\n10.3, | THQ 1 due Sep 27\n7\nOct 1 | Greedy Algorithms | 10.1, 10.2 | \n8\nOct 8 | Greedy Algorithms,\nDivide and Conquer | 20.4,\n8.1, 8.3, 11.1 | THQ 2 due Oct 11\n9\nOct 15 | Divide and Conquer | 11.2, 11.3 ;\n8.2, 9.2 | \n10\nOct 22 | Divide and Conquer\nNetwork Flow | 11.4, 22.4 ;\n16.1, 16.2 | THQ 3 due Oct 23\nMidterm: Oct 25\n(Thursday evening)\n11\nOct 29 | Lazy programming\nNetwork Flow | 16.3, 16.4 | \n12\nNov 5 | Network Flow,\nLimits of Knowledge | 17.1, 17.2 | THQ 4 Due Nov 8\n13\nNov 12 | NP-complete Problems | 17.3, 17.4 | \n14\nNov 19 | NP-complete Problems\nNo lecture Nov 21 or 22 | 17.5, 17.6 | \n15\nNov 26 | Undecidable Problems |  | THQ 5 due Nov 27\nQuiz: Nov 29\n(Thursday evening)"
        }
    },
    {
        "CSCI-310": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nIntroduction to the software engineering process and software lifecycle. Covers project management, requirements,\narchitecture, design, implementation, testing, and maintenance phase activities in individual and team based projects.",
            "Learning Objective": "Students will gain an understanding of the foundational methods and techniques of professional software development,\nand learn how to leverage them in practical settings. Major learning objectives are:\n1. Understand the importance of requirements: make sure your software does what the customer wants it to do\n2. Understand the basic object-oriented (OO) design principles: make sure your software has flexibility\n3. Understand the basic design patterns: make sure your software is maintainable and reusable\n4. Understand the software processes: make sure you work efficiently and communicate well with others\nPrerequisites\nCSCI 201 (Principles of Software Development)\nCSCI 104 (Data Structures and Object Oriented Design)\nCSCI 103 (Introduction to Programming)\nTextbook and Supplementary Readings\nTextbook:\n Software Engineering (10th Edition), Ian Sommerville, Pearson, 2015 (required)\nSupplementary Reading:\n Head First Object-Oriented Analysis and Design, McLaughlin, Pollice and West, O’Reilly, 2006 (option)\n Head First Software Development, Pilone and Miles, O’Reilly, 2008 (optional)\n Head First Design Patterns, Freeman and Robson, O’Reilly, 2014 (optional)\n Head First Android Development, Griffiths and Griffiths, O’Reilly, 2015 (optional)\nAssignments and Examinations\nThe grades will be based on the completion of quizzes, two examinations, an individual software development project,\nand a team-based software development project.\n Quizzes: Unannounced quizzes will access the student’s understanding of the materials covered in the lectures.\n Examination #1: It will assess the student’s understanding of materials covered in the first half of the semester.\n Examination #2: It will assess the student’s understanding of materials covered in the second half, although the\nstudent is still expected to show in-depth understanding of topics already covered by the first exam.\n Project #1: This individual project will develop the student’s ability to use professional software tools and adopt\ntest-driven development (TDD).\nSyllabus for CSCI 310, Page 2 of 5",
            "Table Description": "Week | Date |  |  | Topic |  |  |  | Required |  |  | Supplementary |  | Homework\n |  |  |  |  |  |  |  | Reading |  |  | Reading |  | \n |  |  |  |  |  |  |  | (Sommerville) |  |  | (Head First) |  | \n1 | 08/20 |  |  | Introduction |  |  | Ch.1-2 |  |  |  |  |  | \n | 08/22 |  |  | Tools: configuration management |  |  | Ch.25 |  |  | Ch.6-8 |  |  | \n2 | 08/27 |  |  | Tools: build and unit testing |  |  |  |  |  |  |  |  | \n | 08/29 |  |  | TDD: Test-driven development |  |  |  |  |  |  |  |  | Project 1\n3 |  | 09/03 |  |  | Labor Day Holiday – NO CLASS |  |  |  |  |  |  |  | \n | 09/05 |  |  | Iterative development I |  |  | Ch.3 |  |  | Ch. 1-5 |  |  | \n4 | 09/10 |  |  | Iterative development II |  |  |  |  |  |  |  |  | \n | 09/12 |  |  | Iterative development III |  |  |  |  |  | Ch. 9-11 |  |  | \n5 | 09/17 |  |  | Requirements |  |  | Ch.4 and Ch.5 |  |  |  |  |  | Project 2.1\n | 09/19 |  |  | Project Introduction: Android I |  |  |  |  |  |  |  |  | \n6 | 09/24 |  |  | Project Introduction: Android II |  |  |  |  |  |  |  |  | \n | 09/26 |  |  | Architectural design |  |  | Ch.6 |  |  |  |  |  | Project 2.2\n7 | 10/01 |  |  | Detailed design |  |  | Ch.7 |  |  |  |  |  | \n | 10/03 |  |  | Design Pattern I -- Review for Exam 1 |  |  |  |  |  |  |  |  | \n8 |  | 10/08 |  |  | Exam 1 |  |  |  |  |  |  |  | Project 2.3\n | 10/10 |  |  | Guest Lecture | Guest Lecture |  |  |  |  |  |  |  | \n9 | 10/15 |  |  | Project Meeting: Android III |  |  |  |  |  |  |  |  | \n | 10/17 |  |  | Testing I |  |  |  |  |  |  |  |  | Project 2.4\n10 | 10/22 |  |  | Testing II |  |  |  |  |  |  |  |  | \n | 10/24 |  |  | Testing III |  |  |  |  |  |  |  |  | \n11 | 10/29 |  |  | OO Design Principles I |  |  |  |  |  |  |  |  | Project 2.5\n | 10/31 |  |  | OO Design Principles II |  |  |  |  |  |  |  |  | \n12 | 11/05 |  |  | Design Pattern II |  |  | Ch.8 |  |  |  |  |  | \n |  | 11/07 |  |  | Conference Travel (FSE 11/6-8) -- NO CLASS |  |  |  |  |  |  |  | Project 2.6\n13 | 11/12 |  |  | Design Pattern III |  |  |  |  |  |  |  |  | \n | 11/14 |  |  | Dynamic Analysis |  |  |  |  |  |  |  |  | \n14 | 11/19 |  |  | Static Bug Detection |  |  |  |  |  |  |  |  | Project 2.7\n |  | 11/21 |  |  | Thanksgiving Holiday – NO CLASS |  |  |  |  |  |  |  | \n15 | 11/26 |  |  | Formal Verification |  |  |  |  |  |  |  |  | \n | 11/28 |  |  | Review for Exam 2 |  |  |  |  |  |  |  |  | \n16 |  | 12/03 |  |  | Study Day – NO CLASS |  |  |  |  |  |  |  | Project 2 due\n | 12/10 | 12/10 |  |  | Exam 2 |  |  |  |  |  |  |  | \n |  |  |  |  |  |  |  |  |  |  |  |  | \n\n\n"
        }
    },
    {
        "CSCI-649": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis course provides a graduate-level introduction to the field of haptics, which involves human interaction\nwith real, remote, and virtual objects through the sense of touch. Haptic interfaces employ specialized robotic\nhardware and unique computer algorithms to enable users to explore and manipulate simulated and distant\nenvironments. Topics for the course include human haptic sensing and control, haptic interface design, virtual\nenvironment rendering methods, teleoperation control algorithms, and system evaluation. Current\napplications for these technologies will be highlighted, and important techniques will be demonstrated in a\nlaboratory setting. Coursework includes homework/laboratory assignments and a research-oriented project.\nThis class is appropriate for graduate students in computer science or any related engineering discipline with\ninterest in robotics, dynamic systems, controls, or human-computer interaction.",
            "Learning Objective": "and Outcomes\nHaptics is a multi-disciplinary field that is actively being researched by computer scientists, engineers, product\ndesigners, psychologists, and neuroscientists. By the end of the course, you should be able to:\n• Identify the primary mechanisms of human • Describe and implement basic teleoperation\nhaptic sensing controllers\n• Understand a number of methods for sensing • Understand the causes of instability in virtual\nthe position of and actuating haptic interfaces reality and teleoperation systems\n• Describe the differences between grounded and • Design psychophysical and perceptual tests\nungrounded force feedback • Describe applications of haptic devices\n• Identify salient features of a haptic device design • Develop a new haptic device or application of a\n• List a variety of different types of haptic devices haptic device\n• Implement controllers to render various • Read, evaluate, and critique research papers\ndynamics (stiffness, damping, inertia) • Design and deliver a research presentation\nPrerequisite(s): None\nRecommended Preparation: C++ programming experience on the level of CSCI 103; doctoral standing\nin computer science or engineering, or the permission of the instructor.\nLogistics and Organization\nThe class meets two times a week, on Mondays and Wednesdays. You are expected to attend all class sessions\nand actively participate in class discussions. If you have to miss a class, notify the instructor in advance. Late\narrivals and unexcused absences will reduce learning in the class and negatively affect your participation\ngrade.\nThe first part of the semester will focus on lectures, readings, and discussions designed to introduce you to\nthe field of haptics and haptic interface design both from a hardware and software perspective. Assignments\nwill be handed out biweekly, and due biweekly. The deadline will be written on the assignment. Assignments\nwill include a variety of activities, including written responses, problem solving, and programming haptic\ninterfaces and virtual environments. All assignment materials will be submitted electronically on Blackboard.\nAssignments will include programming the 3D Systems Touch haptic device. For these assignments, you will\nbe given starter code. Five Touch haptic devices and computers will be available for class use in RTH 419. You\nmust sign up for timeslots to work on the assignments as the devices must be shared with your classmates.\nFor the second part of the semester, students will form two- or three-person teams and select a current\nresearch problem in the field of haptics to pursue. There will be project discussion and checkpoints along the\nway to help guide your endeavors. You will complete most of the work on your project during the last ten\nweeks of the semester, and the class will conclude with final project demonstrations and a written report.\nTowards the end of the semester, students will also present published haptics papers (relevant to their\nprojects) to their peers during class periods.\nSyllabus for CSCI 699: Haptics, Page 2",
            "Table Description": "Week |  |  | Lec\n# |  |  | Date |  |  | Lecture Topics |  |  | Assignments |  | \n1 |  |  |  | 1 |  |  |  |  |  | Introduction and course overview |  |  |  | \n |  |  |  | 2 |  |  |  |  |  | Applications of haptic devices |  |  |  | \n2 |  |  |  |  |  |  |  |  |  | MLK Day (no class) |  |  |  | \n |  |  |  | 3 |  |  |  |  |  | Human haptic perception |  |  |  | \n3 |  |  |  | 4 |  |  |  |  |  | Tactile haptic devices |  |  |  | \n |  |  |  | 5 |  |  |  |  |  | Surface haptic devices |  |  |  | \n4 |  |  |  | 6 |  |  |  |  |  | Mid-air haptics |  |  |  | \n |  |  | 7 |  |  |  |  |  |  | Kinesthetic haptic devices: design and |  | Assignment 1 | Assignment 1 | \n |  |  |  |  |  |  |  |  |  | kinematics |  |  |  | \n5 |  |  |  | 8 |  |  |  |  |  | Multi-DOF kinesthetic devices |  |  |  | \n |  |  |  | 9 |  |  |  |  |  | Project discussions |  |  | Project proposal | \n6 |  |  |  | 10 |  |  |  |  |  | Haptic sketching |  |  |  | \n |  |  |  | 11 |  |  |  |  |  | Programming virtual environments |  |  | Assignment 2 | \n7 |  |  |  |  |  |  |  |  |  | President’s Day (no class) |  |  |  | \n |  |  |  | 12 |  |  |  |  |  | Programming virtual environments (continued) |  |  |  | \n8 |  |  |  | 13 |  |  |  |  |  | Rendering surface haptic properties |  |  | Assignment 3 | \n |  |  |  | 14 |  |  |  |  |  | Rendering complex objects |  |  |  | \n9 |  |  |  | 15 |  |  |  |  |  | Teleoperation |  |  |  | \n |  |  |  | 16 |  |  |  |  |  | Pseudohaptics and haptic illusions |  |  |  | \n |  |  |  |  |  |  |  |  |  | Spring Break (no class) |  |  |  | \n10 |  |  |  | 17 |  |  |  |  |  | Project Checkpoint 1 |  |  | Assignment 4 | \n |  |  |  | 18 |  |  |  |  |  | Haptics Symposium Live-stream |  |  |  | \n11 |  |  |  | 19 |  |  |  |  |  | Psychophysical methods |  |  |  | \n |  |  |  | 20 |  |  |  |  |  | User studies/experimentation |  |  | User study protocol | \n12 |  |  |  | 21 |  |  |  |  |  | Data-driven haptics |  |  |  | \n |  |  |  | 22 |  |  |  |  |  | Wearable and ungrounded devices |  |  |  | \n | 13 |  |  | 23 |  |  |  |  |  | Tactile sensing |  |  |  | \n\n\n\n\n |  |  | 24 |  |  |  |  |  | Project Checkpoint 2 |  |  | \n14 |  |  | 25 |  |  |  |  |  | Paper presentations |  |  | \n |  |  | 26 |  |  |  |  |  | Paper presentations |  |  | \n15 |  |  | 27 |  |  |  |  |  | Project user studies |  |  | \n |  |  | 28 |  |  |  |  |  | Project user studies |  |  | \n |  |  |  |  |  |  |  |  | Final project presentations |  |  | \n\n\n\n\nLecture 16 – Lederman, Susan J., and Lynette A. Jones. \"Tactile and haptic illusions.\" IEEE Transactions on\nHaptics 4, no. 4 (2011): 273-294.\n\nLecture 19 – Jones, Lynette A., and Hong Z. Tan. \"Application of psychophysical techniques to haptic\nresearch.\" IEEE transactions on haptics 6, no. 3 (2012): 268-284.\n\nLecture 20 -- Schrum, M. L., Johnson, M., Ghuy, M., & Gombolay, M. C. (2020, March). Four years in review:\nStatistical practices of likert scales in human-robot interaction studies. In Companion of the 2020\nACM/IEEE International Conference on Human-Robot Interaction (pp. 43-52).\n\nLecture 21 – Okamura, Allison M., Katherine J. Kuchenbecker, and Mohsen Mahvash. \"Measurement-based\nmodeling for haptic rendering.\" Haptic Rendering. AK Peters/CRC Press, 2008. 440-464.\n\nLecture 22 – Pacchierotti, C., Sinclair, S., Solazzi, M., Frisoli, A., Hayward, V., & Prattichizzo, D. (2017).\nWearable haptic systems for the fingertip and the hand: taxonomy, review, and perspectives. IEEE\ntransactions on haptics, 10(4), 580-600.\n\nLecture 23 – Cutkosky, Mark R., Robert D. Howe, and William R. Provancher. \"Force and tactile sensors.\"\nSpringer Handbook of Robotics (2008): 455-476.\n\n\n\n\n"
        }
    },
    {
        "DSCI-558": {
            "Course Description": "Catalogue Course Description:\nFoundations, techniques, and algorithms for building knowledge graphs and doing so at scale. Topics\ninclude information extraction, data alignment, entity linking, and the Semantic Web.\n\nExpanded Course Description:\nExpanded Course Description\nThis course focuses on foundations, techniques, and algorithms for building knowledge graphs. Students\nwill learn the theory and applications of the techniques needed to build and query massive knowledge\ngraphs. Topics include crawling web sites, wrapper learning, information extraction, source alignment,\nstring matching, entity linking, graph databases, querying knowledge graphs, data cleaning, Semantic Web,\nlinked data, graph analytics, and intellectual property. The class will be run as a lecture course with lots of\nstudent participation and significant hands-on experience. As an integral part of the course each student\nwill do a project using the research and tools covered in the class.",
            "Learning Objective": "The learning objectives for this course are:\n● Understand the algorithms and techniques for crawling web sites, structured data extraction, and\ninformation extraction from unstructured text.\n● Understand the theory and techniques for cleaning, aligning, matching, and linking data.\n● Understand the foundations and techniques of the Semantic Web, including RDF, ontologies,\nSPARQL, and linked data.\n● Understand how to work with graph databases, including how to load massive datasets into such\ndatabases, how to organize the data for efficient access, and how to efficiently query the contents.\n● Understand the entire process of how to design, construct, and query a knowledge graph to solve\nreal-world problems.\n● Understand how to apply the big data tools and infrastructure (e.g., Spark) to build and query\nknowledge graphs.\nRequired Preparation:\nPrerequisite(s): INF 551 or CSCI 585\nINF 552 or CSCI 567\nRecommended Background: Experience programming in Python\nCourse Notes\nThe course will be run as a lecture class with student participation strongly encouraged. The first 4-5 weeks\nof the course are structured as a quickstart to provide a shallow primer on the end-to-end process of\nknowledge graph construction, followed by deeper presentations and more technical material for the\nremainder of the course. There are weekly readings and students are encouraged to do the readings prior\nto the discussion in class. All of the course materials, including the readings, lecture slides, and homeworks\nwill be posted online. The class project is a significant aspect of this course and at the end of the semester\nstudents will present their projects in class.\nRequired Readings and Supplementary Materials\nRequired Textbook: none\nWe use a set of technical papers and book chapters that are all available online. All of the required readings\nare listed in the course schedule.\nDescription and Assessment of Assignments\nHomework Assignments\nThere will be weekly homework assignments for the first 11 weeks of class. The assignments must be done\nindividually. The homework assignments are expected to take 8-10 hours per week. Each assignment is\ngraded on a scale of 0-100 and the specific rubric for each assignment is given in the assignment. The\nhomework topics are listed in the Course Schedule.\nGrading inquiries and questions about the grading of the homeworks and the quizzes can be asked (to the\nTA) within two weeks from the grading date.\nCourse Project\nAn integral part of this course is the course project, which builds on the topics and techniques covered in\nthe class. Students can work in teams of up to two people on this project. They will present their project\nproposals in class, conduct the project, and then create a video demonstration of the work and present the\nproject in class.\nProject Timeline:\n▪ Week 6: Project proposals presented in class (team members, topic)\n▪ Week 8: Project status update due (1 page status report)\n▪ Week 10: Project status update due (1 page status report)\n▪ Week 12: Project status update due (1 page status report)\n▪ Week 13: Project presentation in class (short talk and video demonstration)\nProject description: Each project team will build a knowledge graph for a topic of their choice. The\n​\nknowledge graph must combine data from at least 3 different sources and at least 2 of those sites must be\nfrom online web sites. The best projects build on many of the topics covered in the class. The homeworks\nhave been designed so that you can work on your projects in the process of doing your homework.\nAn example project would be to build a knowledge graph of used bicycles that could be purchased near the\nUSC campus. This project would combine data from used sources, such as Craig’s List, new bike sources\nsuch as BikeNashbar, and bicycle review sites, such as bicycling.com. The project would collect the data\nfrom each of these sources using wrapper techniques, extract the details of the used bicycle ads from\nCraig’s List using information extraction techniques, align the data across these various sources to a domain\nontology, link the entities across sources to combine the used data with the reviews from bicycling.com and\nprices from BikeNashbar, store all of the data into a graph database such as elasticsearch, and then build a\nsimple user interface to show the results by executing queries against the graph database.\nSyllabus for INF 558, Page 2 of 7",
            "Table Description": "| Date | Lecture | Reading | Instructor\n1 | 08/24/2020 | Introduction | Introduction to Knowledge Graphs (see\n​\ngoogle drive)\nPedro Szekely, et al. Building and using a\n​\nknowledge graph to combat human\ntrafficking. In Proceedings of the 14th\n​\nInternational Semantic Web Conference\n(ISWC 2015), 2015. | MR/FI\n2 | 08/26/2020 | QS: Crawling the\nWeb and\nIntellectual\nProperty | The Anatomy of a Large Scale\nHypertextual Web Search Engine Sergey\n​\nBrin and Lawrence Page, Seventh\nInternational World Wide Web\nConference, 1998.\nKembrew McLeod. Intellectual property\n​\nlaw, freedom of expression, and the web,\n​\n2003. | MR\n3 | 08/31/2020 | QS: Information\nExtraction | D. C. Wimalasuriya and D. Dou.\nOntology-based Information Extraction:\nAn Introduction and a Survey of Current\nApproaches. J. Information Science,\n​\n36(3), 2010. | FI\n4 | 09/02/2020 | QS: Knowledge\nRepresentation | A. Barr and J. Davidson. Representation\n​\nof Knowledge, in Handbook of AI, volume\n​\n1, Chapter 3A-B, pages 141–160. | FI\n5 | 09/07/2020 | Labor Day | No Class | \n6 | 09/09/2020 | QS: Entity\nResolution | W. E. Winkler. The state of record linkage\n​\nand current research problems. In\n​\nStatistical Research Division, US Census\nBureau. Citeseer, 1999. | FI\n7 | 09/14/2020 | QS: Queries and\nKGs | SPARQL 1.1 Query Language.\n​ | BS\n8 | 09/16/2020 | KG Use Cases:\nCOVID, Ethiopia\ndata, etc. |  | TBD\n9 | 09/21/2020 | Large KGs and\nEntity Linking | M. Farber, B. Ell, A. Rettinger, F.\nBartscherer. Linked Data Quality of\n​\nDBpedia, Freebase, OpenCyc, Wikidata,\nand YAGO. The Semantic Web, 2016\n​ | FI\n\n\n\n\n10 | 09/23/2020 | String Similarity | W. Cohen, P. Ravikumar, and S. Fienberg.\nA Comparison of String Distance Metrics\n​\nfor Name-matching Tasks. Conference on\n​\nInformation Integration on the Web,\n2003. | FI\n11 | 09/28/2020 | Information\nExtraction | Alexander Ratner, Stephen H. Bach,\nHenry Ehrenberg, Jason Fries, Sen Wu,\nand Christopher Ré. 2017. Snorkel: rapid\n​\ntraining data creation with weak\nsupervision. Proc. VLDB Endow. 11, 3,\n​ ​ ​\n269-282. | MR\n12 | 09/30/2020 | Project\nProposals |  | \n13 | 10/05/2020 | ER &\nProbabilistic\nSoft Logic (PSL) | J. Pujara and L. Getoor. Generic\n​​\nStatistical Relational Entity Resolution in\nKnowledge Graphs. StaRAI 2016.\n​ | MR\n14 | 10/07/2020 | Blocking and\nRelational ER | G. Papadakis D. Skoutas, E. Thanos and T.\nPalpanas. Blocking and Filtering\n​\nTechniques for Entity Resolution: A\nSurvey. ACM Computing Surveys, 53(2):\n​\n1-42. 2020\nJ. Pujara, H. Miao, L. Getoor, and W.\nCohen. Using Semantics & Statistics to\n​\nTurn Data into Knowledge. AI Magazine,\n​\n36(1):65–74, 2015b | MR\n15 | 10/12/2020 | Ontologies and\nRDF | Frank Manola and Eric Miller. Rdf primer.\n​\nTechnical report, W3C, February 2004.\n​ | FI\n16 | 10/14/2020 | Structured Data | Limaye, G., Sarawagi, S., Chakrabarti, S.:\nAnnotating and Searching Web Tables\nusing Entities, Types and Relationships.\n​\nProc. VLDB Endow. 3(1-2), 1338-1347 | FI\n17 | 10/19/2020 | Graph Analytics\n(possibly include\nSpecial Topics:\nGraphDBs\nSciUnits\nLinkedGeoData) | A Comprehensive Guide to Graph\nAlgorithms in Neo4J | MR\n18 | 10/21/2020 | Semantic Typing\n/ Semantic\nModels | Pham, M.; Alse, S.; Knoblock, C.;\nand Szekely, P, Semantic labeling: A\n​\ndomain-independent approach. In ISWC\n​ ​\n2016.\nTaheriyan, M., Knoblock, C.A., Szekely, P.\nand Ambite, J.L., 2016. Learning the\n​ | Minh Pham\nBinh Vu\n\n\n\n\n |  |  | semantics of structured data sources.\n​\nJournal of Web Semantics. | \n19 | 10/26/2020 | Knowledge\nGraph\nEmbeddings | Yankai Lin, Zhiyuan Liu, Maosong Sun,\nYang Liu, and Xuan Zhu. 2015. Learning\n​\nEntity and Relation Embeddings for\nKnowledge Graph Completion. In AAAI\n​ | MR\n20 | 10/28/2020 | Fast Learning\nfor IE |  | Xiang Ren\n21 | 11/02/2020 | Linked Data &\nSemantic Web\n(possibly include\nSpecial Topics:\nGraphDBs\nSciUnits\nLinkedGeoData) | DBpedia – A Large-scale, Multilingual\nKnowledge Base Extracted from\nWikipedia | BS\n22 | 11/04/2020 | Few-shot\nlearning over\nKGs |  | MR\n23 | 11/09/2020 | Question\nAnswering |  | MR\n24 | 11/11/2020 | Common Sense\nKnowledge |  | FI\n25 | 11/16/2020 | Review |  | /\n26 | 11/18/2020 | Project\nPresentations |  | /\n27 | 11/23/2020 | Project\nPresentations |  | /\n\n\n\n\n\n\nhttp://capsnet.usc.edu/department/department-public-safety/online-forms/contact-us. This is\n​\nimportant for the safety of the whole USC community. Another member of the university\ncommunity – such as a friend, classmate, advisor, or faculty member – can help initiate the report,\nor can initiate the report on behalf of another person. The Center for Women and Men\n​\nhttp://www.usc.edu/student-affairs/cwm/ provides 24/7 confidential support, and the sexual\nassault resource center webpage http://sarc.usc.edu describes reporting options and other\n​ ​\nresources.\nSupport Systems\nA number of USC’s schools provide support for students who need help with scholarly writing.\nCheck with your advisor or program staff to find out more. Students whose primary language is\nnot English should check with the American Language Institute http://dornsife.usc.edu/ali, which\n​ ​ ​\nsponsors courses and workshops specifically for international graduate students. The Office of\n​\nDisability Services and Programs\n​​\nhttp://sait.usc.edu/academicsupport/centerprograms/dsp/home_index.html provides certification\n​​\nfor students with disabilities and helps arrange the relevant accommodations. If an officially\ndeclared emergency makes travel to campus infeasible, USC Emergency Information\n​\nhttp://emergency.usc.edu will provide safety and other updates, including ways in which\n​​\ninstruction will be continued by means of blackboard, teleconferencing, and other technology.\nSyllabus for INF 558, Page 7 of 7\n\n\n"
        }
    },
    {
        "CSCI-570": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n:\nThis course is about designing algorithms for computational problems, and how to think clearly about analyzing\ncorrectness and running time. The main goal of this course is to provide the intellectual tools needed for designing and\nanalyzing your own algorithms for new problems you need to solve in the future. The course explores fundamental\nalgorithm design techniques such as greedy, divide and conquer, dynamic programming, network flow, reduction,\napproximation, linear programming and randomization for efficient algorithm construction. The course describes\nTuring machines and explains what NP-completeness means with respect to possibilities for solving these problems\nefficiently. There are no programming assignments in this course.",
            "Learning Objective": ":\n• Understanding a variety of techniques for designing algorithms.\n• Develop skills to reason about and prove properties of algorithms such as their correctness and running time.\n• Design experiments to evaluate and compare different algorithm techniques on real-world problems\n• Use approximation and linear programming to find near-optimal solutions for challenging problems.\n• Use the concept of randomization to find efficient algorithms for challenging problems.\n• Use the theory of NP-completeness to argue for the difficulty of some problems.\nTextbook:\nAlgorithms in Action, by V. Savvich, Revised First Edition, 2022.\nPurchase the textbook either from the publisher at:\nhttps://store.cognella.com/82372-1C-NI-005\nIf you select an ebook, you will have immediate access upon purchase. If you select the\npaperback for this title, you will receive immediate online access to the first 30% of the\nbook\nV.S. Adamchik CSCI-570 Fall 2024\nOptional textbooks:\nIntroduction to Algorithms, by T.H. Cormen, C.E. Leiserson, R.L. Rivest and C. Stein\nAlgorithms, by S. Dasgupta, C.H. Papadimitriou, and U.V. Vazirani.\nAlgorithm Design, by J. Kleinberg and E. Tardos\nPrerequisites:\nStudents in the class are expected to have a reasonable degree of mathematical sophistication, and to be familiar with the\nbasic notions of algorithms and data structures, discrete mathematics, and probability. Undergraduate classes in these\nsubjects should be sufficient. If you have no previous background in these, I suggest a more thorough introduction such as\n“Mathematics for Computer Science”, by Eric Lehman, Thomson Leighton and Albert Meyer, Samurai Media Limited,\n2017. The course does not emphasize nor require programming, just pseudocode to encourage students on conceptual\nunderstanding.\nTheory Assignments:\n• There will be five written theory assignments.\n• The assignments should be submitted electronically to DEN.\n• Theory assignments must be typed, for example in MS Word, and then converted to pdf.\n• You may work in groups of 2-3. However, each person should hand-in their own solution.\n• Collaboration should be limited to high level talking about the problems, so that your writeup is written entirely by\nyou and not copied from your partner.\n• We won’t accept late submissions.\n• We won’t regrade assignments.\nHomework's Purpose:\nAlgorithms is a pivotal course in computer science studies. The course will require a significant amount of work on your\npart to follow what is taught in class and complete homework successfully. We stress that the homework is an essential\npart of your course work. We devote a fairly large amount of time for designing, writing, grading and explaining the\nhomework, so that you can test yourselves and see how well you understand and implement the course's material.\nP a g e 2 | 7",
            "Table Description": "Week | Topics Covered\nAug. 26 – 30 | Lecture 1: Algorithmic Thinking, Timing Analysis, Mathematical Proofs\nSep. 2 – 6 | Lecture 2: Runtime Analysis. Amortized Analysis. HW1 (due Sep. 8)\nSep. 2 – no classes (recorded video lecture)\nSep. 9 – 13 | Lecture 3: Advanced Heaps Quiz1\nSep. 16 – 21 | Lecture 4: Greedy Algorithms HW2 (due Sep. 22)\nSep. 23 – 27 | Lecture 5: Dijkstra’s Algorithm Divide-and-Conquer Algorithms. Quiz2\nSep. 30 – Oct. 4 | Lecture 6: Dynamic Programming HW3 (due Oct. 6)\nOct. 7 – 11 | Lecture 7: Dynamic Programming Quiz3\nOctober 10-11 - Fall recess Practice Exam 1\nOct. 14 – 18 | Review for exam. Exam-1 on Friday Oct.18 at 6pm\nOct. 21 – 25 | L ecture 8: Network Flow HW4 (due Nov. 3)\nOct. 28 – Nov. 1 | Lecture 9: Flow Circulation Quiz4\nNov. 4 – Nov. 8 | Lecture 10: Linear Programming HW5 (due Nov. 24)\nNov. 11 –15 | Lecture 11: NP-Completeness\nNov. 11 – no classes (recorded video lecture)\nNov. 18 – 22 | Lecture 12: NP-Completeness Quiz5\nNov. 25 – 29 | Lecture 13: Approximation Algorithms Practice Exam 2\nNov. 27-Dec. 1 – no classes\nNov. 27 – no classes (recorded video lecture)\nDec. 2 – Dec. 6 | Review for exam. Exam-2 on Friday Dec. 6 at 6pm"   
        }
    },
    {
        "CSCI-102 L": {
            "Course Description": "Catalogue Course Description:\n: Fundamentalconceptsofalgorithmicthinkingasaprimertoprogram-\nming. Introduction to C++.\n\nExpanded Course Description:\n– January 14, 2020\n≥ 93.00 A 73.00 - 76.99 C\n90.00 - 92.99 A- 70.00 - 72.99 C-\n87.00 - 89.99 B+ 67.00 - 69.99 D+\n83.00 - 86.99 B 63.00 - 66.99 D\n80.00 - 82.99 B- 60.00 - 62.99 D-\n77.00 - 79.99 C+ ≤ 59.99 F\nDisclaimer: Although the instructor does not expect this syllabus to drastically change, he\nreserves every right to change this syllabus any time in the semester.\nNote on e-mail vs. Piazza: If you have a question about the material or logistics of the class\nand wish to ask it electronically, please post it on the piazza page (not e-mail). You may post it\nanonymously if you wish. Often times, if one student has a question/comment, other also have\na similar question/comment. Use e-mail with the professor, TA, graders only for issues that are\nspecific to you individually (e.g., a scheduling issue or grade issue).\nCatalogue Description: Fundamentalconceptsofalgorithmicthinkingasaprimertoprogram-\nming. Introduction to C++.\nCourse Description: This course introduces students to the fundamental concepts of algorith-\nmic thinking as a primer to programming. It is intended for students who have little to no prior\nprogramming experience with the goal of providing a strong foundation for CS 103 Introduction\nto Programming. The course introduces the mathematics and basic language constructs needed\nfor programming as well as the problem-solving techniques required to analyze a problem and pro-\nduce an algorithm. These techniques are put into practice over the course of the semester with an\nintroduction to programming using C++. Weekly lab and programming assignments will provide\nhands-on experience and active learning techniques.\nConcepts include data representation, basic discrete math, control structures (conditional and\niterative structures), functions, and arrays. Weekly small-group discussions will provide the op-\nportunity for students to practice the concepts learned in class, review and ask questions. Weekly\nassignments will provide opportunity to practice, apply, and deepen the knowledge gained from\nlectures. By the end of this course, students should feel comfortable to take information-based\nproblem descriptions and write a software program in C++ to perform the required task.\nCourse Objectives: Upon successful completion of this course a student will\n• Choose appropriate data and variable types to store specific kinds and ranges of information.\n• Write, compile, and run a computer program.\n• Use basic discrete mathematics to understand, describe, and solve computation problems.\n• Understand the way computers represent and operate on data.\n• Trace provided C and C++ code line-by-line to analyze what operations are being performed\nand describe what the program will output.\n• Employ programming concepts: variables, control structures, loops, and arrays to develop\nprograms that solve information problems.",
            "Learning Objective": ": Upon successful completion of this course a student will\n• Choose appropriate data and variable types to store specific kinds and ranges of information.\n• Write, compile, and run a computer program.\n• Use basic discrete mathematics to understand, describe, and solve computation problems.\n• Understand the way computers represent and operate on data.\n• Trace provided C and C++ code line-by-line to analyze what operations are being performed\nand describe what the program will output.\n• Employ programming concepts: variables, control structures, loops, and arrays to develop\nprograms that solve information problems.",
            "Table Description": "Tuesday | Thursday\nJan 14th 1\nIntroduction (Zy 1.1-1.3)\nProgramming (general introduction)\nProgramming basics\nComments and whitespace | 16th 2\nIntroduction (Zy 1.4-1.7)\nErrors and warnings\nComputers and programs (general)\nComputer tour\nLanguage history\n21st 3\nIntroduction (Zy 1.8-1.10)\nProblem solving\nWhy programming?\nWhy whitespace matters? | 23rd 4\nVariables and Assignments (Zy 2.1-2.5)\nVariables and assignments (general)\nVariables (int)\nIdentifiers\nArithmetic expressions (general)\nArithmetic expressions (int)\n28th 5\nVariables and Assignments (Zy 2.7-2.11)\nFloating-point numbers (double)\nScientific notation for floating-point literals\nConstant variables\nUsing math functions\nInteger division and modulo | 30th 6\nVariables and Assignments (Zy 2.12-2.15)\nType conversions\nBinary\nCharacters\nStrings\nFeb 4th 7\nVariables and Assignments (Zy 2.16-2.18)\nInteger overflow\nNumeric data types\nUnsigned | 6th 8\nVariables and Assignments (Zy 2.19-2.22)\nRandom numbers\nDebugging\nAuto\nStyle guidelines\n11th 9\nConditional Statements (Zy 3.1-3.4)\nIf-else branches (general)\nIf-else\nMore if-else\nEquality and relational operator | 13th 10\nConditional Statements (Zy 3.5-3.7)\nDetecting ranges (general)\nDetecting ranges with if-else statements\nLogical operators\n18th 11\nConditional Statements (Zy 3.9-3.11)\nOrder of evaluation\nSwitch statements\nBoolean data type | 20th 12\nConditional Statements (Zy 3.12-3.15)\nString comparisons\nString access operations\nCharacter operations\nMore string operations\n\n\n\n\nTuesday | Thursday\n25th 13\nConditional Statements (Zy 3.16-3.18)\nConditional expressions\nFloating-point comparison\nShort circuit evaluation | 27th 14\nLoops (Zy 4.1-4.3)\nLoops (general)\nWhile loops\nMore while examples\nMar 3rd 15\nLoops (Zy 4.4-4.6)\nFor loops\nMore for loop examples\nLoops and strings | 5th 16\nLoops (Zy 4.7-4.9)\nNested loops\nDeveloping programs incrementally\nBreak and continue\n10th 17\nMidterm Review* | 12th 18\nMidterm\n17th\nSpring Recess | 19th\nSpring Recess\n24th 19\nLoops (Zy 4.10-4.11)\nVariable name scope\nEnumerations | 26th 20\nArrays & Vectors (Zy 5.1-5.5)\nArray/vector concept (general)\nVectors\nArray/vector iteration drill\nIterating through vectors\nMultiple vectors\n31st 21\nArrays & Vectors (Zy 5.6-5.9)\nVector resize Vector push-back\nLoop-modifying or copying/comparing vectors\nSwapping two variables (General) | Apr 2nd 22\nArrays & Vectors (5.11-5.15)\nArrays vs. vectors\nTwo-dimensional arrays\nChar arrays / C strings\nString library functions\nChar library functions: ctype\n7th 23\nUser-Defined Functions (Zy 6.1-6.4)\nUser-defined function basics\nReturn\nReasons for defining functions\nFunctions with conditional statements/loops | 9th 24\nUser Defined Functions (Zy 6.5-6.8)\nUnit testing (functions)\nHow functions work\nFunctions: Common errors\nPass by reference\n14th 25\nUser-Defined Functions (Zy 6.9-6.12)\nFunctions with string/vector parameters\nFunctions with C string parameters\nScope of variable/function definitions\nDefault parameter values | 16th 26\nUser-Defined Functions (Zy 6.13-6.16)\nFunction name overloading\nParameter error checking\nPreprocessor and include\nSeparate files\n\n\n\n\nTuesday | Thursday\n21st 27\nSearching & Sorting Algorithms* (Zy\n15.1-15.4)\nBinary Search\nThe Big O Notation\nTime Complexity | 23rd 28\nSearching & Sorting Algorithms* (Zy\n15.5-15.9)\nSorting\nBubble Sort\nSelection Sort\nQuick Sort\n28th 29\nInterpreted Languages*\nPython | 30th 30\nReview*\nFinal Tips\n\n\n"
        }
    },
    {
        "CSCI-571": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n1/10\nCourse Description\nThis course focuses on the phenomenon known as the World Wide Web. Its focus is to present many of the\ncore technologies that the Web is based upon. These core technologies include:\n• HTML and CSS (HyperText Markup Language and Cascading Style Sheets)\n• HTTP (HyperText Transfer Protocol) 1.1/2/3\n• Web servers, their configuration and performance properties\n• Client-side Programming Using JavaScript\n• Ajax (Asynchronous JavaScript & XML) and JSON (JavaScript Object Notation)\n• Server-side Programming Using Python and JavaScript\nIn addition, the course will also cover the following subsidiary topics:\n• Web Services (REST)\n• Web Security and Privacy Tools\n• Web Technologies for Mobile Phones (Android and iOS)\n• Responsive Website Design\n• Cloud Computing (Amazon Web Services, Google Cloud Platform and Microsoft Azure)\n• Angular, React and Node.js\n• Serverless Applications, Microservices, Containers\n• AWS Lambda, Google Cloud Functions, and Azure Functions\n• Diceware, TOR, and the Dark Web\n• MongoDB Atlas\nThe course is recommended for students with deep knowledge of at least two programming languages\n(JavaScript, Java, Python, C#, C++).",
            "Learning Objective": "Course Outcomes (expected after you've finished the course)\ni The ability to write RESTful API applications;\nii The ability to set up Cloud services;\niii The ability to design and code back-end scripts in Python and JavaScript;\niv The ability to design and code front-end Web Applications;\nv The ability to design and code Mobile Apps in Swift/SwiftUI or Java/Kotlin;\nvi The ability to design and code web front-end asynchronous applications using AJAX;\nvii The ability to design and code responsive web apps;\nviii The ability to use JavaScript in writing front-end programs;\nix The ability to use HTML and CSS in designing graphical user interfaces;\nx The ability to read Web Services API documentation and use it in building Web applications;\nxii The ability to write Microservices and Containers.\nGraduates of the program will have an ability to:\n1 Analyze a complex computing problem and to apply principles of computing and other relevant\ndisciplines to identify solutions.\n2 Design, implement, and evaluate a computing-based solution to meet a given set of computing\nrequirements.\n3 Communicate effectively in a variety of professional contexts.\n4 Recognize professional responsibilities and make informed judgments in computing practice\nbased on legal and ethical principles.\nPrerequisite(s): None.\nCSCI 571 Syllabus\n2/10",
            "Table Description": "Week | Lecture |  |  | Date |  |  | Lecture Topic |  |  |  | Assignment Due |  | Homework Topic |  | \n |  |  |  |  |  |  |  |  |  |  | Dates |  |  |  | \n1 |  | 1 |  |  | January 9, 2024 |  |  | Introduction |  |  |  |  | GitHub Pages |  | \n |  | 2 |  |  | January 11, 2024 |  |  | Internet and Web Basics |  |  |  |  |  |  | \n2 |  | 3 |  |  | January 16, 2024 |  |  | HTML |  |  |  |  |  |  | \n |  | 4 |  |  | January 18, 2024 |  |  | Style Sheets (CSS) |  |  |  |  |  |  | \n3 |  | 5 |  |  | January 23, 2024 |  |  | JavaScript Basics |  |  |  |  |  |  | \n |  | 6 |  |  | January 25, 2024 |  |  | JSON |  |  | Assignment #1 |  |  |  | \n4 |  | 7 |  |  | January 30, 2024 |  |  | Server-Side Scripts in Python |  |  |  |  |  |  | \n |  | 8 |  |  | February 1, 2024 |  |  | Document Object Model (DOM) |  |  |  |  |  |  | \n5 |  | 9 |  |  | February 6, 2024 |  |  | Forms and CGI Mechanism |  |  |  |  |  | Cloud Setup | \n |  | 10 |  |  | February 8, 2024 |  |  | Web Servers |  |  |  |  |  | (Python) | \n6 |  | 11 |  |  | February 13, 2024 |  |  | JavaScript Advanced |  |  |  |  |  |  | \n |  | 12 |  |  | February 15, 2024 |  |  | HTTP and Networking Theory |  |  |  |  |  |  | \n7 |  | 13 |  |  | February 20, 2024 |  |  | Written Exam #1 |  |  |  |  |  |  | \n |  | 14 |  |  | February 22, 2024 |  |  | Web Server Performance |  |  | Assignment #2 |  |  |  | \n8 |  | 15 |  |  | February 27, 2024 |  |  | Web Services and REST |  |  |  |  |  |  | \n |  | 16 |  |  | February 29, 2024 |  |  | Ajax |  |  |  |  |  |  | \n9 |  | 17 |  |  | March 5, 2024 |  |  | Responsive Website Design |  |  |  |  |  | Cloud Setup | \n |  | 18 |  |  | March 7, 2024 |  |  | JavaScript Frameworks |  |  |  |  |  | (NodeJS) | \n |  |  |  | March 11-15, 2024 |  |  | Spring Recess |  |  |  |  |  |  |  | \n10 |  | 19 |  |  | March 19, 2024 |  |  | jQuery |  |  |  |  |  |  | \n |  | 20 |  |  | March 21, 2024 |  |  | High Performance Websites |  |  |  |  |  |  | \n11 |  | 21 |  |  | March 26, 2024 |  |  | React and React Native |  |  |  |  |  |  | \n |  | 22 |  |  | March 28, 2024 |  |  | Mobile App Development (Android) |  |  | Assignment #3 |  |  |  | \n12 |  | 23 |  |  | April 2, 2024 |  |  | Mobile App Development (iOS) |  |  |  |  |  |  | \n |  | 24 |  |  | April 4, 2024 |  |  | Serverless Applications |  |  |  |  |  |  | \n13 |  | 25 |  |  | April 9, 2024 |  |  | Cookies and Privacy |  |  |  |  |  |  | \n |  | 26 |  |  | April 11, 2024 |  |  | Cloud HTML5: the Next Generation |  |  |  |  |  |  | \n14 |  | 27 |  |  | April 16, 2024 |  |  | TBD |  |  |  |  |  |  | \n |  | 28 |  |  | April 18, 2024 |  |  | Web Security |  |  |  |  |  |  | \n15 |  | 29 |  |  | April 23, 2024 |  |  | TBD |  |  |  |  |  |  | \n |  | 30 |  |  | April 25, 2024 |  |  | Written Exam #2 |  |  |  |  |  |  | \n | 31 |  |  | May 1, 2024 |  |  |  | Final Project Demonstrations (On video) |  | Assignment #4 |  |  |  |  | \n |  |  |  |  |  |  |  | + Documentation |  |  |  |  |  |  | \n\n\n"
        }
    },
    {
        "CSCI-201": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nObject-oriented paradigm for programming-in-the-large in Java; writing sophisticated concurrent\napplications with animation and graphical user interfaces; using professional tools on team project. Porting\nover all the C++ knowledge to Java. By the end of the semester, you should be more proficient in Java than\nC++, and will understand how to program large-scale applications, utilizing Web front-end and MySQL back-\nend.",
            "Learning Objective": "Course Outcomes (expected after you've finished the course)\ni The ability to explain software engineering in terms of requirements, design, and\nimplementation;\nii The ability to use interaction diagrams to help define requirements;\niii The ability to produce a software design based on requirements;\niv The ability to produce software, including graphical user interfaces, from a design;\nv The ability to unit-test a module;\nvi The ability to explain concurrency and how it works in computer operating systems;\nvii The ability to write multi-threaded programs and correctly solve a mutual exclusion problem\nusing semaphores or monitors;\nviii The ability to use Java in writing programs;\nix The ability to use HTML and CSS in designing graphical user interfaces;\nx The ability to use messaging as a communication method;\nxii The ability to apply a software engineering process to a large software project;\nxiii The ability to work effectively on a team;\nxiv The ability to analyze ethical issues in working within a group;\nGraduates of the program will have an ability to:\n1 Analyze a complex computing problem and to apply principles of computing and other relevant\ndisciplines to identify solutions.\n2 Design, implement, and evaluate a computing-based solution to meet a given set of computing\nrequirements in the context of the program’s discipline.\n3 Communicate effectively in a variety of professional contexts.\n4 Recognize professional responsibilities and make informed judgments in computing practice\nbased on legal and ethical principles.\n5 Function effectively as a member or leader of a team engaged in activities appropriate to the\nprogram’s discipline.\nPrerequisite(s): CSCI 104L – Data Structures and Object-Oriented Design.\nCourse Notes\nThe course will have both lectures and labs. The lectures will be given live, in-person. D2L Brightspace will\nbe used for hosting the course materials (slides, labs, assignments), grades, and Zoom will be used for live\nstreaming the lectures. D2L Brightspace will be used by students for uploading completed assignments and\ntaking quizzes and exams.\nIn-person and Online Lectures\nLectures will be held live, in-person, and on Zoom. Lecture recordings will not be available.\nA Zoom Meeting link for lectures will be available on D2L Brightspace.\nCSCI 201 Syllabus\n2/11",
            "Table Description": "| Week |  |  | Lecture |  |  | Date |  |  | Lecture Topic |  |  | Chapter |  |  | Lab Topic | \n1 |  |  |  | 1 |  |  | January 9, 2024 |  |  | Introduction, Environment, Methods |  |  | 1-8 |  | No Lab |  | \n |  |  |  | 2 |  |  | January 11, 2024 |  |  | Classes, Packages, File I/O |  |  | 9-10 |  |  |  | \n2 |  |  | 3 |  |  | January 16, 2024 |  |  |  | Inheritance, Abstract Classes and Interfaces, |  | 11, 13 |  |  | Environment\nSetup |  | \n |  |  |  |  |  |  |  |  |  | Polymorphism |  |  |  |  |  |  | \n |  |  | 4 |  |  | January 18, 2024 |  |  |  | Garbage Collection, Exception Handling, |  | 12, 19 |  |  |  |  | \n |  |  |  |  |  |  |  |  |  | Serialization, Generics |  |  |  |  |  |  | \n3 |  |  |  | 5 |  |  | January 23, 2024 |  |  | Concurrent Computing |  |  | 32 |  | Inheritance |  | \n |  |  |  | 6 |  |  | January 25, 2024 |  |  | Thread Methods, Thread Pools, Thread Priorities |  |  | 32 |  |  |  | \n4 |  |  |  | 7 |  |  | January 30, 2024 |  |  | Concurrency, Monitors |  |  | 32 |  | Threads |  | \n |  |  |  | 8 |  |  | February 1, 2024 |  |  | Locks, Conditions |  |  | 32 |  |  |  | \n5 |  |  |  | 9 |  |  | February 6, 2024 |  |  | Semaphores, Parallel Computing |  |  | 32 |  | Locks and\nMonitors |  | \n |  |  | 10 |  |  | February 8, 2024 |  |  |  | Producer/Consumer, Multi-Threaded |  |  |  |  |  |  | \n |  |  |  |  |  |  |  |  |  | Programming Design |  |  |  |  |  |  | \n6 |  |  |  | 11 |  |  | February 13, 2024 |  |  | Software Engineering, Testing, Project Description |  |  |  |  |  | Parallel | \n |  |  |  | 12 |  |  | February 15, 2024 |  |  | Networking Theory |  |  | 33 |  |  | Computing | \n7 |  |  |  |  |  | February 10, 2024 |  |  | No Labs - President’s Day |  |  |  |  |  |  |  | \n |  |  |  | 13 |  |  | February 20, 2024 |  |  | Networking Theory (cont.) |  |  | 33 |  |  | Software | \n |  |  | 14 |  |  | February 22, 2024 |  |  | Network Programming |  |  | 33 |  |  |  | Engineering, | \n |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  | GitHub | \n |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  | Tutorial | \n8 |  |  |  | 15 |  |  | February 27, 2024 |  |  | Multi-Threaded Network Programming |  |  | 33 |  |  | Networking | \n |  |  |  | 16 |  |  | February 29, 2024 |  |  | Databases |  |  | 34 |  |  | Worksheet | \n9 |  |  |  |  |  | March 5, 2024, 11:00AM |  |  | Written Exam #1 |  |  |  | 1-13, 19, |  | MySQL\nInstallation |  | \n |  |  |  |  |  |  |  |  |  |  |  |  | 32, 33 |  |  |  | \n |  |  |  | 17 |  |  | March 7, 2024 |  |  | SQL |  |  | 34 |  |  |  | \n |  |  |  |  |  | March 11-15, 2024 |  |  | Spring Recess |  |  |  |  |  |  | No Lab | \n10 |  |  |  | 18 |  |  | March 19, 2024 |  |  | JDBC |  |  | 34-35 |  | JDBC |  | \n |  |  |  | 19 |  |  | March 21, 2024 |  |  | HTML, CSS |  |  |  |  |  |  | \n11 |  |  |  | 20 |  |  | March 26, 2024 |  |  | HTML/CSS Programming |  |  | 37-38 |  | Web Server |  | \n |  |  |  | 21 |  |  | March 28, 2024 |  |  | Java Servlets |  |  | 37-38 |  |  |  | \n12 |  |  |  | 22 |  |  | April 2, 2024 |  |  | JavaScript |  |  |  |  | Java Servlets |  | \n |  |  |  | 23 |  |  | April 4, 2024 |  |  | AJAX |  |  |  |  |  |  | \n13 |  |  |  | 24 |  |  | April 9, 2024 |  |  | Web Sockets |  |  |  |  |  | JavaScript and | \n |  |  |  | 25 |  |  | April 11, 2024 |  |  | Cloud Computing, Serverless, Containers |  |  |  |  |  | AJAX | \n14 |  |  |  | 26 |  |  | April 16, 2024 |  |  | Guest Lecture: Best Culture, Felix Lin |  |  |  |  | No Lab |  | \n |  |  |  | 27 |  |  | April 18, 2024 |  |  | Hacking The Web |  |  |  |  |  |  | \n15 |  |  |  | 28 |  |  | April 23, 2024 |  |  | TBD |  |  |  |  |  |  | \n |  |  |  |  |  | April 25, 2024, 11:00AM |  |  | Written Exam #2 |  |  |  | 1-13, 19, |  |  |  | \n |  |  |  |  |  |  |  |  |  |  |  |  | 32-35, |  |  |  | \n |  |  |  |  |  |  |  |  |  |  |  |  | 37-38 |  |  |  | \n |  |  |  |  |  | May 7, 2024 |  |  |  | Final Team Project Demonstration (on video) + |  |  |  |  |  |  | \n |  |  |  |  |  |  |  |  |  | Deliverables |  |  |  |  |  |  | \n\n\n\n\n | Week |  |  | Day |  |  | Due Date |  |  | Assessment |  |  | % of Grade | \n | 1 |  |  | Sunday |  |  | January 14, 2024 |  |  | Quiz #1 |  |  | 0.7% | \n2 |  |  |  | Monday-Thursday |  |  | January 15-18, 2024 |  |  | Lab #1 |  |  | 0.8% | \n |  |  |  | Sunday |  |  | January 21, 2024 |  |  | Quiz #2 |  |  | 0.7% | \n3 |  |  |  | Monday-Thursday |  |  | January 22-25, 2024 |  |  | Lab #2 |  |  | 0.8% | \n |  |  |  | Wednesday |  |  | January 24, 2024 |  |  | Assignment #1 |  |  | 4.0% | \n |  |  |  | Sunday |  |  | January 28, 2024 |  |  | Quiz #3 |  |  | 0.7% | \n4 |  |  |  | Monday-Thursday |  |  | January 29-February 1, 2024 |  |  | Lab #3 |  |  | 0.8% | \n |  |  |  | Sunday |  |  | February 4, 2024 |  |  | Quiz #4 |  |  | 0.7% | \n5 |  |  |  | Monday-Thursday |  |  | February 5-8, 2024 |  |  | Lab #4 |  |  | 0.8% | \n |  |  |  | Sunday |  |  | February 11, 2024 |  |  | Quiz #5 |  |  | 0.7% | \n6 |  |  |  | Monday-Thursday |  |  | February 12-15, 2024 |  |  | Lab #5 |  |  | 0.8% | \n |  |  |  | Friday |  |  | February 16, 2024 |  |  | Assignment #2 |  |  | 6.0% | \n |  |  |  | Sunday |  |  | February 18, 2024 |  |  | Quiz #6 |  |  | 0.7% | \n7 |  |  | Monday |  |  | February 19, 2024 |  |  | No Labs – President’s Day |  |  |  |  | \n |  |  |  | Tuesday-Friday |  |  | February 20-23, 2024 |  |  | Lab #6 |  |  | 0.8% | \n |  |  |  | Tuesday-Sunday |  |  | February 20-25, 2024 |  |  | FP – Weekly Meeting #1 |  |  | 0.5% | \n |  |  |  | Sunday |  |  | February 25, 2024 |  |  | FP – Project Proposal |  |  | 1.0% | \n |  |  |  | Sunday |  |  | February 25, 2024 |  |  | Quiz #7 |  |  | 0.7% | \n8 |  |  |  | Monday-Thursday |  |  | February 26-29, 2024 |  |  | Lab #7 |  |  | 0.8% | \n |  |  |  | Monday-Sunday |  |  | February 26-March 3, 2024 |  |  | FP – Weekly Meeting #2 |  |  | 0.5% | \n |  |  |  | Sunday |  |  | March 3, 2024 |  |  | FP – High-Level Requirements |  |  | 2.0% | \n |  |  |  | Sunday |  |  | March 3, 2024 |  |  | Quiz #8 |  |  | 0.7% | \n9 |  |  |  | Monday-Thursday |  |  | March 4-7, 2024 |  |  | Lab #8 |  |  | 0.8% | \n |  |  |  | Monday-Sunday |  |  | March 4-10, 2024 |  |  | FP – Weekly Meeting #3 |  |  | 0.5% | \n |  |  |  | Tuesday |  |  | March 5, 2024 |  |  | Written Exam #1 |  |  | 15% | \n |  |  |  | Sunday |  |  | March 10, 2024 |  |  | FP – Technical Specifications |  |  | 2.0% | \n10 |  |  | Monday-Friday |  |  | March 11-15,2024 |  |  | Spring Recess |  |  |  |  | \n |  |  |  | Monday-Thursday |  |  | March 18-21, 2024 |  |  | Lab #9 |  |  | 0.9% | \n |  |  |  | Monday-Sunday |  |  | March 18-24, 2024 |  |  | FP – Weekly Meeting #4 |  |  | 0.5% | \n |  |  |  | Sunday |  |  | March 24, 2024 |  |  | FP – Detailed Design |  |  | 3.0% | \n |  |  |  | Sunday |  |  | March 24, 2024 |  |  | Quiz #9 |  |  | 0.7% | \n |  |  |  | Sunday |  |  | March 24, 2024 |  |  | Assignment #3 |  |  | 6.0% | \n11 |  |  |  | Monday-Thursday |  |  | March 25-28, 2024 |  |  | Lab #10 |  |  | 0.9% | \n |  |  |  | Monday-Sunday |  |  | March 25-31, 2024 |  |  | FP – Weekly Meeting #5 |  |  | 0.5% | \n |  |  |  | Sunday |  |  | March 31, 2024 |  |  | FP – Testing Plan |  |  | 2.0% | \n |  |  |  | Sunday |  |  | March 31, 2024 |  |  | FP – Peer Review #1 |  |  | 1.0% | \n |  |  |  | Sunday |  |  | March 31, 2024 |  |  | Quiz #10 |  |  | 0.7% | \n12 |  |  |  | Monday-Thursday |  |  | April 1-4, 2024 |  |  | Lab #11 |  |  | 0.9% | \n |  |  |  | Monday-Sunday |  |  | April 1-7, 2024 |  |  | FP – Weekly Meeting #6 |  |  | 0.5% | \n |  |  |  | Sunday |  |  | April 7, 2024 |  |  | FP – Deployment Document |  |  | 1.0% | \n |  |  |  | Sunday |  |  | April 7, 2024 |  |  | Quiz #11 |  |  | 0.7% | \n13 |  |  |  | Monday-Thursday |  |  | April 8-11, 2024 |  |  | Lab #12 |  |  | 0.9% | \n |  |  |  | Monday-Sunday |  |  | April 8-14, 2024 |  |  | FP – Weekly Meeting #7 |  |  | 0.5% | \n |  |  |  | Sunday |  |  | April 14, 2024 |  |  | Quiz #12 |  |  | 0.7% | \n14 |  |  |  | Monday-Sunday |  |  | April 15-21, 2024 |  |  | FP – Weekly Meeting #8 |  |  | 0.5% | \n |  |  |  | Sunday |  |  | April 21, 2024 |  |  | FP – Peer Review #2 |  |  | 1.0% | \n |  |  |  | Sunday |  |  | April 21, 2024 |  |  | Quiz #13 |  |  | 0.7% | \n15 |  |  |  | Tuesday |  |  | April 23, 2024 |  |  | Assignment #4 |  |  | 4.0% | \n |  |  |  | Thursday |  |  | April 25, 2024 |  |  | Written Exam #2 |  |  | 15% | \n |  |  |  | Friday |  |  | April 26, 2024 |  |  | FP - Complete Documentation |  |  | 1.0% | \n |  |  |  | Friday |  |  | April 26, 2024 |  |  | FP – Code Complete |  |  | 2.0% | \n |  |  | Tuesday |  |  | May 7, 2024 |  |  |  | Final Team Project |  | 10% |  | \n |  |  |  |  |  |  |  |  |  | Demonstration + Deliverables |  |  |  | \n\n\n"
        }
    },
    {
        "CSCI-567": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n:\nThis course provides students with an in-depth introduction to the theory and practical algorithms for\nmachine learning from a variety of perspectives. It covers some of the main models and algorithms for\nregression, classification, clustering and Markov decision processes. Topics includes linear and logistic\nregression, regularization, probabilistic (Bayesian) inference, SVMs and kernel methods, ANNs,\nclustering, and dimensionality reduction. The course uses the Python programming language and assumes\nin addition familiarity with linear algebra, probability theory, and multivariate calculus. This course is\ndesigned to give graduate-level students a thorough grounding in the methodologies, technologies,\nmathematics and algorithms currently needed by people who apply machine learning to a whole host of\napplications.",
            "Learning Objective": ":\n• Understanding a wide variety of learning algorithms.\n• Develop skills to apply learning algorithms to solving practical problems.\n• Understanding how to perform evaluation of learning algorithms and model selection.\n• Implement in code common ML algorithms (as assessed by the homeworks).\nOptional Textbooks:\nMachine Learning: A Probabilistic Perspective, by Kevin Murphy\nMachine Learning, by Tom Mitchell\nPrerequisites:\nStudents in the class are expected to have a reasonable degree of mathematical sophistication, and to be\nfamiliar with the basic knowledge of linear/matrix algebra, multivariate calculus, probability and\nstatistics. Undergraduate classes in these subjects should be sufficient. Students are also expected to have\nknowledge of basic algorithm design techniques (greedy, dynamic programming, randomized algorithms,\nlinear programming, approximation algorithms) and basic data structures. Programming in Python is\nrequired.\nV.S. Adamchik CSCI-567 Fall 2019\nReview Materials:\nAlgorithms: https://store.cognella.com/82372-1b-002\nLinear Algebra: http://viterbi-web.usc.edu/~adamchik/567/review-linalg.pdf\nProbability: http://viterbi-web.usc.edu/~adamchik/567/review-prob.pdf\nPython Tutorial: http://cs231n.github.io/python-numpy-tutorial/\nTheory Assignments:\n• There will be four written theory assignments.\n• The assignments should be submitted electronically via Desire2learn.\n• Theory assignments must be neatly written or typed.\n• You may work in groups of 2-3. However, each person should hand-in their own writeup.\n• Collaboration should be limited to talking about the problems, so that your writeup is written entirely\nby you and not copied from your partner.\n• There are NO late days for assignments.\nProgramming Assignments:\n• There will be four (or five) programming assignments.\n• Programming assignments should be submitted electronically to Vocareum.\n• They are auto-graded.\n• You may submit your implementation several times. The limit is set differently for each assignment.\n• Collaboration should be limited to talking about the problems.\n• Each assignment will be checked for code plagiarism.\n• There are NO late days for assignments.\nExams:\n• There will be two midterm exams.\n• No makeup exams will be provided.\n• If you skip the exam, you may be eligible for an IN grade for the course. The incomplete grade has to\nbe completed within one year. However, in order to get an IN you have to have a valid cause. Please\nread the University policy on IN grade for more details.\n• The exam solutions and grading rubric will always be posted.\nP a ge 2 | 6",
            "Table Description": "Date | Topics Covered\nAug. 26 - 30 | Lecture 1: Course Overview, kNN, Cross-validation, Leave-one-out\nSep. 2 - 6 | Lecture 2: Decision Tree, Naive Bayes, Entropy and Gini impurity,\nReduced-Error Pruning\nSep. 9 - 13 | Lecture 3: Linear Regression, Residual Sum of Squares, Nonlinear basis,\nRegularization\nSep. 16 - 20 | Lecture 4: Perceptron, Logistic Regression, Gradient Descent, Surrogate\nLosses, Multiclass Classification\nSep. 23 - 27 | Lecture 5: Neural Networks, Backpropagation, Preventing overfitting, CNN\nOct. 1 - 4 | Lecture 6: Convolutional Neural Networks, Kernels, Mercer theorem\nOct. 7 - 11 | Review for exam (Tue/Thu)\nOct. 14 - 18 | Exam – I (Tue, Oct 15, 5-7:20pm). No lecture on Thu\nOct. 21 - 25 | Lecture 7: Support Vector Machines, Linear Programming, Lagrangian\nDuality, KKT conditions, Dual SVM\nOct. 28 - 31 | Lecture 8: Dimensionality Reduction, Principal Component Analysis,\nBoosting, AdaBoost, Bagging, Random Forest\nNov. 4 - 8 | Lecture 9: K-means clustering, Gaussian Mixture Models\nNov. 11 - 15 | Lecture 10: EM algorithm, Kernel Density Estimation\nNov. 18 - 22 | Lecture 11: Hidden Markov Models, Viterbi algorithm, Baum-Welch\nalgorithm\nNov. 25 - 29 | Lecture 12: Reinforcement Learning, Multi-Armed Bandits, Markov Decision\nProcesses\nDec. 2 - 6 | Review for exam (Tue/Thu), Exam – II (Fri, Dec 6, 5-7:20pm),\nALT (Dec, 12 4:30-6:30pm)\n\n\n\n\nAssignment | Content | Out | Due\nPA1 | kNN, Decision trees | Sep. 1 | Sep 22\nPA2 | Regressions | Sep 22 | Oct 13\nPA3 | Neural Networks | Oct 13 | Nov 3\nPA4 | HMM & PCA | Nov 3 | Nov 24\n\n\n\n\nAssignment | Content | Out | Due\nTA1 | kNN, Decision trees,\nNaive Bayes\n(lectures 1 - 2) | Sep. 6 | Sep 20\nTA2 | Regressions, NN\n(lectures 3 - 6) | Sep 20 | Oct 9\nTA3 | SVM, Boosting, PCA\n(lectures 7 - 9) | Oct 24 | Nov 8\nTA4 | Clustering, GMM, HMM\n(lectures 10 - 12) | Nov 8 | Nov 25\n\n\n"
        }
    },
    {
        "CSCI-360": {
            "Course Description": "Catalogue Course Description:\n: Concepts and algorithms underlying the understanding and construc-\ntion of intelligent systems. Agents, problem solving, search, representation, reasoning, planning,\nmachine learning.\n\nExpanded Course Description:\n– January 10, 2023\nLetter Grade Distribution:\n≥ 93.00 A 73.00 - 76.99 C\n90.00 - 92.99 A- 70.00 - 72.99 C-\n87.00 - 89.99 B+ 67.00 - 69.99 D+\n83.00 - 86.99 B 63.00 - 66.99 D\n80.00 - 82.99 B- 60.00 - 62.99 D-\n77.00 - 79.99 C+ ≤ 59.99 F\nDisclaimer: Although the instructor does not expect this syllabus to drastically change, he\nreserves every right to change this syllabus any time in the semester.\nNote on e-mail vs. Piazza: If you have a question about the material or logistics of the class\nand wish to ask it electronically, please post it on the piazza page (not e-mail). You may post it\nanonymously if you wish. Often times, if one student has a question/comment, other also have\na similar question/comment. Private Piazza posts to the whole instructor team should be used\nto contact the professor, TA, graders only for issues that are specific to you individually (e.g., a\nscheduling issue or grade issue)..\nCatalogue Description: Concepts and algorithms underlying the understanding and construc-\ntion of intelligent systems. Agents, problem solving, search, representation, reasoning, planning,\nmachine learning.\nCourse Description: ArtificialIntelligence(AI)seekstounderstandthemechanismsunderlying\nthought and intelligent behavior, with a particular focus on their embodiment in machines. Core\ntopics include the integrating perspective of intelligent agents and how such systems can engage in:\nsearch and problem solving; symbolic and probabilistic knowledge representation and reasoning;\nplanning; and machine learning. The course introduces both basic concepts and algorithms, and\nexplores how to apply these in the construction of systems that can interact intelligently with\ncomplex environments. The course is intended for undergraduate students in computer science or\nclosely related disciplines, usually in the junior year. Graduate students should take CSCI 561\nrather than CSCI 360.\nCourse Objectives: Upon successful completion of this course a student will\n• Broadly understand rationality and intelligence\n• Understand problem solving via search\n• Understand Uninformed and informed search algorithms\n• Understand adversarial search and games\n• Understand logical agents, logical inference, and knowledge-based systems\n• Understand automated planning\n• Understand decision theory\n• Understand supervised and unsupervised learning .",
            "Learning Objective": ": Upon successful completion of this course a student will\n• Broadly understand rationality and intelligence\n• Understand problem solving via search\n• Understand Uninformed and informed search algorithms\n• Understand adversarial search and games\n• Understand logical agents, logical inference, and knowledge-based systems\n• Understand automated planning\n• Understand decision theory\n• Understand supervised and unsupervised learning .",
            "Table Description": "Monday | Wednesday\nJan 9th 1\nIntroduction and History of AI (AIMA\nCh. 1) | 11th 2\nIntelligent Agents (AIMA Ch. 2)\n16th\nMartin Luther King Day | 18th 3\nProblem Solving via Search (AIMA Ch.\n3.1-3.3)\nProblem Formulation\nExamples\nSearch Algorithms\nBest-first Search\n23rd 4\nProblem Solving via Search (AIMA Ch.\n3.3-3.4)\nUninformed Search\nDepth-First Search\nBreadth-First Search\nUniform Cost Search | 25th 5\nSearch in Complex Environments (AIMA\nCh. 3.5-3.6)\nInformed Search\nGreedy best-first search\nA* Search\nHeuristic Functions\n30th 6\nSearch in Complex Environments (AIMA\nCh. 4.1-4.2)\nLocal Search and Optimization\nHill Climbing\nEvolutionary Algorithms\nSimulated Annealing*\nParticle Swarm Optimization* | Feb 1st 7\nAdversarial Search and Games (AIMA\nCh. 5.1-5.3)\nGame Theory\nOptimal Decisions and Min-Max\nAlpha-Beta Pruning\n6th 8\nReview of Probability Theory (AIMA\nCh. 12.1-12.5)\nQuantifying Uncertainty\nProbability Axioms\nEvents and Logic\nProbability Distributions\nIndependence\nTotal Probability and The Bayes’ Rule | 8th 9\nDecision Theory (AIMA Ch. 16.1-16.5)\nUtility Theory\nRational Preferences\nUtility Functions\nDecision Networks*\n\n\n\n\nMonday | Wednesday\n13th 10\nAgents that Learn from Experience and\nData (AIMA Ch. 19.1-19.2, 19.4, 19.9)\nWhat is Machine Learning?\nSupervised, Unsupervised, and Reinforcement\nLearning\nRegression and Classification\nThe Bias-Variance Trade-off\nNo Free Lunch! | 15th 11\nClassification (AIMA Ch. 19.7.3)\nBayes’ Optimal Classifiers and KNN\nLogistic Regression*\n20th\nPresident’s Day | 22nd 12\nClassification (AIMA Ch. 12.6)\nBayesian Learning and Na¨ıve Bayes’ Learning\nText Classification\n27th 13\nRegression (AIMA Ch. 19.6.1-19.6.3, 19.7.4)\nMinimum Mean-Squared Error Regression\nKNN Regression\nLinear Regression | Mar 1st 14\nDecision Trees (AIMA Ch. 19.3)\nRegression and Classification Trees\n6th 15\nMidterm | 8th 16\nAgents that Think Humanly\nFuzzy Sets\nFuzzy Inference\nInterpretable Learning Using Fuzzy\nRule-Based Systems\n13th\nSpring Recess | 15th\nSpring Recess\n20th 17\nSupervised Hebbian Learning\nPerceptron Learning Rule\nHopfield Neural Networks | 22nd 18\nNeural Networks and Deep Learning\n(AIMA Ch. 21)\nFeedforward Neural Networks\nBackpropagation and Gradient Descent\nOverfitting\nRegularization\n\n\n\n\nMonday | Wednesday\n27th 19\nReinforcement Learning* (AIMA Ch.\n22.3.3-22.5)\nDefinitions\nTask-Reward-Policy Formulation\nTotal Discounted Future Reward\nOptimal Policy\nValue Function\nQ-Function\nThe Bellman Equation\nQ-Learning\nExploration- Exploitation\nExtensions to Stochastic Environments and\nRewards\nDeep Reinforcement Learning | 29th 20\nUnsupervised Learning\nK-Means Clustering\nHierarchical Clustering\nCompetitive Learning and Self-Organizing\nMaps*\nApr 3rd 21\nLogical Agents (AIMA Ch. 7.1-7.3)\nKnowledge-Based Agents\nLogic | 5th 22\nPropositional Logic (AIMA Ch. 7.4-7.5)\nAristotelian Logic\nInference\nTheorem Proving\nForward and Backward Chaining\n10th 23\nFirst-Order Logic (AIMA Ch. 8.1-8.4)\nKnowledge Representation via Logic\nSyntax and Semantics\nExistential and Universal Quantification\nApplications\nKnowledge Engineering* | 12th 24\nInference in First-Order Logic (AIMA\nCh. 9.1-9.2)\nInference\n17th 25\nKnowledge-Based Systems (AIMA Ch.\n9.3-9.4)\nForward and Backward Chaining | 19th 26\nSearch-Based Planning* (AIMA Ch.\n11.1-11.4)\nClassical Planning Formulation\nAutomated Planning Algorithms\n24th 27\nSearch-Based Planning* (AIMA Ch.\n11.1-11.4)\nHeuristics\nHierarchical Planning | 26th 28\nThe Future of AI*, Ethics in AI*,\nReview and Wrapup (AIMA Chs. 27, 28)\n\n\n\n\nFriday\nJan 13th\n-\n20th\n-\n27th\nLab 0 Due (not graded)\nFeb 3rd\nPS 1 Due\n10th\nLab 1 Due\n17th\nPS 2 Due\n24th\nLab 2 Due\nMar 3rd\nPS 3 Due\n10th\nPS 4 Due\n17th 1\nSpring Recess\n24th 1\nLab 3 Due\n31st 1\nPS 5 Due\nApr 7th 1\nLab 4 Due\n14th 1\nPS 6 Due\n21st 1\nLab 5 Due\n28th 1\nPS 7 Due\n\n\n"
        }
    },
    {
        "DSCI-529": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n- What is Privacy and Security?\nFriday January 24, 2025 - Second Lecture - What data is collected and how is it used?\nFriday January 31, 2025 - Third Lecture - Technical Means of Protection - Encryption - Security\nPrimer part 1\nFriday February 7, 2025 - Fourth Lecture - Identifications, Authentication, Audit - Security Primer part\n2\nFriday February 14, 2025 - Fifth Lecture - Reasonable Expectations of Privacy - What do we expect\nFriday February 21, 2025 - Sixth Lecture - Use of and Access to Data by Governments - Privacy in a\nPandemic\nFriday February 28, 2025 - Seventh Lecture - AI and Bias - Big Data - Measuring Privacy -\nTechnology and Prvacy\nFriday March 7, 2025 - Eighth Lecture - Mid-term Exam Noon-1:40PM, Followed by Eighth\nLecture 2PM-3:20PM\nFriday March 14, 2025 - Ninth Lecture - Social Media - Social Networks - Security and Privacy - How\nour data is used\nFriday March 28, 2025 - Tenth Lecture - Free Speech - Disinformation - Influence of Social Media -\nRegulation of Content\nFriday April 4, 2025 - Eleventh Lecture - Privacy Regulation - GDPR, CCPA, CPRA, international\ncontext\nFriday April 11, 2025 Twelfth Lecture - The Internet of Things and Security and Privacy\nFriday April 18, 2025 - Thirteenth Lecture - CryptoCurrency - TOR - Privacy Preserving Technologies\nFriday April 25, 2025 - Mass Surveilance, China's Social Credit Score\nFriday May 2, 2025 - Final Lecture - Conclusion - Review for Final Exam - The Future of Privacy and\nSecurity\nFinal Exam - Friday May 9th, 2024 - 11AM to 1PM\nCourse Materials (additional materials will be added during the seemster)\nFor January 14th\nIf youre not paranoid your crazy, Walter Kern, The Atlantic, November 2015.\nGoogle collects a frightening amount of data about you. You can find and delete it now\nThink Target and Home Depot invade your privacy? Political campaigns might be worse, Evan\nHalper, LA Times, January 27 2016.\nCourse Summary\nSome have said privacy is dead, but is it? Students of informatics will approach the problem of security from\ndifferent perspectives. Different parts of the curriculum will be already familiar to students depending on\ntheir perspective: the goals of the class are to let students see how their focus fits into the bigger picture,\nwhile simultaneously exposing them to important perspectives that might be absent from their other studies.\nhttps://ccss.usc.edu/529/ 1/3\n3/16/25, 7:27 PM DSci529: Security and Privacy in Informatics - Spring 2025\nStudents will develop the following abilities\nFor security practitioners\nUnderstand public policy and legal landscape\nUnderstand their behind privacy\nFor data scientists and informaticists\nUnderstand implications of your craft for privacy\nUnderstand public policy and legal landscape\nFor policy wonks\nUnderstand the technical landscape\nWhat is possible, what is not\nBoth in terms of protecting and destroying privacy\nFrom the legal perspective\nWhat is technically possible\nThe intended outcome for students with different backgrounds is:\nData Informatic students will understand the kinds of data collection and mining that contribute to the\nloss of privacy, and will consider the ethical and legal implications of the data collection in the systems\nthey implement. They will also be introduced to security measures they should take to protect the\npersonally identificable information they collect.\nSecurity Informatics students will understand the environemtn within which personally identifiable\niformation is collected, the the impact of the processing and inference that occurs. They will also learn\nsome of the theiry surrounding mesurement of privacy and inference and the ethical and legal\nimplications of privacy invading and privacy perserving technologies.\nStudent coming from a legal or public policy perspective will gain an appreciation for the technical\ncapabilities to preserve and violate privacy, and will understand what the technical limits and best\npractices are that can and cannot be practically legislated.\nInstructors and Assistants\nClifford Neuman\nOffice: Information Sciences Institute - 310-448-8736\nOffice hours: Monday 12:30PM to 2PM - or by appointment - Via Zoom\nEmail: bcn@isi.edu\nLink for Zoom for office hours is available in D2L\nTA - Dipsy Desai\nOffice hours: TBD or by appointment\nEmail:\nLink for Zoom for office hours is available in D2L under My Tools - Announcements\nAcademic Integrity\nAs an instructor I take academic integrity seriously. Cases of academic misconduct will result in the\nassignment of a failing grade for the class and referal of the matter to the student conduct office. In\neach of the past several years I have turned in multiple students for cheating and assigned failing\ngrades. Information on what constitutes academic dishonesty can be found on the CSci530 academic\nintegrity page, and by following links to university resources found on that page.\nAssignments\nQuarter-Weekly assignment - See discussion in lecture 1 regarding requirement to submit and discuss\ncurrent events. Due Weekly, but students must submit one event every four weeks.\nAssignment 1 Posted in D2L Discussion forum (Due before 2nd lecture)\nhttps://ccss.usc.edu/529/ 2/3",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "CSCI-599": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nThis is a first-year graduate class in distributed systems. Distributed systems is a powerful tool that enables\nscaling storage and computation power with relatively cheap cost. However, distribution brings in many\ncomplexities unseen in single computer systems. In this course, students will learn various such\ncomplexities and current solutions, both from industry and academia. This course requires reading 1 or 2\npapers per week, four lab projects, and an (optional) final project. Each class will have a mix of lecture and\ndiscussion.",
            "Learning Objective": "and Outcomes\nStudents will learn\n- How a large-scale systems structured\n- Different replication techniques and their tradeoffs\n- How to build a fault-tolerant systems\n- Data consistency challenges and a few remedies\n- How to speed up big data processing with data parallelism\n- Emerging distributed programming model and framework\n- How distributed systems may improve energy and cost efficiency\nRecommended Preparation\nKnowledge at the level of CSCI 201, CSCI 350, and CSCI 356 (or equivalent). Strong C++ experience.\nCourse Notes\nLectures slides and project descriptions will be posted online. Piazza will be used for announcements and\ndiscussions regarding lectures, projects, and exams.\nTechnological Proficiency and Hardware/Software Required\nTo work on projects, students must have a computer that can compile c++ code and run shell scripts.\nFor in-class participation, students must bring a smartphone with camera and internet access.\nRequired Readings and Supplementary Materials\nNo textbook. Required reading for each lecture will be posted online 1 week before each lecture.\nTentative reading lists:\n[Illusion of a single image]\n• [GFS] Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung. 2003. The Google file system. In Proceedings\nof the nineteenth ACM symposium on Operating systems principles (SOSP '03). Association for Computing\nMachinery, New York, NY, USA, 29–43. https://doi.org/10.1145/945445.945450\n• [RAMCloud] John Ousterhout, Arjun Gopalan, Ashish Gupta, Ankita Kejriwal, Collin Lee, Behnam Montazeri,\nDiego Ongaro, Seo Jin Park, Henry Qin, Mendel Rosenblum, Stephen Rumble, Ryan Stutsman, and Stephen\nYang. 2015. The RAMCloud Storage System. ACM Trans. Comput. Syst. 33, 3, Article 7 (September 2015), 55\npages. https://doi.org/10.1145/2806887\n[Fault-tolerance]\n• [VM-FT] Scales, Daniel J., Mike Nelson, and Ganesh Venkitachalam. \"The design of a practical system for fault-\ntolerant virtual machines.\" ACM SIGOPS Operating Systems Review 44, no. 4 (2010): 30-39.\n• [Raft] Ongaro, Diego, and John Ousterhout. \"In search of an understandable consensus algorithm.\" In 2014\nUSENIX Annual Technical Conference USENIX ATC 14, pp. 305-319. 2014.\n• [ChainRep] Van Renesse, Robbert, and Fred B. Schneider. \"Chain Replication for Supporting High Throughput\nand Availability.\" In OSDI, vol. 4, no. 91–104. 2004.\n• [PBFT] Castro, Miguel, and Barbara Liskov. \"Practical byzantine fault tolerance.\" In OSDI, vol. 99, no. 1999, pp.\n173-186. 1999.\n[Consistency]\n• [2PC] Lampson, Butler, and David Lomet. \"A new presumed commit optimization for two phase commit.\" In\n19th International Conference on Very Large Data Bases (VLDB'93), pp. 630-640. 1993.",
            "Table Description": "| Topics/Daily Activities | Readings and Homework | Deliverable/ Due Dates\nWeek 1 | Intro to distributed systems / RPC |  | Lab 0 out\nWeek 2 | Illusion of a single image | GFS, RAMCloud | Lab 0 due\nWeek 3 | Primary-backup replication and\nreplicated state machine | VM-FT | \nWeek 4 | Raft | Raft | Lab 1 out\nWeek 5 | Quiz 1 and Chain replication | ChainRep | \nWeek 6 | How to measure system performance\nand Byzantine consensus | PBFT | Lab 1 due\nWeek 7 | Consistency | 2PC, RIFL | Lab 2 out\nWeek 8 | Consistency (2) | Spanner | \nWeek 9 | Tail at scale and Quiz 2 | TailAtScale | Lab 2 due, signup for final project.\nWeek 10 | Data-parallel systems | MapReduce, Spark | Final project proposal due\nWeek 11 | Distribution for interactivity | ExCamera, MilliSort | Lab 3 out\nWeek 12 | Distributed programming model | Ray, Nu | \n\n\n\n\nWeek 13 | Swarm of wimpy | FAWN | Lab 3 due\nWeek 14 | Distributed job scheduling | Borg | \nWeek 15 | Quiz3 and project demo |  | \nFINAL | Final Project | Final Project | Due on the university-scheduled date of\nthe final exam.\n\n\n"
        }
    },
    {
        "CSCI-566": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nRecently, deep learning has advanced many AI-related problems: image retrieval, video\nanalysis, natural language processing, self-driving, medical applications, and more. Our goal is\nto guide students to get familiar with these recent cutting-edge deep learning (DL) advances in\ncomputer vision and natural language processing. Through this course, students will gain a\nbasic understanding of DL algorithms, and how to set up and solve problems involving deep\nlearning techniques. The course will include a couple of practical assignments and a final\ncourse project. For the final course project, students will be encouraged to pick their own\ntopics, but can also select from a provided list of projects.\nCourse website: TBA\nCourse Piazza: TBA\nPrerequisite(s):\n1. Proficiency in Python\n2. College Calculus, Linear Algebra\n3. Probability and Statistics\n4. Equivalent knowledge of CSCI 567 (Machine Learning)\nRecommended Preparation: sufficient mathematical background; good programming skills;\nfamiliarity with concepts and methods in machine learning and AI.\nInstructor: Jesse Thomason\nOffice: SAL 244\nOffice Hours: TBA\nTeaching Assistants and Office Hours:\n- TBA\nContact: Please ONLY use Piazza for any communication. This term we will be using Piazza for\nclass discussion and questions. The system is highly catered to getting you to learn fast and\nefficiently from classmates, the TA, and myself. Rather than emailing questions to the teaching\nstaff, I encourage you to post your questions on Piazza.\nRequired Readings and Supplementary Materials\n- Deep Learning (MIT Press) by Ian Goodfellow, Yoshua Bengio, and Aaron Courville.\n- A free online version is available at http://www.deeplearningbook.org/\n- (Supplementary) Neural Network Methods in Natural Language Processing (Goldberg)\n- https://www.amazon.com/Language-Processing-Synthesis-Lectures-Technologi\nes/dp/1627052984\nDescription and Assessment of Assignments\nPop-up Quizzes, 2 Coding Assignments, 1 Midterm exam, 1 research paper presentation, and 1\nCourse project (a proposal, reports, presentations, etc.)\nGrading Breakdown\nExtra credit: participation (5 points)\nEntry Points of the total grade\nParticipation (Pop-up Quiz) 5\nAssignment #1 10\nAssignment #2 10\nPaper presentation 10\nMidterm 20\nCourse Project 45\nTOTAL 100",
            "Learning Objective": "",
            "Table Description": "| Topics/Daily Activities | Readings and\nHomework | Deliverable/ Due\nDates\nWeek 1\nJan 13 | Course Introduction /\nApplications of Deep Learning |  | \nModule 1: Neural Network Basics |  |  | \n\n\n\n\nWeek 2\nJan 20 | Machine Learning 101 + Loss\nfunctions and Optimization |  | \nWeek 3\nJan 27 | NO CLASS |  | \nWeek 4\nFeb 3 | Neural Network Overview +\nConvolutional Neural\nNetworks |  | Course Project\nTeam\nWeek 5\nFeb 10 | Training Neural Networks +\nDeep Learning Software\nTutorial (by TA) + Cloud\ncomputing service tutorial (by\nTA) | Assignment 1 OUT | \nWeek 6\nFeb 17 | Recurrent Neural Networks |  | Course Project\nProposal\nModule 2 Deep Learning Applications |  |  | \nWeek 7\nFeb 24 | MIDTERM EXAM |  | Assignment 1\nWeek 8\nMar 3 | Deep Learning for Computer\nVision + project pitch |  | \nWeek 9\nMar 10 | Deep Learning for Natural\nLanguage Processing +\nmidterm re-cap | Assignment 2 OUT | Project survey\nWeek\n10\nMar 17 | NO CLASS |  | \nWeek\n11\nMar 24 | Reinforcement Learning 101 +\nDeep Learning for Graphs |  | Assignment 2\nModule 3: Advanced Topics in Deep Learning\nAdvanced topics are all subject to change |  |  | \nWeek\n12\nMar 31 | Attention, Memory, Relation\nNetworks + 5 paper\npresentations |  | Course Project\nMid-report\n\n\n\n\nWeek\n13\nApr 7 | Generative models & language\nmodels + 5 paper\npresentations |  | \nWeek\n14\nApr 14 | Multi-modal learning\n+ 5 paper presentations |  | \nWeek\n15\nApr 21 | Transfer learning / Multi-task\nlearning + 5 paper\npresentations |  | \nWeek\n16\nApr 28 | Team Project Presentations |  | \nFINAL | Final Report Due on\nUniversity Final Exam Day,\nWed May 3 | (No in-class\nExam) | Final Project\nReport due Wed\nMay 3 11:59pm\n\n\n"
        }
    },
    {
        "CSCI-572": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "CSCI-576": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:",
            "Learning Objective": ":\nThis course covers the state-of-the-art technology for multimedia systems. We will study\nall aspects of the different media types images, video, audio, graphics etc and how they\nare used to create multimedia content, compress and distribute them via networked\nsystem to variety of end clients. This includes issues related to\n Content creation - media capture and representation, methods to assemble media\ntypes to create multimedia content.\n Compression / Storage - We will also study the algorithms, protocols architectures\nrelated to compression.\n Distribution – Aspects of wired and wireless network distribution, Quality of\nService, as well as digital rights management of distributed multimedia\n(watermarking & encryption)\nFor each of the above ISO and ITU standards will also be addressed. These include\nJPEG, MPEG1, MPEG2, MPEG4, H.261, H.263, H.264, G.711, G.722, mp3, AAC,\nDolby AC3, THX, surround sound etc. We will also study applications and systems\naround multimedia – such as database applications with metadata (MPEG-7, MPEG-21).\nThe courses goal will also be to explain modern distributed multimedia systems that take\nthe some or all of the above components to create practical applications eg multimedia\nauthoring, digital cinema, content management, multimedia databases, etc.\nPrerequisites:\nThere are no special prerequisites are necessary, but it is imperative that you have\n Good Programming Skills (you should be comfortable with programming)\n Basic Math Skills\n It will be helpful if you have some background in any of the following - signal\nand image processing, graphics, video processing, audio processing, networks. All\nnecessary material will be introduced in the course.\nCourse Requirements:\nYou will be evaluated as follows:\nOne mid term exam (20% of your grade) – Nov 2011\nOne end term exam (20% or your grade) – Dec 2011\nTwo Assignments (25% of your grade)\nOne project (25% of your grade) – Dec 2011\nAttendance and participation (10% of your grade)",
            "Table Description": ""
        }
    },
    {
        "CSCI-402": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n● Reading List\n● Schedule\nOverview\nThis is a first­year graduate class in operating systems. As such, this class will give you a\ndeeper understanding of OS subsystems for process management, memory management, and\nso on, and expose you to classic and contemporary literature on the subject. The class also has\na hands­on implementation project which will give you insight into what it takes to build real\nnetworking sub­systems.\nThe class has the following components:\n■ Lab Assignments (50%). During the course of the semester, you will complete six lab\nassignments, filling in various pieces of an educational operating system. Starting from a\nbare­bones operating system, this sequence of lab exercises asks you to fill in important\npieces of process management, memory management, filesystems and network\ncommunication. At the end of the course, you will have a functional Web server running\non top of your operating system! All lab assignments are to be done individually. For the\nlab assignments, y ou will need to program in C.\n■ In­class quizzes (50%). There will be four quizzes. Each quiz will test not only the\nreading materials, but also your understanding of the lab exercises. All quizzes will be\nclosed book (but you may bring one sheet of 8.5x11 paper with anything written on it)\nand will contain a mixture of multiple­choice and short answer questions.\nStudent Responsibilities\nBy enrolling this class, here is what you're agreeing to:\n■ All work turned in on programming assignments and exams must be that of the individual\nstudent. If the instructor finds any evidence of cheating on an exam, he reserves the\nright to discipline the student appropriately (see below).\n■ This policy also holds for programming assignments. In this class, we will use\nsophisticated automated program checkers to detect cheating. Be aware that the\nprogram checkers have demonstrated very good results and are widely used within the\nacademic community. Any student caught cheating w ill be given zero for the\nassignment and w ill be reported to SJACS.\n■ You must keep up with the assigned readings. If you come to class without having read\nthe papers for the corresponding lecture, you're unlikely to learn anything at all from the\nlecture. In particular:\n■ You are expected to read all the papers in detail. Not all details will be covered in\nclass. I will assume knowledge of material covered in CS 402 and EE/CS 450, a\nC/C++ programming proficiency from CS402 or its equivalent, and Python\nprogramming profiency. If you covered the introductory material at some other\nschool it is YOUR responsibility to fill in any missing background. Feel free to ask\nme for advice on appropriate introductory readings if you feel your background is\ninsufficient.\n■ I expect you to attend every class meeting. If you do happen to miss a session,\nyou are responsible for finding out what material was covered and if any\nadministrative announcements were made.\nNews and Discussion Forum\nAll interaction with the instructor and with other students for the class will be through its Piazza\nsite. On the first day of classes, I will announce more details about Piazza.\nYou are expected to check Piazza periodically for important announcements.\nIf you wish to contact me, please use Piazza (rather than my regular email), and I will try to\nrespond to your question quickly. While you should always feel free to contact me, I strongly\nencourage you to post your question to Piazza; you will usually get much faster responses from\nyour fellow students.\nReading List\nEarly Operating Systems\n● [Ritchie:Unix] R itchie, Dennis M., Thompson, Ken, T he UNIX Time­sharing System,\nCommun. ACM, Vol. 1 7, No. 7, pp. 365­­375, ACM, New York, NY, USA, J uly 1974.\n[HTML]\n● [Ritchie:Evolution] D ennis M. Ritchie, T he Evolution of the Unix Time­sharing\nSystem, C ommunications of the ACM, Vol. 1 7, pp. 365­­375, 1 984. [ PDF]\nAlternative OS Structures\n● [Engler:Exokernel] E ngler, D. R., Kaashoek, M. F., O'Toole,Jr., J., E xokernel: An\nOperating System Architecture for Application­level Resource Management,\nProceedings of the Fifteenth ACM Symposium on Operating Systems Principles, pp.",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "CSCI-104 L": {
            "Course Description": "Catalogue Course Description:\nIntroduces the student to standard data structures (linear structures such as linked lists,\n(balanced) trees, priority queues, and hashtables), using the C++ programming language.\nPrerequisites\n• CSCI 103: Introduction to Programming\n• CSCI 170: Discrete Methods in Computer Science\nCourse Websites\n• All content & info\n• Piazza\nGrading Weights and Scale\nThe following point structure will be used in determining the grade for the course. Your\nfinal grade will depend solely on your own performance, graded according to the scale\ngiven below.\nWeight Item\n28% Homework\n(18% 6x Programming Assignments, 10% 5x Written Assignments)\n10% Lab Exercises\n62% Exams (16% low, 20% median, 26% high across MT1, MT2 and Final Exam)\nGrading Scale\nWe will guarantee that you will get at least the grade indicated by the following scale.\nBecause of the fairly generous scale we will not round up if you are close to the lower\nthreshold of a letter grade.\nGrade Letter\n90% A\n85% A-\n80% B+\n75% B\n70% B-\n\nExpanded Course Description:\nThe course covers the fundamentals of data structures. As a programmer becomes more\nproficient, they realize that how well and efficiently a problem can be solved often\ndepends on how the data are stored. Some of the ideas are quite sophisticated and\nclever, and we will explore a spectrum of them in this class, ranging from fairly basic to\nmoderately advanced structures.\nThe other side is that once one realizes the importance of data structures, it is natural to\nthink of programs not as sequences of instructions that pass around some data, but as\ndata packets that come with the code needed to process them. This is at the heart of the\nobject-oriented design paradigm, and often leads to more modular and extensible (and\nreadable) programs.\nThe class will put significant emphasis on a theoretical understanding of data structures,\ntheir implementation, and the object-oriented viewpoint. Assignments will contain\nsignificant programming projects along with programming-free questions to explore how\ndata structures work.",
            "Learning Objective": "1. Ability to choose appropriate and efficient data structures and algorithms to solve\na problem.\n2. Ability to compare data structures and algorithms for efficiency using algorithm\nanalysis and experiments.\n3. Ability to apply algorithm analysis and knowledge of discrete mathematics to\nevaluate algorithms and data structures.\n4. Ability to implement and use linear data structures, including stacks, queues, lists.\n5. Ability to implement and use search structures and algorithms including binary\nsearch, search trees, and hash tables.\n6. Ability to use and implement search data structures, including search trees and\nhash tables.\n7. Ability to use and implement priority queues.\n8. Knowledge of and ability to implement sorting algorithms and compare their\nperformance analytically and empirically.\n9. Understanding of graphs and their representations; ability to implement graph\nsearch using BFS, DFS, and Dijkstra’s Algorithm.\n10. Ability to write recursive functions and understand when recursion is appropriate\nto a problem.\n11. Ability to write readable and maintainable code.\n12. Ability to explain computational solutions in person and in writing.\n13. Use probability as a tool in analyzing the efficiency of various data structures\n14. Use basic number theory to analyze basic hash functions\nCatalog Entry\nIntroduces the student to standard data structures (linear structures such as linked lists,\n(balanced) trees, priority queues, and hashtables), using the C++ programming language.\nPrerequisites\n• CSCI 103: Introduction to Programming\n• CSCI 170: Discrete Methods in Computer Science\nCourse Websites\n• All content & info\n• Piazza\nGrading Weights and Scale\nThe following point structure will be used in determining the grade for the course. Your\nfinal grade will depend solely on your own performance, graded according to the scale\ngiven below.\nWeight Item\n28% Homework\n(18% 6x Programming Assignments, 10% 5x Written Assignments)\n10% Lab Exercises\n62% Exams (16% low, 20% median, 26% high across MT1, MT2 and Final Exam)\nGrading Scale\nWe will guarantee that you will get at least the grade indicated by the following scale.\nBecause of the fairly generous scale we will not round up if you are close to the lower\nthreshold of a letter grade.\nGrade Letter\n90% A\n85% A-\n80% B+\n75% B\n70% B-",
            "Table Description": ""
        }
    },
    {
        "DSCI-510": {
            "Course Description": "Catalogue Course Description:\n:\nIntroductory programming course for non-Computer Science majors. Programming in Python for\nretrieving, searching, and analyzing data from the Web. Learning to manipulate large data sets.\n\nExpanded Course Description:\nExpanded Course Description:\nThis course is designed to serve as an introduction to computer science concepts and basic\nprogramming skills that are specifically geared toward Informatics, and forms a part of the\nintroductory coursework for the program in Communication Informatics. The main objective of this\ncourse is to introduce the fundamental concepts behind general computer science and\nprogramming, and to give students practical hands-on experience reading and writing computer\nprograms, in order to give them the tools to manipulate large data sets.\nThe course is designed to be accessible to non-Computer Science major students with little or no\nprogramming experience, and emphasizes writing programs that are capable of retrieving and\nmanipulating large amount of data. The first half of the course focuses on Python as a first\nprogramming language, while the second half of the course covers selected advanced topics such as\ndata visualization, web scraping, database access, and more.\nThe course will be a combination of lecture, in-class discussion, readings, written homework\nassignments, a mid-term exam, and a final exam.\nCourse Objectives:\nThe objective of this course is to train students to write computer code capable of manipulating\nlarge data sets. Specifically, students successfully completing this course will achieve two main\nobjectives:\n1. Acquire basic concepts in computer science and programming.\n2. Develop sufficient proficiency in Python to write applications capable of retrieving,\nsearching, manipulating, analyzing, and displaying data.\nMethods of Teaching:\nThe primary teaching methods will be discussion, case studies, and lectures. Students are expected\nto perform directed self-learning outside of class which encompasses, among other things, a\nconsiderable amount of programming practice.\nThere will a midterm exam and comprehensive final exam. There will also be homework\nassignments and a final project. There will be weekly lab meetings.\nStudents are expected to have access to a computer that can run the Python programming language\nand a web browser, and to bring it to class. Beyond that, no special computing facility, hardware or\nsoftware will be necessary for this course.\nGrading Scheme (still subject to change):\nHomework Assignments: 20%\nLab: 25%\nMid-Term: 25%\nFinal Project 30%\nTotal 100%\nGrades will range from A through F. The following is the breakdown for grading:\n94 - 100 = A 74 - 76 = C\n90 - 93 = A - 70 - 73 = C-\n87 - 89 = B+ 67 - 69 = D+\n84 - 86 = B 64 - 66 = D\n80 - 83 = B- 60 - 63 = D-\n77 - 79 = C+ Below 60 is an F\nGrading for the course will be based on five major components:\n1. HOMEWORK – There will be a number of assignments given throughout the semester.\nAssignments may include exercises from the textbook, and may include additional questions from\nother sources. Each student is expected to submit the completed assignment when due. All\nhomework assignments are to be submitted individually and students will receive individual\nscores. Guidelines and additional information will be developed to provide a common vernacular",
            "Learning Objective": "of this\ncourse is to introduce the fundamental concepts behind general computer science and\nprogramming, and to give students practical hands-on experience reading and writing computer\nprograms, in order to give them the tools to manipulate large data sets.\nThe course is designed to be accessible to non-Computer Science major students with little or no\nprogramming experience, and emphasizes writing programs that are capable of retrieving and\nmanipulating large amount of data. The first half of the course focuses on Python as a first\nprogramming language, while the second half of the course covers selected advanced topics such as\ndata visualization, web scraping, database access, and more.\nThe course will be a combination of lecture, in-class discussion, readings, written homework\nassignments, a mid-term exam, and a final exam.\nCourse Objectives:\nThe objective of this course is to train students to write computer code capable of manipulating\nlarge data sets. Specifically, students successfully completing this course will achieve two main\nobjectives:\n1. Acquire basic concepts in computer science and programming.\n2. Develop sufficient proficiency in Python to write applications capable of retrieving,\nsearching, manipulating, analyzing, and displaying data.\nMethods of Teaching:\nThe primary teaching methods will be discussion, case studies, and lectures. Students are expected\nto perform directed self-learning outside of class which encompasses, among other things, a\nconsiderable amount of programming practice.\nThere will a midterm exam and comprehensive final exam. There will also be homework\nassignments and a final project. There will be weekly lab meetings.\nStudents are expected to have access to a computer that can run the Python programming language\nand a web browser, and to bring it to class. Beyond that, no special computing facility, hardware or\nsoftware will be necessary for this course.\nGrading Scheme (still subject to change):\nHomework Assignments: 20%\nLab: 25%\nMid-Term: 25%\nFinal Project 30%\nTotal 100%\nGrades will range from A through F. The following is the breakdown for grading:\n94 - 100 = A 74 - 76 = C\n90 - 93 = A - 70 - 73 = C-\n87 - 89 = B+ 67 - 69 = D+\n84 - 86 = B 64 - 66 = D\n80 - 83 = B- 60 - 63 = D-\n77 - 79 = C+ Below 60 is an F\nGrading for the course will be based on five major components:\n1. HOMEWORK – There will be a number of assignments given throughout the semester.\nAssignments may include exercises from the textbook, and may include additional questions from\nother sources. Each student is expected to submit the completed assignment when due. All\nhomework assignments are to be submitted individually and students will receive individual\nscores. Guidelines and additional information will be developed to provide a common vernacular",
            "Table Description": "Week | Topics/Activities | Book Chapters\n1 | Intro to programs, variables, conditionals, iteration, types. | 1, 2\n2 | Types, type coercion, Boolean/logical expressions, review\nconditional execution, exceptions, functions. | 3, 4\n3 | Exceptions, “is” vs. “==”, iterations (while, for, etc.), strings. | 5, 6\n4 | Python tracebacks, “repr” vs. “print”, file I/O, lists. | 7, 8\n5 | Dictionaries, tuples, combinations thereof. | 9, 10\n6 | Python objects, inheritance, operator overloading, creating\nmultiple/dynamic objects. | 14\n7 | *args, **kargs, dynamic object creation, __main__ and\nmodules. Python review. | 1–10, 14\n8 | Midterm. | \n9 | The DOM, the requests library, web scraping with Beautiful\nSoup. | 12\n10 | XML, JSON, web APIs. | 13\n\n\n\n\n11 | Intro to databases, intro to SQL, multi-DB design,\nnormalization, foreign keys, SQL joins, many-to-many\nrelationships, Twitter spidering, an iTunes XML DB\nexample. | 15\n12 | More about databases and SQL. | 15\n13 | SQLalchemy ORM, Pandas. | —\n14 | Regex, advanced web scraping, git tutorial. | 11\n15 | Course review, final discussion, project presentations. | —\n | Final project. | \n\n\n"
        }
    },
    {
        "CSCI-529B": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\n:\nCTIN 493/CSCI 491b and 529b is the second semester of the two-semester advanced game project class\nadministered collaboratively by the USC School of Cinematic Arts and the USC Viterbi School of\nEngineering.\nStudents bring their individual talents as designers, programmers, artists, writers, composers, producers,\netc. together in cross-disciplinary teams. Mentors from industry and the faculty are integrated into the\nprocess from the start. Teams that need 3D art assets have access to additional student resources from\nthe CSCI 281 Pipelines for Games class.\nThe Spring semester focuses on polishing game projects started in the Fall semester for possible festival\nsubmission and/or publication.\nSpring 2013 CTIN 493 and CSCI 491a/ 529a Advanced Game Production Syllabus 1\nEight projects have been chosen by a rigorous selection process to be produce in this class. For 2012-\n2013, these eight projects are:\n1. Core Overload - Emory Irpan (lead)\n2. House of Cards - Sam Rosenthal (lead)\n3. Scrapyard - Chris Oslund (lead)\n4. Outer Wilds – Alex Beachum (lead)\n5. Thralled - Miguel Oliveira (lead)\n6. Conclave - Andrew Thompson (lead)\n7. Homeward – Will Hellwarth (lead)\n8. Wild Skies - Nathan Burba (lead)\nThe main course goal is to develop a playable level demonstration of the core design and the approved\nscoped features for the game. This game should be installable, intuitive and functional so that a player\ncan pick up and play.\nDeliverables are:\n Game Document (Also referred to as ‘Game Bible’)\no Several levels within game outlined\no Replay ability and possible a sub-game\n Stats sheets\n Bug/Feature tracking software utilized within the team\n Marketing trailer\n In-game cinematic\n Product box\n Demo at USC GamePipe Demo Day\n Play testing feedback from users (non-project team members)\nWe also expect the previous semester’s deliverables, with the following updated:\n Final playable game level executable\n Zipped project on server\no Proper organization on server directory expected\n Installer\n Game poster (with screenshots of game play)\n Completed website\nProfs Malamed, Easley, and Zyda will each be available for all eight projects.\nDuring class, each individual on the team must be prepared to discuss his/her work from the previous\nweek. The team leader and producer on the team will give each student (including themselves) a new\nindividualized assignment for the coming week. All assignments will be posted in writing on the project\nGoogle Spreadsheet found on the course website. Assignments will come from the team leader with\nassistance/approval from the professors.\nThe order of the team visits with the professor will be determined randomly each week. Teams must be\nprepared to present at the beginning of each class. The producer on the team owns the document and is\nrequired to have updated the document prior to class by canvasing the team for status updates. Students\nSpring 2013 CTIN 493 and CSCI 491a/ 529a Advanced Game Production Syllabus 2",
            "Learning Objective": "",
            "Table Description": ""
        }
    },
    {
        "CSCI-561": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:",
            "Learning Objective": "",
            "Table Description": "| Date |  |  | Topic |  |  | Reading | \nWeek-1\n8/24 |  |  |  | 1. Welcome – Introduction. Why study AI? What is AI? The Turing test. Rationality. Branches of AI. |  | AIMA 1, 2\n(ALFE 1) | AIMA 1, 2 | \n |  |  |  | Brief history of AI. Challenges for the future. What is an intelligent agent? Doing the right thing |  |  | (ALFE 1) | \n |  |  |  | (rational action)? Performance measures. Autonomy. Environment and agent. Types of agents. |  |  |  | \n |  |  |  | 2. Problem Solving & Search – Types of problems. Example problems. Basic idea behind search |  | AIMA 3\n(ALFE 2, 6) |  | \n |  |  |  | algorithms. Complexity. Combinatorial explosion and NP completeness. Polynomial hierarchy. |  |  |  | \nWeek-2\n8/31 |  |  |  | 3. Uninformed Search - Depth-first. Breadth-first. Uniform-cost. Depth-limited. Iterative deepening. |  | AIMA 3\nHW1 out |  | \n |  |  |  | Examples. Properties. |  |  |  | \n |  |  |  | 4. Informed Search – Best-First, A* search, Heuristics, Hill climbing, Problem of local extrema, |  | AIMA 3, 4\n(ALFE 6) |  | \n |  |  |  | Simulated annealing, and Genetic Algorithms. |  |  |  | \nWeek-3\n9/7 |  |  |  | 5. Constraint satisfaction. Node, arc, path, and k-consistency. Backtracking search. Local search |  | AIMA 6 |  | \n |  |  |  | using min-conflicts. |  |  |  | \n |  |  |  | 6. Game Playing - The minimax algorithm. Resource limitations. Alpha-beta pruning. Chance and non- |  | AIMA 5 |  | \n |  |  |  | deterministic games. |  |  |  | \nWeek-4\n9/14 |  |  | 7. Advanced Game Playing - Agent Interaction with environment and other agents.\n8. Reinforcement Learning. | 7. Advanced Game Playing - Agent Interaction with environment and other agents. |  | AIMA 21\nALFE 6.1 |  | \nWeek-5\n9/21 |  |  | 9. Agents that reason logically 1 – Knowledge-based agents. Logic and representation. Propositional\n(Boolean) logic. |  |  |  | AIMA 7 | \n |  |  |  |  |  |  | (ALFE 3) | \n |  |  |  |  |  |  | HW1 due | \n |  |  | 10. Agents that reason logically 2 – Inference in propositional logic. Syntax. Semantics. Examples. |  |  |  | AIMA 7 | \n |  |  |  |  |  |  | HW2 out | \n | Week-6 |  | Midterm exam 1 (no make-up exam) |  |  |  |  | \n | 9/28 |  |  |  |  |  |  | \nWeek-7\n10/5 |  |  |  | 11. First-order logic 1 – Syntax. Semantics. Atomic sentences. Complex sentences. Quantifiers. |  | AIMA 8,\nAIMA 12 |  | \n |  |  |  | Examples. FOL knowledge base. Situation calculus. |  |  |  | \n |  |  |  | 12. First-order logic 2 – Describing actions. Planning. Action sequences. |  | AIMA 8 |  | \nWeek-8\n10/12 |  |  |  | 13. Inference in first-order logic – Proofs. Unification. Generalized modus ponens. Forward and |  | AIMA 9 |  | \n |  |  |  | backward chaining. |  |  |  | \n |  |  |  | 14. Continue Inference in first-order logic. Resolution. Proof by contradiction. |  | AIMA 9 |  | \nWeek-9\n10/19 |  |  |  | 15. Logical reasoning systems – Indexing, retrieval and unification. The Prolog language. Theorem |  | AIMA 9 |  | \n |  |  |  | provers. Frame systems and semantic networks. |  |  |  | \n |  |  |  | 16. Planning – Definition and goals. Basic representations for planning. Situation space and plan |  | AIMA 10\n(ALFE 6) |  | \n |  |  |  | space. Examples. |  |  |  | \n | Week-10 |  | Midterm exam 2 (no make-up exam) | Midterm exam 2 (no make-up exam) |  | HW2 due\nHW3 out |  | \n | 10/26 |  |  |  |  |  |  | \n\n\n\n\nWeek-11\n11/2 |  |  | 17. Learning from examples – supervised learning, learning decision trees, support vector machines. |  |  |  | AIMA 18 | \n |  |  |  |  |  |  | Handout | \n |  |  |  | 18. Learning with neural networks – Perceptron, Hopfield networks. How to size a network? What |  | AIMA 18\nHandout | AIMA 18 | \n |  |  |  | can neural networks achieve? Deep learning and state of the art. |  |  |  | \nWeek-12\n11/9 |  |  |  | 19. Reasoning under uncertainty – probabilities, conditional independence, Markov blanket, Bayes |  | AIMA 13, 14 |  | \n |  |  |  | nets. |  |  |  | \n |  |  |  | 20. Reasoning under uncertainty – Probabilistic inference, enumeration, variable elimination, |  | AIMA 14, 15\n(ALFE 5) |  | \n |  |  |  | approximate inference by stochastic simulation, Markov chain Monte Carlo, Gibbs sampling. |  |  |  | \nWeek-13\n11/16 |  |  |  | 21. Probabilistic decision making – utility theory, decision networks, value iteration, policy iteration, |  | AIMA 16, 17\n(ALFE 5) |  | \n |  |  |  | Markov decision processes (MDP), partially observable MDP (POMDP). |  |  |  | \n |  |  |  | 22. Probabilistic Reasoning over time: Temporal models, Hidden Markov Models, Kalman filters, |  | AIMA15\nHW3 due |  | \n |  |  |  | Dynamic Bayesian Networks, Automata theory. |  |  |  | \n | Week-14 |  |  | 11/23 Thanksgiving Break |  |  |  | \nWeek-15\n11/30 |  |  |  | 23. Probability-Based Learning: Probabilistic Models, Naive Bayes Models, EM algorithm, |  | AIMA 20\n(ALFE 5.10) |  | \n |  |  |  | Reinforcement Learning. |  |  |  | \n |  |  |  | 24. Towards intelligent machines – The challenge of robots: with what we have learned, what hard |  | AIMA 24,26-27\n(ALFE 13) |  | \n |  |  |  | problems remain to be solved? Different types and architectures of robots. |  |  |  | \n | Week-16 |  |  | 12/7 Final Exam 4:30-6:30PM (set by the University/School) (no make-up exam) |  |  |  | \n\n\n"
        }
    },
    {
        "CSCI-401": {
            "Course Description": "Catalogue Course Description:\n.\n\nExpanded Course Description:\nGroup project with an outside stakeholder to develop real-world software solutions to large-scale\nproblems. Topics include software engineering, professional preparation, and recent computer science\nresearch.",
            "Learning Objective": "Course Outcomes (expected after you've finished the course)\ni Experience working in a team to complete a real-world professional software project\nii The ability to apply knowledge of different areas of computer science to solve a real-world\nproblem\niii The ability to apply software engineering processes and methodologies in a professional\nenvironment\niv Preparation for professional interviews and jobs\nGraduates of the program will have an ability to:\n1 Analyze a complex computing problem and to apply principles of computing and other relevant\ndisciplines to identify solutions.\n2 Design, implement, and evaluate a computing-based solution to meet a given set of computing\nrequirements in the context of the program’s discipline.\n3 Communicate effectively in a variety of professional contexts.\n4 Recognize professional responsibilities and make informed judgments in computing practice\nbased on legal and ethical principles.\n5 Function effectively as a member or leader of a team engaged in activities appropriate to the\nprogram’s discipline.\nPrerequisite(s)\nCSCI 270 – Introduction to Algorithms and Theory of Computing\nCSCI 310 – Software Engineering\nCourse Notes\nThe course primarily consists of students working on a professional project with a stakeholder external to\nthe class. Weekly status meetings are conducted by the course staff with each team to ensure the team is\nstaying focused and completing the project in an appropriate manner. Blackboard will be used for all project\nsubmissions, and different software/hardware will be required based on the specific project requirements.\nStudents will give a live presentation/demonstration at the end of the semester.\nCSCI 401 Syllabus\n2/8",
            "Table Description": "| Week |  |  | Lecture |  |  | Date |  |  | Lecture Topic | \n1 |  |  |  |  |  |  | January 18, 2021 |  |  | No class | \n |  |  |  | 1 |  |  | January 20, 2021 |  |  | Class Overview, Project Discussion | \n2 |  |  |  | 2 |  |  | January 25, 2021 |  |  | Status Updates #1 | \n |  |  |  | 3 |  |  | January 27, 2021 |  |  | Status Updates #1 | \n3 |  |  |  | 4 |  |  | February 1, 2021 |  |  | Status Updates #2 | \n |  |  |  | 5 |  |  | February 3, 2021 |  |  | Status Updates #2 | \n4 |  |  |  | 6 |  |  | February 8, 2021 |  |  | Status Updates #3 | \n |  |  |  | 7 |  |  | February 10, 2021 |  |  | Status Updates #3 | \n5 |  |  |  |  |  |  | February 15, 2021 |  |  | No Class – Presidents’ Day | \n |  |  |  | 8 |  |  | February 17, 2021 |  |  | No status updates | \n6 |  |  |  | 9 |  |  | February 22, 2021 |  |  | Status Updates #4 | \n |  |  |  | 10 |  |  | February 24, 2021 |  |  | Status Updates #4 | \n7 |  |  |  | 11 |  |  | March 1, 2021 |  |  | Status Updates #5 | \n |  |  |  | 12 |  |  | March 3, 2021 |  |  | Status Updates #5 | \n8 |  |  |  | 13 |  |  | March 8, 2021 |  |  | Status Updates #6 | \n |  |  |  | 14 |  |  | March 10, 2021 |  |  | Status Updates #6 | \n9 |  |  |  | 15 |  |  | March 15, 2021 |  |  | Status Updates #7 | \n |  |  |  | 16 |  |  | March 17, 2021 |  |  | Status Updates #7 | \n10 |  |  |  | 17 |  |  | March 22, 2021 |  |  | Status Updates #8 | \n |  |  |  | 18 |  |  | March 24, 2021 |  |  | Status Updates #8 | \n11 |  |  |  | 19 |  |  | March 29, 2021 |  |  | Status Updates #9 | \n |  |  |  | 20 |  |  | March 31, 2021 |  |  | Status Updates #9 | \n12 |  |  |  | 21 |  |  | April 5, 2021 |  |  | No status updates | \n |  |  |  | 22 |  |  | April 7, 2021 |  |  | No Class – Wellness Day | \n13 |  |  |  | 23 |  |  | April 12, 2021 |  |  | Status Updates #10 | \n |  |  |  | 24 |  |  | April 14, 2021 |  |  | Status Updates #10 | \n14 |  |  |  | 25 |  |  | April 19, 2021 |  |  | Status Updates #11 | \n |  |  |  | 26 |  |  | April 21, 2021 |  |  | Status Updates #11 | \n15 |  |  |  | 27 |  |  | April 26, 2021 |  |  | Status Updates #12 | \n |  |  |  | 28 |  |  | April 28, 2021 |  |  | Status Updates #12 | \n16 |  |  |  |  |  |  | May 10, 2021 |  | Final Project Demonstrations Due |  | \n |  |  |  |  |  |  | 11:00a.m.-1:00p.m. |  |  |  | \n\n\n"
        }
    }
]